.\" Copyright (c) 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %sccs.include.redist.man%
.\"
.\"	@(#)cksum.1	5.2 (Berkeley) %G%
.\"
.TH CKSUM 1 ""
.UC 7
.SH NAME
cksum \- display file checksums and block counts
.SH SYNOPSIS
.ft B
.nf
cksum [\-o [1 | 2]] [file ...]
.fi
.ft R
.SH DESCRIPTION
The
.I cksum
utility writes to standard output three whitespace separated fields for each
input file (or the standard input by default).
These fields are a checksum CRC, the total number of bytes in the file and
the file name.
.PP
The options are as follows:
.TP
\-o
Use historic algorithms instead of the (superior) default one.
.IP
Algorithm 1 is the algorithm used by historic BSD systems as the 
.IR sum (1)
algorithm and by historic System V systems as the
.I sum
algorithm when using the \-r option.
This is a 16-bit checksum, with a right rotation before each addition;
overflow is discarded.
.IP
Algorithm 2 is the algorithm used by historic System V systems as the
default
.I sum
algorithm.
This is a 32-bit checksum, and is defined as follows:
.IP
.in +5
.nf
s = sum of all bytes;
r = s % 2^16 + (s % 2^32) / 2^16;
cksum = (r % 2^16) + r / 2^16;
.fi
.in -5
.IP
Both algorithm 1 and 2 write to standard output the same fields as
the default algorithm except that the size of the file in bytes is
replaced with the size of the file in blocks.
For historic reasons, the block size is 1024 for algorithm 1 and 512
for algorithm 2.
Partial blocks are rounded up.
.PP
The default CRC used is based on the polynomial used for CRC error checking
in the networking standard ISO 8802-3: 1989.
The CRC checksum encoding is defined by the generating polynomial:
.sp
.RS
G(x) = x^32 + x^26 + x^23 + x^22 + x^16 + x^12 +
.RS
x^11 + x^10 + x^8 + x^7 + x^5 + x^4 + x^2 + x + 1
.RE
.RE
.PP
Mathematically, the CRC value corresponding to a given file is defined by
the following procedure:
.RS
.PP
The
.I n
bits of the file are considered to be the coefficients of a mod 2
polynomial M(x) of degree
.IR n -1.
.PP
M(x) is multiplied by x^32 (i.e., shifted left 32 bits) and divided by
G(x) using mod 2 division, producing a remainder R(x) of degree <= 31.
During the division, each time the intermediate remainder is zero, it
is changed to the next value from a predefined sequence of 32-bit
integers before completing the division.
This sequence is long and complex -- see the source code for more
information.
.PP
The coefficients of R(x) are considered to be a 32-bit sequence.
.RE
.PP
The calculation used is identical to that given in pseudo-code in
the ACM article referenced below.
.PP
The
.I cksum
utility exits 0 on success, and >0 if an error occurs.
.SH SEE ALSO
.IR "Computation of Cyclic Redundancy Checks Via Table Lookup" ,
Dilip V. Sarwate, Communications of the ACM, August 1988.
.SH STANDARDS
.I Cksum
is expected to conform to IEEE Std 1003.2 (``POSIX'').
.SH HISTORY
.I Cksum
first appeared in 4.4BSD.
