(File fix.l)
(%lineread lambda go tyi memq tyipeek cdr reverse return car eq cond quote read cons setq prog)
(fretry lambda cadaddr caaddr quote list cadddr caddr eval car eq cond freturn)
(sysp lambda memq)
(build-sysp lambda cdr cons car cxr getd cond setq null oblist do)
(debug-sysp lambda cxr getd dtpr not symbolp sysp and)
(debug-where lambda go |1+| caaddr debug-findcall return car caddr atom or eq =& = quote princ bigp not null and zerop cond terpri debug-print1 memq length cdr - setq prog)
(debug-pop lambda go freturn caaddr eq caddr dtpr and reset cadr evalframe null cond car setq prog)
(debug-findexpr lambda debug-dnframe debug-findexpr caddr atom not car eq and null cond)
(debug-findusrfn lambda debug-dnframe debug-findusrfn cxr getd caaddr symbolp caddr dtpr and null cond)
(debug-insidep lambda cons quote list edite errset car)
(debug-nedit lambda debug-dnframe return cons list edite print Internal-bcdcall getdisc eq bcdp symbolp funcall and fix-print quote princ debug-insidep cond caaddr cxr getd go or debug-findusrfn caddr setq prog)
(debug-showvar lambda print car atom eval Internal-bcdcall getdisc eq bcdp setq symbolp cadddr fix-eval errset funcall cxr getd and cond fix-print quote princ terpri)
(debug-dnfn lambda quote debug-nextframe)
(debug-upfn lambda quote debug-nextframe)
(debug-dnframe lambda debug-nextframe)
(debug-upframe lambda debug-nextframe)
(debug-nextframe lambda go caaddr debug-sysp caddr atom cond or car return not and memq cdr setq prog)
(debug-getframes lambda nreverse return =& = fixp or cadadr go concat typep null memq cadr evalframe car caaddr eq caddr atom not and cons quote debug-scanstk setq prog)
(debug-scanstk lambda go cadr evalframe setq caaddr memq caddr atom not and return or prog)
(debug-scanflist lambda go debug-dnframe setq caaddr memq caddr atom not and return or prog)
(debug-findcall lambda caaddr go eq caddr atom cond return or debug-nextframe setq prog)
(debug-print1 lambda concat caar do assq debug-sysp cdr debug-upframe or debug-showvar car null cons ncons liszt-internal-do mapc dtpr cadr caaddr return print Internal-bcdcall getdisc eq bcdp symbolp funcall cxr getd fix-print quote princ terpri caddr atom cond setq memq not and prog)
(debug-print lambda go or debug-dnframe return terpri quote princ eq debug-print1 caaddr debug-sysp caddr atom memq and not cond car setq prog)
(debug-bktrace lambda princ terpri debug-print debug-findcall =& = debug-dnframe return debug-dnfn debug-iter bigp zerop |1-| caaddr atom or and go fixp memq not debug-sysp caddr cadr typep cdr quote eq cond selectq cons null car explodec cddr setq liszt-internal-do mapc prog)
(debug-replace-function-name lambda eval fretry dsubst go return bigp not cdr zerop null or and |1-| debug-dnframe debug-iter cadr cadddddr caddddr eq cond caddr setq prog)
(debug1 lambda debug-showvar *** terpr patom debug-dnfn debug-upfn princ terpri go bigp not zerop |1-| debug-upframe debug-iter list errset dtpr debug-findusrfn null debug-nedit debug-findcall debug-dnframe step debug-pop fretry freturn caaddr debug-findexpr exec ty eval debug-where $prpr Internal-bcdcall getdisc bcdp funcall cxr getd fix-pp debug-print1 selectq quote cons memq symbolp cdr <& < caddr cadr fixp cond debug-bktrace getchar debug-replace-function-name and return typep eq or car setq prog)
(debug nlambda atom debug1 eval fix-eval dtpr reset %lineread lineread null debug-pop debug-nedit errset =& = tyi drain memq debug-print1 go print Internal-bcdcall getdisc bcdp symbolp funcall cxr getd fix-print cddddr cadddr princ terpri eq not cond car debug-findexpr debug-scanstk list debug-getframes or reverse quote step and setq prog)
(fixit nlambda quote cons eval do prog)
(fix-eval macro append cons quote list cdr)
