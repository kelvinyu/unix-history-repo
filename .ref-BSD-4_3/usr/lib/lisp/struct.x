(File struct.l)
(defstruct-examine&deposit-find-slot-description lambda defstruct-type-description-ref-no-args =& = defstruct-description-type get list quote error defstruct-error return caar eq cond null cdddr nthcdr car nth defstruct-description-slot-alist do assq or cdr get-defstruct-description let)
(defstruct-deposit lambda defstruct-examine&deposit-find-slot-description cdddddr nthcdr car nth defstruct-slot-description-ref-macro-name quote list eval)
(defstruct-examine lambda quote defstruct-examine&deposit-find-slot-description cdddddr nthcdr car nth defstruct-slot-description-ref-macro-name list eval)
(:fixnum-defstruct-ref lambda)
(:fixnum-defstruct-cons lambda nthcdr car nth defstruct-description-name quote error defstruct-error cdr not null or and)
(make-tree-for-defstruct lambda - make-tree-for-defstruct bigp not null and zerop |1-| / cdr do cadr quote list car eq =& = cond)
(:tree-defstruct-expand lambda defstruct-description-name quote error defstruct-error nthcdr car nth defstruct-description-include and)
(:tree-defstruct-ref lambda - quote list / setq lessp < return eq =& = cond nthcdr car nth defstruct-description-size do)
(:tree-defstruct-cons lambda defstruct-description-size make-tree-for-defstruct nthcdr car nth defstruct-description-name quote error defstruct-error null cond if)
(:list*-defstruct-expand lambda defstruct-description-name quote error defstruct-error nthcdr car nth defstruct-description-include and)
(:list*-defstruct-ref lambda quote list lessp < cond if nthcdr car nth defstruct-description-size |1-| let)
(:list*-defstruct-cons lambda quote cons)
(:named-list-defstruct-ref lambda |1+| quote list)
(:named-list-defstruct-cons lambda nthcdr car nth defstruct-description-name list quote cons)
(:list-defstruct-ref lambda quote list)
(:list-defstruct-cons lambda quote cons)
(:named-vector-defstruct-ref lambda quote list)
(:named-vector-defstruct-cons lambda nthcdr car nth defstruct-description-name append list quote cons)
(:vector-defstruct-ref lambda quote list)
(:vector-defstruct-cons lambda append quote cons)
(:named-hunk-defstruct-ref lambda |1+| quote list cond)
(:named-hunk-defstruct-cons lambda nthcdr car nth defstruct-description-name list quote cons cond if)
(:hunk-defstruct-ref lambda quote list)
(:hunk-defstruct-cons lambda error defstruct-error quote cons cond if)
(maclisp-array-for-defstruct lambda cdr caar cdar equal nreverse append cons if null memq eq cond caseq gensym nthcdr car nth defstruct-description-size quote list do)
(:flonum-array-defstruct-ref lambda quote list)
(:flonum-array-defstruct-cons lambda quote maclisp-array-for-defstruct)
(:fixnum-array-defstruct-ref lambda quote list)
(:fixnum-array-defstruct-cons lambda quote maclisp-array-for-defstruct)
(:array-defstruct-ref lambda quote list)
(:array-defstruct-cons lambda quote maclisp-array-for-defstruct)
(defstruct-define-type macro cddddr cdddddr if cddddddr - cdddr nthcdr rplaca setf =& = concat append-symbols let length >& > eq caseq selectq cdr car setq atom cond and append cons quote error defstruct-error or null list make-defstruct-type-description do cddr cadr)
(defstruct-expand-alter-macro lambda push defstruct-code-from-dsc rplaca setf emptyp caar Internal-bcdcall getdisc bcdp setq cxr getd symbolp and cadr cond if cons list defstruct-description-displace funcall null gensym defstruct-description-but-first cdddr defstruct-description-slot-alist cddr defstruct-parse-setq-style-slots do error defstruct-error defstruct-type-description-ref-no-args eq =& = or defstruct-type-description-ref-expander cdr nthcdr nth defstruct-description-type quote car get get-defstruct-description let let*)
(defstruct-expand-cons-macro lambda Internal-bcdcall getdisc bcdp cxr getd symbolp defstruct-type-description-cons-expander defstruct-description-displace funcall defstruct-code-from-dsc |1-| =& = defstruct-description-size defstruct-type-description-cons-flavor caseq selectq rplacd memq rplaca list* assoc defstruct-slot-description-number emptyp defstruct-slot-description-ppss defstruct-slot-description-init-code cdar make-empty push cddr cadr cadar and setf prog1 pop defstruct-make-init-dsc atom go cons prog defstruct-parse-setq-style-slots setq if defstruct-description-name list error defstruct-error return caar eq cond null cdddddr defstruct-description-constructors do assq or cddddr defstruct-type-description-cons-keywords cdddr defstruct-description-slot-alist cdr nthcdr nth defstruct-description-type quote car get get-defstruct-description let let*)
(defstruct-code-from-dsc lambda caar cdar cdddr do - lsh quote list haulong |1-| logior |1+| fixnum-BitAndNot logand fixnum-BitOr boole numberp bigp not cdr null and zerop or setq eq emptyp cond if caddr cadr cddr car let)
(defstruct-make-init-dsc lambda cadr or cdddr cddr rplaca make-empty list* setq assoc defstruct-slot-description-ppss nthcdr nth defstruct-slot-description-number let* quote error defstruct-error cons rplacd setf push memq if cdr car return caar eq cond null do assq let)
(defstruct-parse-setq-style-slots lambda cddr cadr defstruct-make-init-dsc quote error defstruct-error car symbolp cdr and or null cons do)
(defstruct-expand-ref-macro lambda Internal-bcdcall getdisc bcdp cxr getd symbolp cddr defstruct-description-displace funcall defstruct-slot-description-ppss nreverse defstruct-slot-description-number lexpr-funcall return caar eq null cdddr defstruct-description-slot-alist do assq or error defstruct-error if cons setq |1+| list rplaca and equal = cond defstruct-description-but-first cddddddr defstruct-description-default-pointer length reverse defstruct-type-description-ref-no-args defstruct-type-description-ref-expander cdr nthcdr nth defstruct-description-type get-defstruct-description quote car get let let*)
(defstruct-expand-size-macro lambda Internal-bcdcall getdisc eq bcdp setq cxr getd symbolp and cond cddddddr + cddr defstruct-description-displace funcall cdr nthcdr nth defstruct-description-type quote car get get-defstruct-description let)
(defstruct-define-ref-macros lambda |1-| gensym defstruct-slot-description-ppss defstruct-slot-description-number lexpr-funcall reverse eq =& = and <& < cddddddr defstruct-description-default-pointer defstruct-description-but-first defstruct-type-description-ref-no-args defstruct-type-description-ref-expander defstruct-description-type get cdr caar defstruct-putprop quote list cons setf push defstruct-put-macro cdar cdddddr defstruct-slot-description-ref-macro-name setq null do defstruct-description-callable-accessors not cond if nthcdr car nth defstruct-description-name let)
(defstruct-parse-one-field lambda car quote make-empty null list make-defstruct-slot-description cons concat cond if let)
(defstruct-parse-items lambda |1+| cddar cadar cdar defstruct-parse-one-field cons push nconc nreverse cddr rplaca setf list error defstruct-error and return caar eq assq cadr make-empty atom cond do cdddr defstruct-description-slot-alist subst cdr + setq quote get null or defstruct-description-conc-name defstruct-description-include defstruct-description-initial-offset nthcdr car nth defstruct-description-name let)
(defstruct-parse-options lambda cddddr defstruct-description-type get-defstruct-description defstruct-type-description-named-type cdddddr get fixp not nth defstruct-description-property-alist cadr push cons and or cddr concat append-symbols cddddddr error defstruct-error emptyp eq caseq selectq prog1 setq null cdr do nthcdr rplaca setf list make-defstruct-description quote make-empty car atom cond if let)
(defstruct macro defstruct-define-ref-macros nconc defstruct-description-eval-when caar cdddddr defstruct-description-constructors do cddddddr + defstruct-put-macro defstruct-description-size-symbol defstruct-description-size-macro defstruct-description-alterant defstruct-putprop Internal-bcdcall getdisc eq bcdp cxr getd symbolp and cond funcall append defstruct-type-description-defstruct-expander null or list cons setq setf push defstruct-parse-items defstruct-description-name quote cdr nthcdr car nth defstruct-description-type get defstruct-parse-options let let* cddr cadr)
(make-defstruct-type-description macro defstruct-expand-cons-macro)
(defstruct-type-description-ref-expander macro defstruct-expand-ref-macro)
(defstruct-type-description-ref-no-args macro defstruct-expand-ref-macro)
(defstruct-type-description-cons-expander macro defstruct-expand-ref-macro)
(defstruct-type-description-cons-flavor macro defstruct-expand-ref-macro)
(defstruct-type-description-cons-keywords macro defstruct-expand-ref-macro)
(defstruct-type-description-named-type macro defstruct-expand-ref-macro)
(defstruct-type-description-overhead macro defstruct-expand-ref-macro)
(defstruct-type-description-defstruct-expander macro defstruct-expand-ref-macro)
(make-defstruct-slot-description macro defstruct-expand-cons-macro)
(defstruct-slot-description-number macro defstruct-expand-ref-macro)
(defstruct-slot-description-ppss macro defstruct-expand-ref-macro)
(defstruct-slot-description-init-code macro defstruct-expand-ref-macro)
(defstruct-slot-description-type macro defstruct-expand-ref-macro)
(defstruct-slot-description-property-alist macro defstruct-expand-ref-macro)
(defstruct-slot-description-ref-macro-name macro defstruct-expand-ref-macro)
(get-defstruct-description lambda nthcdr car nth defstruct-description-version eq not error defstruct-error null cond quote get let)
(make-defstruct-description macro defstruct-expand-cons-macro)
(defstruct-description-version macro defstruct-expand-ref-macro)
(defstruct-description-type macro defstruct-expand-ref-macro)
(defstruct-description-displace macro defstruct-expand-ref-macro)
(defstruct-description-slot-alist macro defstruct-expand-ref-macro)
(defstruct-description-named-p macro defstruct-expand-ref-macro)
(defstruct-description-constructors macro defstruct-expand-ref-macro)
(defstruct-description-default-pointer macro defstruct-expand-ref-macro)
(defstruct-description-but-first macro defstruct-expand-ref-macro)
(defstruct-description-size macro defstruct-expand-ref-macro)
(defstruct-description-property-alist macro defstruct-expand-ref-macro)
(defstruct-description-name macro defstruct-expand-ref-macro)
(defstruct-description-include macro defstruct-expand-ref-macro)
(defstruct-description-initial-offset macro defstruct-expand-ref-macro)
(defstruct-description-eval-when macro defstruct-expand-ref-macro)
(defstruct-description-alterant macro defstruct-expand-ref-macro)
(defstruct-description-conc-name macro defstruct-expand-ref-macro)
(defstruct-description-callable-accessors macro defstruct-expand-ref-macro)
(defstruct-description-size-macro macro defstruct-expand-ref-macro)
(defstruct-description-size-symbol macro defstruct-expand-ref-macro)
(defstruct-dont-displace lambda)
(displace lambda car list rplacd rplaca atom cond)
