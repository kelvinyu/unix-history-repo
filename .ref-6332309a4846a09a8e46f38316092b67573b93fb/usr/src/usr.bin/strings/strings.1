.\" Copyright (c) 1980 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.\"
.\"	@(#)strings.1	6.5 (Berkeley) %G%
.\"
.TH STRINGS 1 ""
.UC
.SH NAME
strings \- find the printable strings in a file
.SH SYNOPSIS
.B strings
[
.B \-ao
] [
\fB\-\fInumber\fR
] [ file ... ]
.SH DESCRIPTION
\fIStrings\fP looks for ascii strings in each of the specified files,
or from the standard input.  A string is any sequence of 4 or more printing
characters.  Unless the \fB-a\fP flag is given, \fIstrings\fP only looks
in the initialized data space of object files.  If the \fB-o\fP flag is
given, then each string is preceded by its decimal offset in the file.
If the \fB-\fInumber\fR flag is given, then \fInumber\fP is used as the
minimum string length rather than 4.
.PP
\fIStrings\fP is useful for identifying random object files and
many other things.
.SH "SEE ALSO"
od(1)
.SH BUGS
The algorithm for identifying strings is extremely primitive.
