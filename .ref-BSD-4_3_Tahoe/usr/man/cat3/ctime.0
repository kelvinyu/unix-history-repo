


CTIME(3)	    UNIX Programmer's Manual		 CTIME(3)



NNAAMMEE
     ctime, localtime, gmtime, asctime, timezone, tzset -  con-
     vert date and time to ASCII

SSYYNNOOPPSSIISS
     vvooiidd ttzzsseett(())

     cchhaarr **ccttiimmee((cclloocckk))
     ttiimmee__tt **cclloocckk;;

     ##iinncclluuddee <<ttiimmee..hh>>

     cchhaarr **aassccttiimmee((ttmm))
     ssttrruucctt ttmm **ttmm;;

     ssttrruucctt ttmm **llooccaallttiimmee((cclloocckk))
     ttiimmee__tt **cclloocckk;;

     ssttrruucctt ttmm **ggmmttiimmee((cclloocckk))
     ttiimmee__tt **cclloocckk;;

     cchhaarr **ttiimmeezzoonnee((zzoonnee,, ddsstt))

DDEESSCCRRIIPPTTIIOONN
     _T_z_s_e_t uses the value of the environment variable TTZZ to set
     up the time conversion information used by _l_o_c_a_l_t_i_m_e.

     If TTZZ does not appear in the environment, the TTZZDDEEFFAAUULLTT file
     (as defined in _t_z_f_i_l_e._h) is used by _l_o_c_a_l_t_i_m_e.  If this file
     fails for any reason, the GMT offset as provided by the ker-
     nel is used.  In this case, DST is ignored, resulting in the
     time being incorrect by some amount if DST is currently in
     effect.  If this fails for any reason, GMT is used.

     If TTZZ appears in the environment but its value is a null
     string, Greenwich Mean Time is used; if TTZZ appears and
     begins with a slash, it is used as the absolute pathname of
     the _t_z_f_i_l_e(5)-format file from which to read the time
     conversion information; if TTZZ appears and begins with a
     character other than a slash, it's used as a pathname rela-
     tive to the system time conversion information directory,
     defined as TTZZDDIIRR in the include file _t_z_f_i_l_e._h.  If this file
     fails for any reason, the GMT offset as provided by the ker-
     nel is used, as described above.  If this fails for any rea-
     son, GMT is used.

     Programs that always wish to use local wall clock time
     should explicitly remove the environmental variable TTZZ with
     _u_n_s_e_t_e_n_v(3).

     _C_t_i_m_e converts a long integer, pointed to by _c_l_o_c_k, such as
     returned by _t_i_m_e(3), into ASCII and returns a pointer to a



Printed 7/9/88	       September 30, 1987			1






CTIME(3)	    UNIX Programmer's Manual		 CTIME(3)



     26-character string in the following form.  All the fields
     have constant width.

	 Sun Sep 16 01:03:52 1973\n\0

     _L_o_c_a_l_t_i_m_e and _g_m_t_i_m_e return pointers to structures contain-
     ing the broken-down time.	_L_o_c_a_l_t_i_m_e corrects for the time
     zone and possible daylight savings time; _g_m_t_i_m_e converts
     directly to GMT, which is the time UNIX uses.  _A_s_c_t_i_m_e con-
     verts a broken-down time to ASCII and returns a pointer to a
     26-character string.

     The structure declaration from the include file is:

	  struct tm {
	       int tm_sec;    /* 0-59  seconds */
	       int tm_min;    /* 0-59  minutes */
	       int tm_hour;   /* 0-23  hour */
	       int tm_mday;   /* 1-31  day of month */
	       int tm_mon;    /* 0-11  month */
	       int tm_year;   /* 0-    year - 1900 */
	       int tm_wday;   /* 0-6   day of week (Sunday = 0) */
	       int tm_yday;   /* 0-365 day of year */
	       int tm_isdst;  /* flag: daylight savings time in effect */
	       char **tm_zone;	       /* abbreviation of timezone name */
	       long tm_gmtoff;	       /* offset from GMT in seconds */
	  };

     _T_m__i_s_d_s_t is non-zero if a time zone adjustment such as Day-
     light Savings time is in effect.

     _T_m__g_m_t_o_f_f is the offset (in seconds) of the time represented
     from GMT, with positive values indicating East of Greenwich.

     _T_i_m_e_z_o_n_e remains for compatibility reasons only; it's impos-
     sible to reliably map timezone's arguments (_z_o_n_e, a "minutes
     west of GMT" value and _d_s_t, a "daylight saving time in
     effect" flag) to a time zone abbreviation.

     If the environmental string _T_Z_N_A_M_E exists, _t_i_m_e_z_o_n_e returns
     its value, unless it consists of two comma separated
     strings, in which case the second string is returned if _d_s_t
     is non-zero, else the first string.  If _T_Z_N_A_M_E doesn't
     exist, _z_o_n_e is checked for equality with a built-in table of
     values, in which case _t_i_m_e_z_o_n_e returns the time zone or day-
     light time zone abbreviation associated with that value.  If
     the requested _z_o_n_e does not appear in the table, the differ-
     ence from GMT is returned; e.g. in Afghanistan, _t_i_m_e_z_o_n_e(-
     (_6_0*_4+_3_0), _0) is appropriate because it is 4:30 ahead of
     GMT, and the string GGMMTT++44::3300 is returned.	Programs that in
     the past used the _t_i_m_e_z_o_n_e function should return the zone
     name as set by _l_o_c_a_l_t_i_m_e to assure correctness.



Printed 7/9/88	       September 30, 1987			2






CTIME(3)	    UNIX Programmer's Manual		 CTIME(3)



FFIILLEESS
     /etc/zoneinfo	      time zone information directory
     /etc/zoneinfo/localtime  local time zone file

SSEEEE AALLSSOO
     gettimeofday(2), getenv(3), time(3), tzfile(5), environ(7)

NNOOTTEE
     The return values point to static data whose content is
     overwritten by each call.	The ttmm__zzoonnee field of a returned
     ssttrruucctt ttmm points to a static array of characters, which will
     also be overwritten at the next call (and by calls to
     _t_z_s_e_t).










































Printed 7/9/88	       September 30, 1987			3



