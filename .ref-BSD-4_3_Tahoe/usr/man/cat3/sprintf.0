


PRINTF(3S)	    UNIX Programmer's Manual	       PRINTF(3S)



NNAAMMEE
     printf, fprintf, sprintf - formatted output conversion

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssttddiioo..hh>>

     pprriinnttff((ffoorrmmaatt [,, arg ] ...  ))
     cchhaarr **ffoorrmmaatt;;

     ffpprriinnttff((ssttrreeaamm,, ffoorrmmaatt [,, arg ] ...  ))
     FFIILLEE **ssttrreeaamm;;
     cchhaarr **ffoorrmmaatt;;

     sspprriinnttff((ss,, ffoorrmmaatt [,, arg ] ...  ))
     cchhaarr **ss,, **ffoorrmmaatt;;

     ##iinncclluuddee <<vvaarraarrggss..hh>>
     vvpprriinnttff((ffoorrmmaatt,, aarrggss))
     cchhaarr **ffoorrmmaatt;;
     vvaa__lliisstt aarrggss;;

     vvffpprriinnttff((ssttrreeaamm,, ffoorrmmaatt,, aarrggss))
     FFIILLEE **ssttrreeaamm;;
     cchhaarr **ffoorrmmaatt;;
     vvaa__lliisstt aarrggss;;

     vvsspprriinnttff((ss,, ffoorrmmaatt,, aarrggss))
     cchhaarr **ss,, **ffoorrmmaatt;;
     vvaa__lliisstt aarrggss;;

DDEESSCCRRIIPPTTIIOONN
     _P_r_i_n_t_f places output on the standard output stream ssttddoouutt.
     _F_p_r_i_n_t_f places output on the named output _s_t_r_e_a_m.	_S_p_r_i_n_t_f
     places `output' in the string _s, followed by the character
     `\0'.  Alternate forms, in which the arguments have already
     been captured using the variable-length argument facilities
     of _v_a_r_a_r_g_s(3), are available under the names _v_p_r_i_n_t_f,
     _v_f_p_r_i_n_t_f, and _v_s_p_r_i_n_t_f.

     Each of these functions converts, formats, and prints its
     arguments after the first under control of the first argu-
     ment.  The first argument is a character string which con-
     tains two types of objects: plain characters, which are sim-
     ply copied to the output stream, and conversion specifica-
     tions, each of which causes conversion and printing of the
     next successive _a_r_g _p_r_i_n_t_f.

     Each conversion specification is introduced by the character
     %%.  The remainder of the conversion specification includes
     in the following order

     oo++	  Zero or more of the following flags:



Printed 7/9/88		October 22, 1987			1






PRINTF(3S)	    UNIX Programmer's Manual	       PRINTF(3S)



	  oo++    a `#' character specifying that the value should
	       be converted to an ``alternate form''.  For cc, dd,
	       ss, and uu, conversions, this option has no effect.
	       For oo conversions, the precision of the number is
	       increased to force the first character of the out-
	       put string to a zero.  For xx(XX) conversion, a
	       non-zero result has the string 00xx(00XX) prepended to
	       it.  For ee, EE, ff, gg, and GG, conversions, the
	       result will always contain a decimal point, even
	       if no digits follow the point (normally, a decimal
	       point only appears in the results of those conver-
	       sions if a digit follows the decimal point).  For
	       gg and GG conversions, trailing zeros are not
	       removed from the result as they would otherwise
	       be;

	  oo++    a minus sign `-' which specifies _l_e_f_t _a_d_j_u_s_t_m_e_n_t
	       of the converted value in the indicated field;

	  oo++    a `+' character specifying that there should
	       always be a sign placed before the number when
	       using signed conversions;

	  oo++    a space specifying that a blank should be left
	       before a positive number during a signed conver-
	       sion.  A `+' overrides a space if both are used;

	  oo++    a zero `0' character indicating that zero-padding
	       should be used rather than blank-padding.  A `-'
	       overrides a `0' if both are used;

     oo++	  an optional digit string specifying a _f_i_e_l_d _w_i_d_t_h; if
	  the converted value has fewer characters than the field
	  width it will be blank-padded on the left (or right, if
	  the left-adjustment indicator has been given) to make
	  up the field width (note that a leading zero is a flag,
	  but an embedded zero is part of a field width);

     oo++	  an optional period, followed by an optional digit
	  string giving a _p_r_e_c_i_s_i_o_n which specifies the number of
	  digits to appear after the decimal point, for e- and
	  f-conversion, or the maximum number of characters to be
	  printed from a string; if the digit string is missing,
	  the precision is treated as zero;

     oo++	  the character ll specifying that a following dd, ii, oo, xx,
	  or uu corresponds to a long integer _a_r_g, or that a fol-
	  lowing nn corresponds to a pointer to a long integer
	  _a_r_g;

     oo++	  the character hh specifying that a following dd, ii, oo, xx,
	  or uu corresponds to a short integer _a_r_g, or that a



Printed 7/9/88		October 22, 1987			2






PRINTF(3S)	    UNIX Programmer's Manual	       PRINTF(3S)



	  following nn corresponds to a pointer to a short integer
	  _a_r_g;

     oo++	  a character which indicates the type of conversion to
	  be applied.

     A field width or precision may be `*' instead of a digit
     string.  In this case an integer _a_r_g supplies the field
     width or precision.

     The conversion characters and their meanings are

     ddooxx  The integer _a_r_g is converted to signed decimal,
	  unsigned octal, or unsigned hexadecimal notation
	  respectively.

     ii	  An alias for `d'.

     ff	  The float or double _a_r_g is converted to decimal nota-
	  tion in the style `[--]ddd.ddd' where the number of d's
	  after the decimal point is equal to the precision
	  specification for the argument.  If the precision is
	  missing, 6 digits are given; if the precision is expli-
	  citly 0, no digits and no decimal point are printed.

     eeEE   The float or double _a_r_g is converted in the style
	  `[--]d..dddee+_dd' where there is one digit before the
	  decimal point and the number after is equal to the pre-
	  cision specification for the argument; when the preci-
	  sion is missing, 6 digits are produced.  An uppercase E
	  is used for `E' conversion.

     ggGG   The float or double _a_r_g is printed in style ff or in
	  style ee (EE) whichever gives full precision in minimum
	  space.

     cc	  The character _a_r_g is printed.

     ss	  _A_r_g is taken to be a string (character pointer) and
	  characters from the string are printed until a null
	  character or until the number of characters indicated
	  by the precision specification is reached; however if
	  the precision is 0 or missing all characters up to a
	  null are printed.

     uu	  The unsigned integer _a_r_g is converted to decimal and
	  printed (the result will be in the range 0 through MAX-
	  UINT, where MAXUINT equals 4294967295 on a VAX-11 and
	  65535 on a PDP-11).

     nn	  _A_r_g is taken to be a pointer to an integer (possibly
	  sshhoorrtt or lloonngg) through which is stored the number of



Printed 7/9/88		October 22, 1987			3






PRINTF(3S)	    UNIX Programmer's Manual	       PRINTF(3S)



	  characters written to the output stream (or string) so
	  far by this call to pprriinnttff (or ffpprriinnttff, etc.).

     pp	  _A_r_g is taken to be a pointer to vvooiidd; it is printed in
	  style xx.

     %%	  Print a `%'; no argument is converted.

     In no case does a non-existent or small field width cause
     truncation of a field; padding takes place only if the
     specified field width exceeds the actual width.  Characters
     generated by _p_r_i_n_t_f are printed as by _p_u_t_c(3S).

RREETTUURRNN VVAALLUUEE
     The functions all return the number of characters printed,
     or -1 if an error occurred.

EEXXAAMMPPLLEESS
     To print a date and time in the form `Sunday, July 3,
     10:02', where _w_e_e_k_d_a_y and _m_o_n_t_h are pointers to null-
     terminated strings:

	  printf("%s, %s %d, %02d:%02d", weekday, month, day,
	       hour, min);

     To print pi to 5 decimals:

	  printf("pi = %.5f", 4*atan(1.0));

SSEEEE AALLSSOO
     putc(3S), scanf(3S)

BBUUGGSS
     The functions still supports %_D, %_O, and %_U.  Do not use
     these formats, as they will be disappearing soon.




















Printed 7/9/88		October 22, 1987			4



