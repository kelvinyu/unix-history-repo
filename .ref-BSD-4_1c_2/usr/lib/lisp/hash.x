(File hash.l)
(maphash-equal lambda |1+| Internal-bcdcall getdisc quote eq bcdp getd symbolp funcall car cdr progn null not cond vref setq go greaterp and prog getlength |1-| loop cxr real-hash-table let)
(equal-hash-table-rehash lambda hash-value car hash-key puthash equal - rplacx eq =& = |1+| setq vset setf null cond vref lessp < not >= do new-vector hash-table-size times hash-table-good-size cdr + rehash-after-n-misses cxr real-hash-table let let*)
(remhash-equal lambda |1-| |1+| return vset setf vref car hash-key equal cond bigp not cdr null and zerop real-hash-table rehash-after-n-misses cxr hash-table-size sxhash remainder do)
(puthash-equal-internal (lambda . local) |1-| cons make-hash-element vset hash-value if prog1 return hash-table-fullness |1+| rplacx setf vref car hash-key equal or puthash-equal Internal-bcdcall getdisc quote eq bcdp setq getd symbolp cond hash-table-rehash-size hash-table-rehash-function funcall bigp not cdr null and zerop real-hash-table rehash-after-n-misses cxr hash-table-size sxhash remainder do)
(swaphash-equal lambda puthash-equal-internal)
(puthash-equal lambda puthash-equal-internal)
(g00357::gethash-equal lambda caddr cadr quote list)
(gethash-equal lambda |1-| |1+| hash-value return vref setq car hash-key equal cond bigp not cdr null and zerop real-hash-table rehash-after-n-misses cxr hash-table-size sxhash remainder do)
(make-equal-hash-table lambda + new-vector hunk make-equal-hash-table-internal * hash-table-good-size cddr ferror eq cond caseq selectq car go null and prog loop quote setq)
(alter-equal-hash-table macro defstruct-expand-alter-macro)
(make-equal-hash-table-internal macro defstruct-expand-cons-macro)
(real-hash-table macro defstruct-expand-ref-macro)
(hash-table-fullness macro defstruct-expand-ref-macro)
(rehash-after-n-misses macro defstruct-expand-ref-macro)
(hash-table-size macro defstruct-expand-ref-macro)
(hash-table-rehash-size macro defstruct-expand-ref-macro)
(hash-table-rehash-function macro defstruct-expand-ref-macro)
(sxhash-string lambda |1+| getcharn cdr rot setq fixnum-BitXor boole logxor minusp cond if greaterp > flatc do)
(sxhash lambda fix floatp bignum-to-list bigp + <& < >= setf car prog1 pop - sxhash rot cdr setq null not atom do dtpr fixnum-BitXor boole logxor minusp if typep eq stringp get_pname sxhash-string symbolp cond)
(maphash lambda |1+| Internal-bcdcall getdisc quote eq bcdp getd symbolp funcall car cdr progn null not cond vref setq go greaterp and prog getlength |1-| loop cxr real-hash-table let)
(si:lookhash lambda return |1+| rplacd cdr cond vref list setq go greaterp and prog getlength |1-| loop cxr real-hash-table let)
(hash-table-rehash lambda hash-value car hash-key puthash equal - rplacx eq =& = |1+| setq vset setf null cond vref lessp < not >= do new-vector hash-table-size times hash-table-good-size cdr + rehash-after-n-misses cxr real-hash-table let let*)
(remhash lambda |1-| |1+| return vset setf vref car hash-key eq cond bigp not cdr null and zerop real-hash-table rehash-after-n-misses cxr hash-table-size maknum |\\| si:hash-code do)
(puthash-internal (lambda . local) |1-| cons make-hash-element vset hash-value if prog1 return hash-table-fullness |1+| rplacx setf vref car hash-key or puthash Internal-bcdcall getdisc quote eq bcdp setq getd symbolp cond hash-table-rehash-size hash-table-rehash-function funcall bigp not cdr null and zerop real-hash-table rehash-after-n-misses cxr hash-table-size maknum |\\| si:hash-code do)
(swaphash lambda puthash-internal)
(puthash lambda puthash-internal)
(g00118::gethash lambda caddr cadr quote list)
(gethash lambda |1-| |1+| hash-value return vref setq car hash-key eq cond bigp not cdr null and zerop real-hash-table rehash-after-n-misses cxr hash-table-size maknum |\\| si:hash-code do)
(hash-table-good-size lambda + bigp cdr null |\\| zerop not and do |1+| oddp or fix max setq)
(make-hash-table lambda + new-vector hunk make-hash-table-internal * hash-table-good-size cddr ferror eq cond caseq selectq car go null and prog loop quote setq)
(alter-hash-table macro defstruct-expand-alter-macro)
(make-hash-table-internal macro defstruct-expand-cons-macro)
(real-hash-table macro defstruct-expand-ref-macro)
(hash-table-fullness macro defstruct-expand-ref-macro)
(rehash-after-n-misses macro defstruct-expand-ref-macro)
(hash-table-size macro defstruct-expand-ref-macro)
(hash-table-rehash-size macro defstruct-expand-ref-macro)
(hash-table-rehash-function macro defstruct-expand-ref-macro)
