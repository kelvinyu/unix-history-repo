(File cmumacs.l)
(while macro expand-do)
(until macro expand-do)
(ty macro cdr quote append)
(set-of macro expand-set-of)
(forall macro quote expand-ex)
(for-each macro expand-fe)
(for macro expand-do)
(expand-set-of lambda ldiff length cdr Cnth car quote cons quote! return cddr list atom cond cadr setq prog)
(expand-fe lambda cddr ldiff length cdddr Cnth ncons list atom progn quote car cdr setq cadr memq cond cons return prog)
(in-line-lambda:415678421 lambda memq)
(in-line-lambda:415678422 lambda memq)
(expand-do lambda and rplacd cdr eq car null liszt-internal-do mapcan gensym list ncons cons quote! return quote function some exists cddr ldiff append cadr memq setq cond prog)
(expand-ex lambda list cdr cdddr setq car ncons cadr atom cond quote caddr cons quote!)
(exists macro quote expand-ex)
(Cdo macro expand-do)
(def macro cadr car list append cons quote status cond cdr)
(dm macro append cons list quote status cond cddr cadr)
(dn macro append cons list quote status cond cddr cadr)
(de macro append cons list quote status cond cddr cadr)
(lineread macro quote list car cdr setq cond cadr)
(selectq macro cadr reverse cdar caar atom car cdr cond setq null cddr liszt-internal-do maplist append cons list quote gensym)
(push macro quote list caddr cadr)
(neq macro quote list caddr cadr)
(construct-list* lambda cdr null car cadr quote list cddr do reverse setq)
(list* macro construct-list* car null cond cdr)
(quote!-expr-mac lambda cdr cddr quote!-expr-mac cadr car eq quote list atom null cond)
(quote! macro quote!-expr-mac cdr)
(quote!-expr lambda return and cdr setq prog append cddr quote!-expr cadr eval cons car eq atom cond)
(*** macro cdr)
(mark!changed macro list quote cons cadr)
(dv macro quote list caddr cadr)
