.TH MOUNT 2 2/13/83
.SH NAME
mount, unmount \- mount or remove file system
.SH SYNOPSIS
.nf
.ft B
mount(special, name, rwflag)
char *special, *name;
.PP
.ft B
unmount(special, forcibly)
char *special;
int forcibly;
.fi
.SH DESCRIPTION
.I Mount
announces to the system that a removable file system has
been mounted on
the block-structured special file
.I special;
from now on, references to file
.I name
will refer to
the root file on the newly mounted file system.
.I Special
and
.I name
are pointers to null-terminated strings
containing the appropriate path names.
.PP
.I Name
must exist already. 
.I Name
must be a directory (unless the root of the mounted file system
is not a directory).
Its old contents
are inaccessible while the file system
is mounted.
.PP
The
.I rwflag
argument determines whether
the file system can be written on; if it is 0 writing
is allowed, if non-zero no writing is done.
Physically write-protected and magnetic
tape file systems must be mounted read-only or
errors will occur when access times are updated,
whether or not any
explicit write is attempted.
.PP
.I Unmount
announces to the system that the
.I special
file is no longer to contain a removable file system.
The associated file reverts to its ordinary interpretation.
The
.I forcibly
parameter, if non-zero, indicates that any processes
accessing files on the
file system being unmounted should have their descriptors 
invalidated (possibly with drastic effect).
.SH "RETURN VALUE
.I Mount
returns 0 if the action occurred; \-1 if
.I special
is inaccessible or not an appropriate file; if
.I name
does not exist; if
.I special
is already mounted; if
.I name
is in use; or if
there are already too many
file systems mounted.
.PP
.I Unmount
returns 0 if the action occurred; \-1 if
if the special file is inaccessible or
does not have a mounted file system,
or if there are active files in the mounted 
file system and 
.I forcibly
did not indicate a forced demounting.
.SH ERRORS
To be described.
.SH "SEE ALSO"
mount(8), umount(8)
.SH BUGS
If a file containing holes
(unallocated blocks)
is read, even on a file system mounted read-only,
the system will attempt to fill in the holes
by writing on the device.
