.TH CHOWN 2 2/13/83
.SH NAME
chown \- change owner and group of a file
.SH SYNOPSIS
.nf
.ft B
chown(path, owner, group)
char *path;
int owner, group;
.PP
.ft B
fchown(fd, owner, group)
int fd, owner, group;
.fi
.SH DESCRIPTION
The file
which is named by \fIpath\fP or referenced by \fIfd\fP
has its
.I owner
and 
.I group
changed as specified.
Only the super-user may
execute this call,
because if users were able to give files away,
they could defeat the (nonexistent)
file-space accounting procedures.
.PP
On some systems,
.I chown
clears the set-user-id bit
on the file
to prevent accidental creation of
set-user-id programs owned by the super-user.
.PP
.I Fchown
is particularly useful when used in conjunction
with the file locking primitives (see
.IR flock (2)).
.PP
Only one of the owner and group id's
may be set by specifying the other as \-1.
.SH "RETURN VALUE
Zero is returned if the operation was successful;
\-1 is returned if an error occurs, with a more specific
error code being placed in the global \fIerrno\fP variable.
.SH "ERRORS
.I Chown
will fail and the file will be unchanged if:
.TP 15
[EINVAL]
The argument path does not refer to a file.
.TP 15
[ENOTDIR]
A component of the path prefix is not a directory.
.TP 15
[ENOENT]
The argument pathname is too long.
.TP 15
[EPERM]
The pathname contains a non-ASCII byte.
.TP 15
[ENOENT]
The named file does not exist.
.TP 15
[EACCES]
Search permission is denied on a component of the path prefix.
.TP 15
[EPERM]
The effective user ID does not match the owner of the file and
the effective user ID is not the super-user.
.TP 15
[EROFS]
The named file resides on a read-only file system.
.TP 15
[EFAULT]
.I Path
points outside the process's allocated address space.
.TP 15
[ELOOP]
Too many symbolic links were encountered in translating the pathname.
.PP
.I Fchown
will fail if:
.TP 15
[EBADF]
.I Fd
does not refer to a valid descriptor.
.TP 15
[EINVAL]
.I Fd
refers to a socket, not a file.
.SH "SEE ALSO"
chmod(2), flock(2)
