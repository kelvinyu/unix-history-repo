


ROUTE(4)		      1990			 ROUTE(4)



NNAAMMEE
NNAAMMEE
     ROUTE - Kernel Packet Forwarding Database

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ssoocckkeett..hh>>
     ##iinncclluuddee <<nneett//iiff..hh>>
     ##iinncclluuddee <<nneett//rroouuttee..hh>>
     iinntt ffaammiillyy
     ss == ssoocckkeett((PPFF__RROOUUTTEE,, SSOOCCKK__RRAAWW,, ffaammiillyy));;

DDEESSCCRRIIPPTTIIOONN
     provides some packet routing facilities.  The kernel main-
     tains a routing information database, which is used in
     selecting the appropriate network interface when transmit-
     ting packets.

     A user process (or possibly multiple co-operating processes)
     maintains this database by sending messages over a special
     kind of socket.  This supplants fixed size _i_o_c_t_l's used in
     earlier releases.	Routing table changes may only be carried
     out by the super user.

     The operating system may spontaneously emit routing messages
     in response to external events, such as recipt of a re-
     direct, or failure to locate a suitable route for a request.
     The message types are described in greater detail below.

     Routing database entries come in two flavors: for a specific
     host, or for all hosts on a generic subnetwork (as specified
     by a bit mask and value under the mask.  The effect of wild-
     card or default route may be achieved by using a mask of all
     zeros, and there may be hierarchical routes.

     When the system is booted and addresses are assigned to the
     network interfaces, each protocol family installs a routing
     table entry for each interface when it is ready for traffic.
     Normally the protocol specifies the route through each
     interface as a ``direct'' connection to the destination host
     or network.  If the route is direct, the transport layer of
     a protocol family usually requests the packet be sent to the
     same host specified in the packet.  Otherwise, the interface
     is requested to address the packet to the gateway listed in
     the routing entry (i.e. the packet is forwarded).

     When routing a packet, the kernel will first attempt to find
     a route to the destination host.  Failing that, a search is
     made for a route to the network of the destination.
     Finally, any route to a default (``wildcard'') gateway is
     chosen.  If no entry is found, the destination is declared
     to be unreachable, and a routing-miss message is generated
     if there are any listers on the routing control socket



Printed 7/27/90                May				1






ROUTE(4)		      1990			 ROUTE(4)



     described below.

     A wildcard routing entry is specified with a zero destina-
     tion address value.  Wildcard routes are used only when the
     system fails to find a route to the destination host and
     network.  The combination of wildcard routes and routing
     redirects can provide an economical mechanism for routing
     traffic.

     One opens the channel for passing routing control messasges
     by using the socket call shown in the synopsis above:

     The _f_a_m_i_l_y paramter may be AF_UNSPEC which will provide
     routing information for all address families, or can be res-
     tricted to a specific address family by specifying which one
     is desired.  There can be more than one routing socket open
     per system.

     Messages are formed by a header followed by a small number
     of sockadders (now variable length particularly in the ISO
     case), interpreted by position, and delimited by the new
     length entry in the sockaddr.  An example of a message with
     four addresses might be an ISO redirect: Destination, Net-
     mask, Gateway, and Author of the redirect.  The interpreta-
     tion of which address are present is given by a bit mask
     within the header, and the sequence is least significant to
     most significant bit within the vector.

     Any messages sent to the kernel are returned, and copies are
     sent to all interested listeners.	The kernel will provide
     the process id. for the sender, and the sender may use an
     additional sequence field to distinguish between outstanding
     messages.	However, message replies may be lost when kernel
     buffers are exhausted.

     The kernel may reject certain messages, and will indicate
     this by filling in the rtm_errno field.  The routing code
     returns EEXIST if requested to duplicate an existing entry,
     ESRCH if requested to delete a non-existent entry, or
     ENOBUFS if insufficient resources were available to install
     a new route.  In the current implementation, all routing
     process run locally, and the values for rtm_errno are avail-
     able through the normal errno mechanism, even if the routing
     reply message is lost.

     A process may avoid the expense of reading replies to its
     own messages by issuing a _s_e_t_s_o_c_k_o_p_t() call indicating that
     the SO_USELOOPBACK option at the SOL_SOCKET level is to be
     turned off.  A process may ignore all messages from the
     routing socket by doing a _s_h_u_t_d_o_w_n(2) system call for
     further input.




Printed 7/27/90                May				2






ROUTE(4)		      1990			 ROUTE(4)



     If a route is in use when it is deleted, the routing entry
     will be marked down and removed from the routing table, but
     the resources associated with it will not be reclaimed until
     all references to it are released. User processes can obtain
     information about the routing entry to a specific destina-
     tion by using a RTM_GET message, or by reading the /_d_e_v/_k_m_e_m
     device, or by issuing a _g_e_t_k_e_r_n_i_n_f_o () system call.

     Messages include:

     #define  RTM_ADD	    0x1  /* _A_d_d _R_o_u_t_e */
     #define  RTM_DELETE    0x2  /* _D_e_l_e_t_e _R_o_u_t_e */
     #define  RTM_CHANGE    0x3  /* _C_h_a_n_g_e _M_e_t_r_i_c_s, _F_l_a_g_s, _o_r _G_a_t_e_w_a_y */
     #define  RTM_GET	    0x4  /* _R_e_p_o_r_t _I_n_f_o_r_m_a_t_i_o_n */
     #define  RTM_LOOSING   0x5  /* _K_e_r_n_e_l _S_u_s_p_e_c_t_s _P_a_r_t_i_t_i_o_n_i_n_g */
     #define  RTM_REDIRECT  0x6  /* _T_o_l_d _t_o _u_s_e _d_i_f_f_e_r_e_n_t _r_o_u_t_e */
     #define  RTM_MISS	    0x7  /* _L_o_o_k_u_p _f_a_i_l_e_d _o_n _t_h_i_s _a_d_d_r_e_s_s */
     #define  RTM_RESOLVE   0xb  /* _r_e_q_u_e_s_t _t_o _r_e_s_o_l_v_e _d_s_t _t_o _L_L _a_d_d_r */

     A message header consists of:
     struct rt_msghdr {
	     u_short   rmt_msglen;	     /* _t_o _s_k_i_p _o_v_e_r _n_o_n-_u_n_d_e_r_s_t_o_o_d _m_e_s_s_a_g_e_s */
	     u_char    rtm_version;	     /* _f_u_t_u_r_e _b_i_n_a_r_y _c_o_m_p_a_t_a_b_i_l_i_t_y */
	     u_char    rtm_type;	     /* _m_e_s_s_a_g_e _t_y_p_e */
	     u_short   rmt_index;	     /* _i_n_d_e_x _f_o_r _a_s_s_o_c_i_a_t_e_d _i_f_p  */
	     pid_t     rmt_pid;              /* _i_d_e_n_t_i_f_y _s_e_n_d_e_r */
	     int       rtm_addrs;	     /* _b_i_t_m_a_s_k _i_d_e_n_t_i_f_y_i_n_g _s_o_c_k_a_d_d_r_s _i_n _m_s_g */
	     int       rtm_seq;              /* _f_o_r _s_e_n_d_e_r _t_o _i_d_e_n_t_i_f_y _a_c_t_i_o_n */
	     int       rtm_errno;	     /* _w_h_y _f_a_i_l_e_d */
	     int       rtm_flags;	     /* _f_l_a_g_s, _i_n_c_l. _k_e_r_n & _m_e_s_s_a_g_e, _e._g. _D_O_N_E */
	     int       rtm_use;              /* _f_r_o_m _r_t_e_n_t_r_y */
	     u_long    rtm_inits;	     /* _w_h_i_c_h _v_a_l_u_e_s _w_e _a_r_e _i_n_i_t_i_a_l_i_z_i_n_g */
	     struct    rt_metrics rtm_rmx;   /* _m_e_t_r_i_c_s _t_h_e_m_s_e_l_v_e_s */
     };

     where

     struct rt_metrics {
	     u_long  rmx_locks;      /* _K_e_r_n_e_l _m_u_s_t _l_e_a_v_e _t_h_e_s_e _v_a_l_u_e_s _a_l_o_n_e */
	     u_long  rmx_mtu;	     /* _M_T_U _f_o_r _t_h_i_s _p_a_t_h */
	     u_long  rmx_hopcount;   /* _m_a_x _h_o_p_s _e_x_p_e_c_t_e_d */
	     u_long  rmx_expire;     /* _l_i_f_e_t_i_m_e _f_o_r _r_o_u_t_e, _e._g. _r_e_d_i_r_e_c_t */
	     u_long  rmx_recvpipe;   /* _i_n_b_o_u_n_d _d_e_l_a_y-_b_a_n_d_w_i_t_h _p_r_o_d_u_c_t */
	     u_long  rmx_sendpipe;   /* _o_u_t_b_o_u_n_d _d_e_l_a_y-_b_a_n_d_w_i_t_h _p_r_o_d_u_c_t */
	     u_long  rmx_ssthresh;   /* _o_u_t_b_o_u_n_d _g_a_t_e_w_a_y _b_u_f_f_e_r _l_i_m_i_t */
	     u_long  rmx_rtt;	     /* _e_s_t_i_m_a_t_e_d _r_o_u_n_d _t_r_i_p _t_i_m_e */
	     u_long  rmx_rttvar;     /* _e_s_t_i_m_a_t_e_d _r_t_t _v_a_r_i_a_n_c_e */
     };


     Flags include the values:




Printed 7/27/90                May				3






ROUTE(4)		      1990			 ROUTE(4)



     #define  RTF_UP	    0x1      /* _r_o_u_t_e _u_s_e_a_b_l_e */
     #define  RTF_GATEWAY   0x2      /* _d_e_s_t_i_n_a_t_i_o_n _i_s _a _g_a_t_e_w_a_y */
     #define  RTF_HOST	    0x4      /* _h_o_s_t _e_n_t_r_y (_n_e_t _o_t_h_e_r_w_i_s_e) */
     #define  RTF_NORMAL    0x8      /* _s_u_b_n_e_t _m_a_s_k _i_s _c_a_n_n_o_n_i_c_a_l */
     #define  RTF_DYNAMIC   0x10     /* _c_r_e_a_t_e_d _d_y_n_a_m_i_c_a_l_l_y (_b_y _r_e_d_i_r_e_c_t) */
     #define  RTF_MODIFIED  0x20     /* _m_o_d_i_f_i_e_d _d_y_n_a_m_i_c_a_l_l_y (_b_y _r_e_d_i_r_e_c_t) */
     #define  RTF_DONE	    0x40     /* _m_e_s_s_a_g_e _c_o_n_f_i_r_m_e_d */
     #define  RTF_MASK	    0x80     /* _s_u_b_n_e_t _m_a_s_k _p_r_e_s_e_n_t */

     Specfiers for metric values in rmx_locks and rtm_inits are:

     #define  RTV_SSTHRESH  0x1      /* _i_n_i_t _o_r _l_o_c_k __s_s_t_h_r_e_s_h */
     #define  RTV_RPIPE     0x2      /* _i_n_i_t _o_r _l_o_c_k __r_e_c_v_p_i_p_e */
     #define  RTV_SPIPE     0x4      /* _i_n_i_t _o_r _l_o_c_k __s_e_n_d_p_i_p_e */
     #define  RTV_HOPCOUNT  0x8      /* _i_n_i_t _o_r _l_o_c_k __h_o_p_c_o_u_n_t */
     #define  RTV_RTT	    0x10     /* _i_n_i_t _o_r _l_o_c_k __r_t_t */
     #define  RTV_RTTVAR    0x20     /* _i_n_i_t _o_r _l_o_c_k __r_t_t_v_a_r */
     #define  RTV_MTU	    0x40     /* _i_n_i_t _o_r _l_o_c_k __m_t_u */

     Specifiers for which addresses are present in the messages are:

     #define RTA_DST	   0x1	    /* _d_e_s_t_i_n_a_t_i_o_n _s_o_c_k_a_d_d_r _p_r_e_s_e_n_t */
     #define RTA_GATEWAY   0x2	    /* _g_a_t_e_w_a_y _s_o_c_k_a_d_d_r _p_r_e_s_e_n_t */
     #define RTA_NETMASK   0x4	    /* _n_e_t_m_a_s_k _s_o_c_k_a_d_d_r _p_r_e_s_e_n_t */
     #define RTA_GENMASK   0x8	    /* _c_l_o_n_i_n_g _m_a_s_k _s_o_c_k_a_d_d_r _p_r_e_s_e_n_t */
     #define RTA_IFP	   0x10     /* _i_n_t_e_r_f_a_c_e _n_a_m_e _s_o_c_k_a_d_d_r _p_r_e_s_e_n_t */
     #define RTA_IFA	   0x20     /* _i_n_t_e_r_f_a_c_e _a_d_d_r _s_o_c_k_a_d_d_r _p_r_e_s_e_n_t */
     #define RTA_AUTHOR    0x40     /* _s_o_c_k_a_d_d_r _f_o_r _a_u_t_h_o_r _o_f _r_e_d_i_r_e_c_t */



























Printed 7/27/90                May				4



