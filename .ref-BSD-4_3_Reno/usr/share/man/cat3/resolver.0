


RESOLVER(3)		      1990		      RESOLVER(3)



NNAAMMEE
     res_query, res_search, res_mkquery, res_send, res_init,
     dn_comp, dn_expand - resolver routines

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
     ##iinncclluuddee <<nneettiinneett//iinn..hh>>
     ##iinncclluuddee <<aarrppaa//nnaammeesseerr..hh>>
     ##iinncclluuddee <<rreessoollvv..hh>>

     rreess__qquueerryy((ddnnaammee,, ccllaassss,, ttyyppee,, aannsswweerr,, aannsslleenn))
     cchhaarr **ddnnaammee;;
     iinntt ccllaassss,, ttyyppee;;
     uu__cchhaarr **aannsswweerr;;
     iinntt aannsslleenn;;

     rreess__sseeaarrcchh((ddnnaammee,, ccllaassss,, ttyyppee,, aannsswweerr,, aannsslleenn))
     cchhaarr **ddnnaammee;;
     iinntt ccllaassss,, ttyyppee;;
     uu__cchhaarr **aannsswweerr;;
     iinntt aannsslleenn;;

     rreess__mmkkqquueerryy((oopp,, ddnnaammee,, ccllaassss,, ttyyppee,, ddaattaa,, ddaattaalleenn,, nneewwrrrr,,
     bbuuff,, bbuufflleenn))
     iinntt oopp;;
     cchhaarr **ddnnaammee;;
     iinntt ccllaassss,, ttyyppee;;
     cchhaarr **ddaattaa;;
     iinntt ddaattaalleenn;;
     ssttrruucctt rrrreecc **nneewwrrrr;;
     cchhaarr **bbuuff;;
     iinntt bbuufflleenn;;

     rreess__sseenndd((mmssgg,, mmssgglleenn,, aannsswweerr,, aannsslleenn))
     cchhaarr **mmssgg;;
     iinntt mmssgglleenn;;
     cchhaarr **aannsswweerr;;
     iinntt aannsslleenn;;

     rreess__iinniitt(())

     ddnn__ccoommpp((eexxpp__ddnn,, ccoommpp__ddnn,, lleennggtthh,, ddnnppttrrss,, llaassttddnnppttrr))
     cchhaarr **eexxpp__ddnn,, **ccoommpp__ddnn;;
     iinntt lleennggtthh;;
     cchhaarr ****ddnnppttrrss,, ****llaassttddnnppttrr;;

     ddnn__eexxppaanndd((mmssgg,, eeoommoorriigg,, ccoommpp__ddnn,, eexxpp__ddnn,, lleennggtthh))
     cchhaarr **mmssgg,, **eeoommoorriigg,, **ccoommpp__ddnn,, eexxpp__ddnn;;
     iinntt lleennggtthh;;

DDEESSCCRRIIPPTTIIOONN
     These routines are used for making, sending and interpreting



Printed 7/27/90               June				1






RESOLVER(3)		      1990		      RESOLVER(3)



     query and reply messages with Internet domain name servers.

     Global configuration and state information that is used by
     the resolver routines is kept in the structure __r_e_s.  Most
     of the values have reasonable defaults and can be ignored.
     Options stored in __r_e_s._o_p_t_i_o_n_s are defined in _r_e_s_o_l_v._h and
     are as follows.  Options are stored as a simple bit mask
     containing the bitwise ``or'' of the options enabled.

     RES_INIT
	  True if the initial name server address and default
	  domain name are initialized (i.e., _r_e_s__i_n_i_t has been
	  called).

     RES_DEBUG
	  Print debugging messages.

     RES_AAONLY
	  Accept authoritative answers only.  With this option,
	  _r_e_s__s_e_n_d should continue until it finds an authorita-
	  tive answer or finds an error.  Currently this is not
	  implemented.

     RES_USEVC
	  Use TCP connections for queries instead of UDP
	  datagrams.

     RES_STAYOPEN
	  Used with RES_USEVC to keep the TCP connection open
	  between queries.  This is useful only in programs that
	  regularly do many queries.  UDP should be the normal
	  mode used.

     RES_IGNTC
	  Unused currently (ignore truncation errors, i.e., don't
	  retry with TCP).

     RES_RECURSE
	  Set the recursion-desired bit in queries.  This is the
	  default.  (_r_e_s__s_e_n_d does not do iterative queries and
	  expects the name server to handle recursion.)

     RES_DEFNAMES
	  If set, _r_e_s__s_e_a_r_c_h will append the default domain name
	  to single-component names (those that do not contain a
	  dot).  This option is enabled by default.

     RES_DNSRCH
	  If this option is set, _r_e_s__s_e_a_r_c_h will search for host
	  names in the current domain and in parent domains; see
	  _h_o_s_t_n_a_m_e(7).	This is used by the standard host lookup
	  routine _g_e_t_h_o_s_t_b_y_n_a_m_e(3).  This option is enabled by



Printed 7/27/90               June				2






RESOLVER(3)		      1990		      RESOLVER(3)



	  default.

     The _r_e_s__i_n_i_t routine reads the configuration file (if any;
     see _r_e_s_o_l_v_e_r(5)) to get the default domain name, search list
     and the Internet address of the local name server(s).  If no
     server is configured, the host running the resolver is
     tried.  The current domain name is defined by the hostname
     if not specified in the configuration file; it can be over-
     ridden by the environment variable LOCALDOMAIN.  Initializa-
     tion normally occurs on the first call to one of the follow-
     ing routines.

     The _r_e_s__q_u_e_r_y function provides an interface to the server
     query mechanism.  It constructs a query, sends it to the
     local server, awaits a response, and makes preliminary
     checks on the reply.  The query requests information of the
     specified _t_y_p_e and _c_l_a_s_s for the specified fully-qualified
     domain name _d_n_a_m_e . The reply message is left in the _a_n_s_w_e_r
     buffer with length _a_n_s_l_e_n supplied by the caller.

     The _r_e_s__s_e_a_r_c_h routine makes a query and awaits a response
     like _r_e_s__q_u_e_r_y, but in addition, it implements the default
     and search rules controlled by the RES_DEFNAMES and
     RES_DNSRCH options.  It returns the first successful reply.

     The remaining routines are lower-level routines used by
     _r_e_s__q_u_e_r_y.  The _r_e_s__m_k_q_u_e_r_y function constructs a standard
     query message and places it in _b_u_f.  It returns the size of
     the query, or -1 if the query is larger than _b_u_f_l_e_n.  The
     query type _o_p is usually QUERY, but can be any of the query
     types defined in <_a_r_p_a/_n_a_m_e_s_e_r._h>.  The domain name for the
     query is given by _d_n_a_m_e.  _N_e_w_r_r is currently unused but is
     intended for making update messages.

     The _r_e_s__s_e_n_d routine sends a pre-formatted query and returns
     an answer.  It will call _r_e_s__i_n_i_t if RES_INIT is not set,
     send the query to the local name server, and handle timeouts
     and retries.  The length of the reply message is returned,
     or -1 if there were errors.

     The _d_n__c_o_m_p function compresses the domain name _e_x_p__d_n and
     stores it in _c_o_m_p__d_n.  The size of the compressed name is
     returned or -1 if there were errors.  The size of the array
     pointed to by _c_o_m_p__d_n is given by _l_e_n_g_t_h.	The compression
     uses an array of pointers _d_n_p_t_r_s to previously-compressed
     names in the current message.  The first pointer points to
     to the beginning of the message and the list ends with NULL.
     The limit to the array is specified by _l_a_s_t_d_n_p_t_r.	A side
     effect of _d_n__c_o_m_p is to update the list of pointers for
     labels inserted into the message as the name is compressed.
     If _d_n_p_t_r is NULL, names are not compressed.  If _l_a_s_t_d_n_p_t_r is
     NULL, the list of labels is not updated.



Printed 7/27/90               June				3






RESOLVER(3)		      1990		      RESOLVER(3)



     The _d_n__e_x_p_a_n_d entry expands the compressed domain name
     _c_o_m_p__d_n to a full domain name The compressed name is con-
     tained in a query or reply message; _m_s_g is a pointer to the
     beginning of the message.	The uncompressed name is placed
     in the buffer indicated by _e_x_p__d_n which is of size _l_e_n_g_t_h.
     The size of compressed name is returned or -1 if there was
     an error.

FFIILLEESS
     /etc/resolv.conf	 see resolver(5)

SSEEEE AALLSSOO
     gethostbyname(3), named(8), resolver(5), hostname(7),
     RFC1032, RFC1033, RFC1034, RFC1035, RFC974,
     SMM:11 Name Server Operations Guide for BIND








































Printed 7/27/90               June				4



