


PRINTF(3)		      1987			PRINTF(3)



NNAAMMEE
     fprintf, printf, sprintf, vprintf, vfprintf, vsprintf - for-
     matted output conversion

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssttddiioo..hh>>

     pprriinnttff((ffoorrmmaatt [,, arg ] ...  ))
     cchhaarr **ffoorrmmaatt;;

     ffpprriinnttff((ssttrreeaamm,, ffoorrmmaatt [,, arg ] ...  ))
     FFIILLEE **ssttrreeaamm;;
     cchhaarr **ffoorrmmaatt;;

     sspprriinnttff((ss,, ffoorrmmaatt [,, arg ] ...  ))
     cchhaarr **ss,, **ffoorrmmaatt;;

     ##iinncclluuddee <<vvaarraarrggss..hh>>
     vvpprriinnttff((ffoorrmmaatt,, aarrggss))
     cchhaarr **ffoorrmmaatt;;
     vvaa__lliisstt aarrggss;;

     vvffpprriinnttff((ssttrreeaamm,, ffoorrmmaatt,, aarrggss))
     FFIILLEE **ssttrreeaamm;;
     cchhaarr **ffoorrmmaatt;;
     vvaa__lliisstt aarrggss;;

     vvsspprriinnttff((ss,, ffoorrmmaatt,, aarrggss))
     cchhaarr **ss,, **ffoorrmmaatt;;
     vvaa__lliisstt aarrggss;;

DDEESSCCRRIIPPTTIIOONN
     _P_r_i_n_t_f and _v_p_r_i_n_t_f place output on the standard output
     stream ssttddoouutt.  _F_p_r_i_n_t_f and _v_f_p_r_i_n_t_f place output on the
     named output _s_t_r_e_a_m.  _S_p_r_i_n_t_f and _v_s_p_r_i_n_t_f copy into the
     string _s, followed by the character `\0'.	_P_r_i_n_t_f, _f_p_r_i_n_t_f,
     and _s_p_r_i_n_t_f take variadic argument lists directly, while
     _v_p_r_i_n_t_f, _v_f_p_r_i_n_t_f, and _v_s_p_r_i_n_t_f use the variable-length
     argument facilities of _v_a_r_a_r_g_s(3) and hence may be called
     indirectly (see examples).

     Each function converts, formats, and prints its arguments
     after the _f_o_r_m_a_t under control of the _f_o_r_m_a_t argument; each
     returns the the total number of characters printed (not
     including the trailing `\0' in _s_p_r_i_n_t_f and _v_s_p_r_i_n_t_f).  _F_o_r_-
     _m_a_t is a character string which contains two types of
     objects: plain characters, which are simply copied to the
     output stream, and conversion specifications, each of which
     causes conversion and printing of the next successive _a_r_g.

     Each conversion specification is introduced by the percent
     character (``%'').  The remainder of the conversion



Printed 7/27/90              October				1






PRINTF(3)		      1987			PRINTF(3)



     specification includes, in the following order,

     oo++	  Zero or more of the following flags:

	  oo++    a `#' character specifying that the value should
	       be converted to an ``alternate form''.  For cc, dd,
	       ii, nn, pp, ss, and uu, conversions, this option has no
	       effect.	For oo conversions, the precision of the
	       number is increased to force the first character
	       of the output string to a zero (except if a zero
	       value is printed with an explicit precision of
	       zero).  For xx and XX conversions, a non-zero result
	       has the string 00xx (or 00XX for XX conversions)
	       prepended to it.  For ee, EE, ff, gg, and GG, conver-
	       sions, the result will always contain a decimal
	       point, even if no digits follow it (normally, a
	       decimal point appears in the results of those
	       conversions only if a digit follows).  For gg and GG
	       conversions, trailing zeros are not removed from
	       the result as they would otherwise be.

	  oo++    A zero ``0'' character specifying zero padding.
	       For all conversions except nn, the converted value
	       is padded on the left with zeros rather than
	       blanks.	If a precision is given with a numeric
	       conversion ( dd, ii, oo, uu, ii, xx, and XX), the ``0''
	       flag is ignored.

	  oo++    A minus sign (``-'') specifying left adjustment of
	       the converted value in the indicated field.
	       Except for nn conversions, the converted value is
	       padded on the right with blanks, rather than on
	       the left with blanks or zeros.  A ``-'' overrides
	       a ``0'' if both are given.

	  oo++    A space, specifying that a blank should be left
	       before a positive number produced by a signed
	       conversion ( dd, ee, EE, ff, gg, GG, or ii).

	  oo++    a `+' character specifying that a sign always be
	       placed before a number produced by a signed
	       conversion.  A ``+'' overrides a space if both are
	       used.

     oo++	  An optional digit string specifying a field width.  If
	  the converted value has fewer characters than the field
	  width, it will be padded on the left (or right, if the
	  left-adjustment flag is used) to make up the field
	  width.

     oo++	  An optional precision, in the form of a period (``.'')
	  followed by an optional digit string.  If the digit



Printed 7/27/90              October				2






PRINTF(3)		      1987			PRINTF(3)



	  string is omitted, the precision is taken as zero.
	  This gives the minimum number of digits to appear for
	  dd, ii, oo, uu, xx, and XX conversions, the number of digits
	  to appear after the decimal point for ee, EE, and ff
	  conversions, the maximum number of significant digits
	  for gg and GG conversions, or the maximum number of char-
	  acters to be printed from a string for ss conversions.

     oo++	  The character hh, specifying that a following dd, ii, oo,
	  uu, xx, or XX conversion corresponds to a sshhoorrtt iinntt or
	  uunnssiiggnneedd sshhoorrtt iinntt argument, or that a following nn
	  conversion corresponds to a pointer to a sshhoorrtt iinntt
	  argument.

     oo++	  the character ll (ell) specifying that a following dd, ii,
	  oo, uu, xx, or XX conversion corresponds to a lloonngg iinntt or
	  uunnssiiggnneedd lloonngg iinntt argument, or that a following nn
	  conversion corresponds to a pointer to a lloonngg iinntt argu-
	  ment.

     oo++	  The character LL specifying that a following ee, EE, ff, gg,
	  or GG conversion corresponds to a lloonngg ddoouubbllee argument
	  (but note that long double values are not currently
	  supported by the VAX and Tahoe compilers).

     oo++	  A character which indicates the type of conversion to
	  be applied.

     A field width or precision may be an asterisk (``*'')
     instead of a digit string.  In this case an iinntt argument
     supplies the value.  A negative field width is treated as a
     left adjustment flag followed by a positive field width; a
     negative precision is treated as though it were missing.

     The conversion characters and their meanings are:

     ddiioouuxxXX
	  The iinntt (or appropriate variant) argument is converted
	  to signed decimal (dd and ii), unsigned octal (oo),
	  unsigned decimal (uu), or unsigned hexadecimal (xx and XX)
	  notation respectively.  The letters aabbccddeeff are used for
	  xx conversions; the letters AABBCCDDEEFF are used for XX
	  conversions.	The precision, if any, gives the minimum
	  number of digits that must appear; if the converted
	  value requires fewer digits, it is padded on the left
	  with zeros.

     DDOOUU  The lloonngg iinntt argument is converted to signed decimal,
	  unsigned octal, or unsigned decimal, as if the format
	  had been lldd, lloo, or lluu respectively.	These conversion
	  characters are deprecated, and will eventually disap-
	  pear.



Printed 7/27/90              October				3






PRINTF(3)		      1987			PRINTF(3)



     eeEE      The ddoouubbllee argument is rounded and converted in the
	     style `[--]d..dddee+_dd' where there is one digit before
	     the decimal point and the number after is equal to
	     the precision specification for the argument.  If
	     the precision is missing, 6 digits are given; if the
	     precision is explicitly zero, no decimal point
	     appears.  An EE conversion uses the letter EE (rather
	     than ee) to introduce the exponent.  The exponent
	     always contains at least two digits; if the value is
	     zero, the exponent is 00.

     ff	     The ddoouubbllee argument is rounded and converted to
	     decimal notation in the style `[--]ddd.ddd' where the
	     number of digits after the decimal point is equal to
	     the precision.  If the precision is missing, 6
	     digits are given; if the precision is explicitly 0,
	     no digits and no decimal point are printed.  If a
	     decimal point appears, at least one digit appears
	     before it.

     gg	     The ddoouubbllee argument is printed in style ff or ee (or EE
	     for GG conversions).  The precision specifies the
	     number of significant digits.  If the precision is
	     missing, 6 digits are given; if the precision is
	     zero, it is treated as 1.	Style ee is used if the
	     exponent from its conversion is less than -4 or
	     greater than or equal to the precision.  Trailing
	     zeros are removed from the fractional part of the
	     result; a decimal point appears only if it is fol-
	     lowed by at least one digit.

     cc	     The iinntt argument is converted to an uunnssiiggnneedd cchhaarr ,,
	     and the resulting character is printed.

     ss	     The cchhaarr ** argument is taken to be a string (charac-
	     ter pointer).  Characters from the string are
	     printed until a null character is reached, or until
	     the number of characters indicated by the precision
	     have been printed, whichever occurs first; if a pre-
	     cision is given, no null character need be present.

     pp	     The vvooiidd ** pointer argument is printed in hexade-
	     cimal (as if by ``%x'' or ``%lx'').

     nn	     The number of characters written so far is stored
	     into the integer indicated by the iinntt ** (or variant)
	     pointer argument.	No argument is converted.

     %%	     Prints a `%'; no argument is converted.

     In no case does a non-existent or small field width cause
     truncation of a field; if the result of a conversion is



Printed 7/27/90              October				4






PRINTF(3)		      1987			PRINTF(3)



     wider than the field width, the field is expanded to contain
     it.  Similarly, padding takes place only if the specified
     field width exceeds the actual width.

EEXXAAMMPPLLEESS
     To print a date and time in the form `Sunday, July 3,
     10:02', where _w_e_e_k_d_a_y and _m_o_n_t_h are pointers to null-
     terminated strings:

	  printf("%s, %s %d, %02d:%.2d", weekday, month, day,
	       hour, min);

     To print pi to 5 decimals:

	  printf("pi = %.5f", 4*atan(1.0));

     To allocate a 128 byte string and print into it:

	  #include <stdio.h>
	  #include <varargs.h>
	  char *newfmt(va_alist)
		    va_dcl
	  {
		    char *p, *malloc(), fmt;
		    va_list ap;
		    if ((p = malloc(128)) == NULL)
			      return (NULL);
		    va_start(ap);
		    fmt = va_arg(ap, char *);
		    (void) vsprintf(p, fmt, ap);
		    va_end(ap);
		    return (p);
	  }

SSEEEE AALLSSOO
     putc(3), scanf(3)

BBUUGGSS
     The conversion formats ``%D'', ``%O'', and ``%U'' are not
     standard and are provided only for backward compatibility.
     The effect of padding the ``%p'' format with zeros (either
     by the ``0'' flag or by specifying a precision), and the
     benign effect (i.e., none) of the ``#'' flag on ``%n'' and
     ``%p'' conversions, as well as other nonsensical combina-
     tions such as ``%Ld'', are not standard; such combinations
     should be avoided.









Printed 7/27/90              October				5



