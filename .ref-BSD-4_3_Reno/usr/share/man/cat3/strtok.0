


STRTOK(3)		      1990			STRTOK(3)



NNAAMMEE
     strtok, strsep - string token operations

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssttrriinngg..hh>>

     cchhaarr **
     ssttrrttookk((cchhaarr **ssttrr,, ccoonnsstt cchhaarr **sseepp));;

DDEESSCCRRIIPPTTIIOONN
     TThhiiss iinntteerrffaaccee iiss oobbssoolleetteedd bbyy ssttrrsseepp((33))..

     _S_t_r_t_o_k is used to isolate sequential tokens in a null-
     terminated string, _s_t_r.  These tokens are separated in the
     string by oonnee oorr mmoorree of the characters in _s_e_p.  The first
     time that _s_t_r_t_o_k is called, _s_t_r should be specified; subse-
     quent calls, wishing to obtain further tokens from the same
     string, should pass a null pointer instead.  The separator
     string, _s_e_p, must be supplied each time, and may change
     between calls.

     _S_t_r_t_o_k returns a pointer to the start of each subsequent
     token in the string, after replacing the token itself with a
     NUL character.  When no more tokens remain, a null pointer
     is returned.

SSEEEE AALLSSOO
     index(3), memchr(3), rindex(3), strchr(3), strcspn(3),
     strpbrk(3), strrchr(3), strsep(3), strspn(3), strstr(3)

SSTTAANNDDAARRDDSS
     SSttrrttookk conforms to ANSI X3.159-1989 (``ANSI C'').

BBUUGGSS
     There is no way to get tokens from multiple strings simul-
     taneously.

     The System V ssttrrttookk will, if handed a string containing only
     delimiter characters, not alter the next starting point, so
     that a call to ssttrrttookk with a different (or empty) delimiter
     string may return a non-NULL value.  Since this implementa-
     tion always alters the next starting point, such a sequence
     of calls would always return NULL.












Printed 7/27/90               June				1



