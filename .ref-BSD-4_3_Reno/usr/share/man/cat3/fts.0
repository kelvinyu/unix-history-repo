


FTS(3)			      1990			   FTS(3)



NNAAMMEE
     fts - traverse a file hierarchy

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
     ##iinncclluuddee <<ssyyss//ssttaatt..hh>>
     ##iinncclluuddee <<ffttss..hh>>

     FFTTSS **
     ffttssooppeenn((ppaatthh__aarrggvv,, ooppttiioonnss,, ccoommppaarr))
     cchhaarr **ppaatthh__aarrggvv[[]];;
     iinntt ooppttiioonnss,, ((**ccoommppaarr))(());;

     FFTTSSEENNTT **
     ffttssrreeaadd((ffttsspp));;
     FFTTSS **ffttsspp;;

     FFTTSSEENNTT **
     ffttsscchhiillddrreenn((ffttsspp))
     FFTTSS **ffttsspp;;

     ffttsssseett((ffttsspp,, ff,, ooppttiioonnss))
     FFTTSS **ffttsspp;;
     FFTTSSEENNTT **ff;;
     iinntt ooppttiioonnss;;

     ffttsscclloossee((ffttsspp))
     FFTTSS **ffttsspp;;

DDEESSCCRRIIPPTTIIOONN
     The _f_t_s(3) utilities are provided for traversing UNIX file
     hierarchies.  Two structures are defined (and typedef'd) in
     the include file <_f_t_s._h>.	The first is FTS, the structure
     that defines the file hierarchy stream.  The second is
     FTSENT, the structure that defines a file in the file
     hierarchy.

     The _f_t_s_o_p_e_n routine takes a pointer to an array of character
     pointers (``argv'') naming the file hierarchies to be
     traversed.  The array must be terminated by a pointer to a
     NULL string.

     The _o_p_t_i_o_n_s specified are formed by _o_r'ing one or more of
     the following values:

     FTS_LOGICAL
	  This option causes _f_t_s_r_e_a_d to use the function _s_t_a_t(2),
	  by default, to determine the status of each file.  If
	  this option is set, the only symbolic links returned to
	  the application are those referencing non-existent
	  files.  Either FTS_LOGICAL or FTS_PHYSICAL mmuusstt be pro-
	  vided to the _f_t_s_o_p_e_n routine.



Printed 7/27/90               June				1






FTS(3)			      1990			   FTS(3)



     FTS_NOCHDIR
	  As a performance optimization, _f_t_s_r_e_a_d changes direc-
	  tories as it descends the hierarchy.	This has the
	  side-effect that applications cannot rely on being in
	  any particular directory.  The FTS_NOCHDIR option turns
	  off this optimization.  Note that applications should
	  not change the current directory (even if FTS_NOCHDIR
	  is specified) unless absolute pathnames were provided
	  as arguments to _f_t_s_o_p_e_n.

     FTS_NOSTAT
	  By default, _f_t_s_r_e_a_d and _f_t_s_c_h_i_l_d_r_e_n provide file
	  characteristic information (the _s_t_a_t_b field) for each
	  file they return.  This option relaxes that require-
	  ment; the contents of the _s_t_a_t_b field may be undefined,
	  and the _i_n_f_o field may be set to FTS_NS.

     FTS_PHYSICAL
	  This option causes _f_t_s_r_e_a_d to use the function
	  _l_s_t_a_t(2), by default, to determine the status of each
	  file.  If this option is set, all symbolic links are
	  returned to the application program.	Either
	  FTS_LOGICAL or FTS_PHYSICAL mmuusstt be provided to the
	  _f_t_s_o_p_e_n routine.

     FTS_SEEDOT
	  This option causes the routine _f_t_s_r_e_a_d to return struc-
	  tures for the directory entries ``.'' and ``..''.  By
	  default they are ignored unless specified as an argu-
	  ment to _f_t_s_o_p_e_n.

     FTS_XDEV
	  This option keeps _f_t_s from descending into directories
	  that have a different device number than the file the
	  descent began from.

     The argument _c_o_m_p_a_r specifies a user-defined routine which
     is used to order the traversal of directories.  _C_o_m_p_a_r takes
     two pointers to pointers to FTSENT structures as arguments
     and should return a negative value, zero, or a positive
     value to indicate if the file referenced by its first argu-
     ment comes before, in any order with respect to, or after,
     the file referenced by its second argument.

     The _f_t_s__a_c_c_p_a_t_h and _f_t_s__p_a_t_h fields of the FTSENT structures
     may not be used in this comparison.  If the option
     _F_T_S__N_O_S_T_A_T is specified, the _f_t_s__s_t_a_b field may not be used
     as well.  If the _c_o_m_p_a_r argument is NULL the directory
     traversal order is unspecified except for the root paths
     which are traversed in the order listed in _p_a_t_h__a_r_g_v.





Printed 7/27/90               June				2






FTS(3)			      1990			   FTS(3)



     The _f_t_s_c_l_o_s_e routine closes a file hierarchy stream and
     changes the current directory to the directory _f_t_s_o_p_e_n was
     called from.  _F_t_s_c_l_o_s_e returns 0 on success, and -1 if an
     error occurs.

     Each call to the _f_t_s_r_e_a_d routine returns a pointer to an
     FTSENT structure describing a file in the hierarchy.  Direc-
     tories (that are readable, searchable and do not cause
     cycles) are visited at least twice, before any of their des-
     cendants have been visited (pre-order) and after all their
     descendants have been visited (post-order).  All other files
     are visited at least once.

     The FTSENT structure contains at least the following fields:

	  typedef struct ftsent {
	       struct ftsent *fts_parent;    /* parent structure */
	       struct ftsent *fts_link;      /* cycle or file structure */
	       union {
		    long number;	     /* local numeric value */
		    void *pointer;	     /* local address value */
	       } fts_local;
	       char *fts_accpath;	     /* path from current directory */
	       char *fts_path;		     /* path from starting directory */
	       char *fts_name;		     /* file name */
	       short fts_pathlen;	     /* strlen(path) */
	       short fts_namelen;	     /* strlen(name) */
	       short fts_level;              /* depth (-1 to N) */
	       unsigned short fts_info;      /* flags for entry */
	       struct stat fts_statb;	     /* stat(2) information */
	  } FTSENT;

     The fields are as follows:

     fts_parent
	  A pointer to a structure referencing the file in the
	  hierarchy immediately above the current file/structure.
	  A parent structure for the initial entry point is pro-
	  vided as well, however, only the _f_t_s__l_o_c_a_l and
	  _f_t_s__l_e_v_e_l fields are guaranteed to be initialized.

     fts_link
	  If a directory causes a cycle in the hierarchy, either
	  because of a hard link between two directories, or a
	  symbolic link pointing to a directory, the _f_t_s__l_i_n_k
	  field of the structure will point to the structure in
	  the hierarchy that references the same file as the
	  current structure.  Upon return from the _f_t_s_c_h_i_l_d_r_e_n
	  routine, the _f_t_s__l_i_n_k field points to the next struc-
	  ture in the linked list of entries from the directory.
	  Otherwise, the contents of the _f_t_s__l_i_n_k field are unde-
	  fined.



Printed 7/27/90               June				3






FTS(3)			      1990			   FTS(3)



     fts_local
	  This field is provided for the use of the application
	  program.  It can be used to store either a long value
	  or an address.

     fts_accpath
	  A path that can be used to access the file.

     fts_path
	  The path for the file relative to the root of the
	  traversal.

     fts_name
	  The basename of the file.

     fts_pathlen
	  The length of the string referenced by _f_t_s__p_a_t_h.

     fts_namelen
	  The length of the string referenced by _f_t_s__n_a_m_e.

     fts_level
	  The depth of the traversal, numbered from -1 to N.  The
	  parent structure of the root of the traversal is num-
	  bered -1, and the structure for the root of the traver-
	  sal is numbered 0.

     fts_info
	  Information describing the file.  With the exception of
	  directories (FTS_D), all of these entries are terminal,
	  i.e. they will not be revisited, nor will their descen-
	  dants be visited (if they have not been visited
	  already).

	  FTS_D
	       A directory being visited in pre-order.

	  FTS_DC
	       A directory that causes a cycle.  The _f_t_s__l_i_n_k
	       field of the structure will be filled in as well.

	  FTS_DEFAULT
	       Anything that's not one of the others.

	  FTS_DNR
	       A directory that cannot be read.

	  FTS_DNX
	       A directory that cannot be searched.

	  FTS_DOT
	       A file named ``.'' or ``..'' with a _f_t_s__l_e_v_e_l



Printed 7/27/90               June				4






FTS(3)			      1990			   FTS(3)



	       field not equal to zero, i.e. one not specified as
	       an argument to _f_t_s_o_p_e_n.	(See FTS_SEEDOT.)

	  FTS_DP
	       A directory that is being visited in post-order.
	       The contents of the structure will be unchanged
	       from when the directory was visited in pre-order.

	  FTS_ERR
	       An error indicator; the external variable _e_r_r_n_o
	       contains an error number indicating the reason for
	       the error.

	  FTS_F
	       A regular file.

	  FTS_NS
	       No _s_t_a_t(2) information is available at this time
	       (see FTS_NOSTAT); the contents of the _f_t_s__s_t_a_t_b
	       field are undefined.

	  FTS_SL
	       A symbolic link.

	  FTS_SLNONE
	       A symbolic link with a non-existent target.

     fts_statb
	  _S_t_a_t(2) information for the file.

     The _f_t_s__a_c_c_p_a_t_h and _f_t_s__p_a_t_h fields are guaranteed to be
     NULL-terminated oonnllyy for the file most recently returned by
     _f_t_s_r_e_a_d.  The _f_t_s__n_a_m_e field is always NULL-terminated.  To
     use these fields to reference any other active files may
     require that they be modified using the information con-
     tained in the _f_t_s__p_a_t_h_l_e_n field.  Any such modifications
     should be undone before further calls to _f_t_s_r_e_a_d are
     attempted.

     If all the members of the hierarchy have been returned,
     _f_t_s_r_e_a_d returns NULL and sets the external variable _e_r_r_n_o to
     0.  If an error unrelated to a file in the hierarchy occurs,
     _f_t_s_r_e_a_d returns NULL and sets errno appropriately.  Other-
     wise, a pointer to an FTSENT structure is returned, and an
     error may or may not have occurred; see FTS_ERR above.

     When the most recently returned file from _f_t_s_r_e_a_d is a
     directory being visited in pre-order, _f_t_s_c_h_i_l_d_r_e_n returns a
     pointer to the first entry in a linked list (sorted by the
     comparison routine, if provided) of the directory entries it
     contains.	The linked list is linked through the _f_t_s__l_i_n_k
     field of the FTSENT structure.  Each call to _f_t_s_c_h_i_l_d_r_e_n



Printed 7/27/90               June				5






FTS(3)			      1990			   FTS(3)



     recreates the list.  Note, cycles are not detected until a
     directory is actually visited, therefore _f_t_s_c_h_i_l_d_r_e_n will
     never return a structure with an _f_t_s__i_n_f_o field set to
     FTS_DC.  If the current file is not a directory being
     visited in pre-order, or if an error occurs, or the file
     does not contain any entries _f_t_s_c_h_i_l_d_r_e_n returns NULL.  If
     an error occurs, _f_t_s_c_h_i_l_d_r_e_n sets errno appropriately, oth-
     erwise it sets errno to zero.

     The pointers returned by _f_t_s_r_e_a_d and _f_t_s_c_h_i_l_d_r_e_n point to
     structures which may be overwritten.  Structures returned by
     _f_t_s_c_h_i_l_d_r_e_n and _f_t_s_r_e_a_d may be overwritten after a call to
     _f_t_s_c_l_o_s_e on the same file hierarchy.  Otherwise, structures
     returned by _f_t_s_c_h_i_l_d_r_e_n will not be overwritten until a sub-
     sequent call to either _f_t_s_c_h_i_l_d_r_e_n or _f_t_s_r_e_a_d on the same
     file hierarchy.  Structures returned by _f_t_s_r_e_a_d will not not
     be overwritten until a subsequent call to _f_t_s_r_e_a_d on the
     same file hierarchy stream, unless it represents a file of
     type directory, in which case it will not be overwritten
     until after a subsequent call to _f_t_s_r_e_a_d after it has been
     returned by the function _f_t_s_r_e_a_d in post-order.

     The routine _f_t_s_s_e_t allows the user application to determine
     further processing for the file _f of the stream _f_t_s_p.
     _F_t_s_s_e_t returns 0 on success, and -1 if an error occurs.
     _O_p_t_i_o_n may be set to any one of the following values.

     FTS_AGAIN
	  Re-visit the file; any file type may be re-visited.
	  The next call to _f_t_s_r_e_a_d will return the referenced
	  file.  The _f_t_s__s_t_a_t and _f_t_s__i_n_f_o fields of the struc-
	  ture will be reinitialized at that time, but no other
	  fields will have been modified.  This option is mean-
	  ingful only for the most recently returned file from
	  _f_t_s_r_e_a_d.  Normal use is for post-order directory
	  visits, where it causes the directory to be re-visited
	  (in both pre and post-order) as well as all of its des-
	  cendants.

     FTS_FOLLOW
	  The referenced file must be a symbolic link.	If the
	  referenced file is the one most recently returned by
	  _f_t_s_r_e_a_d, the next call to _f_t_s_r_e_a_d returns the file with
	  the _f_t_s__i_n_f_o and _f_t_s__s_t_a_t_b fields reinitialized to
	  reflect the target of the symbolic link instead of the
	  symbolic link itself.  If the file is one of those most
	  recently returned by _f_t_s_c_h_i_l_d_r_e_n, the _f_t_s__i_n_f_o and
	  _f_t_s__s_t_a_t_b fields of the structure, when returned by
	  _f_t_s_r_e_a_d, will reflect the target of the symbolic link
	  instead of the symbolic link itself.	In either case,
	  if the target of the link is a directory, the pre-order
	  return, followed by the return of all of its



Printed 7/27/90               June				6






FTS(3)			      1990			   FTS(3)



	  descendants, followed by a post-order return, is done.

     FTS_SKIP
	  No descendants of this file are visited.

     Hard links between directories that do not cause cycles or
     symbolic links to symbolic links may cause files to be
     visited more than once, or directories more than twice.

EERRRROORRSS
     _F_t_s_o_p_e_n may fail and set errno for any of the errors speci-
     fied for the library routine _m_a_l_l_o_c(3).

     _F_t_s_c_l_o_s_e may fail and set errno for any of the errors speci-
     fied for the library routine _c_h_d_i_r(2).

     _F_t_s_r_e_a_d and _f_t_s_c_h_i_l_d_r_e_n may fail and set errno for any of
     the errors specified for the library routines _c_h_d_i_r(2), _g_e_t_-
     _g_r_o_u_p_s(2), _m_a_l_l_o_c(3), _o_p_e_n_d_i_r(3), _r_e_a_d_d_i_r(3) and _s_t_a_t(2).

SSEEEE AALLSSOO
     find(1), chdir(2), stat(2), qsort(3)

SSTTAANNDDAARRDDSS
     The _f_t_s utility is expected to be a superset of the POSIX
     1003.1 specification.





























Printed 7/27/90               June				7



