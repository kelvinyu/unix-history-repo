


STATFS(2)		      1990			STATFS(2)



NNAAMMEE
     statfs - get file system statistics

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
     ##iinncclluuddee <<ssyyss//mmoouunntt..hh>>

     ssttaattffss((ppaatthh,, bbuuff))
     cchhaarr **ppaatthh;;
     ssttrruucctt ssttaattffss **bbuuff;;

     ffssttaattffss((ffdd,, bbuuff))
     iinntt ffdd;;
     ssttrruucctt ssttaattffss **bbuuff;;

DDEESSCCRRIIPPTTIIOONN
     _S_t_a_t_f_s returns information about a mounted file system.
     _p_a_t_h is the path name of any file within the mounted
     filesystem.  _B_u_f is a pointer to a _s_t_a_t_f_s structure defined
     as follows:


	  typedef quad fsid_t;

	  #define MNAMELEN 32			    /* length of buffer for returned name */

	  struct statfs {
		   short   f_type;		    /* type of filesystem (see below) */
		   short   f_flags;		    /* copy of mount flags */
		   long    f_fsize;		    /* fundamental file system block size */
		   long    f_bsize;		    /* optimal transfer block size */
		   long    f_blocks;		    /* total data blocks in file system */
		   long    f_bfree;		    /* free blocks in fs */
		   long    f_bavail;		    /* free blocks avail to non-superuser */
		   long    f_files;		    /* total file nodes in file system */
		   long    f_ffree;		    /* free file nodes in fs */
		   fsid_t  f_fsid;		    /* file system id */
		   long    f_spare[6];		    /* spare for later */
		   char    f_mntonname[MNAMELEN];   /* directory on which mounted */
		   char    f_mntfromname[MNAMELEN]; /* mounted filesystem */
	  };
	  /*
	   * File system types.
	   */
	  #define  MOUNT_UFS			    1
	  #define  MOUNT_NFS			    2
	  #define  MOUNT_MFS			    3
	  #define  MOUNT_PC			    4

     Fields that are undefined for a particular file system are
     set to -1.  _F_s_t_a_t_f_s returns the same information about an
     open file referenced by descriptor _f_d.



Printed 7/27/90               June				1






STATFS(2)		      1990			STATFS(2)



RREETTUURRNN VVAALLUUEE
     Upon successful completion, a value of 0 is returned.  Oth-
     erwise, -1 is returned and the global variable _e_r_r_n_o is set
     to indicate the error.

EERRRROORRSS
     _S_t_a_t_f_s fails if one or more of the following are true:

     ENOTDIR	    A component of the path prefix of _p_a_t_h is not
		    a directory.

     EINVAL	    _p_a_t_h contains a character with the high-order
		    bit set.

     ENAMETOOLONG   The length of a component of _p_a_t_h exceeds 255
		    characters, or the length of _p_a_t_h exceeds
		    1023 characters.

     ENOENT	    The file referred to by _p_a_t_h does not exist.

     EACCES	    Search permission is denied for a component
		    of the path prefix of _p_a_t_h.

     ELOOP	    Too many symbolic links were encountered in
		    translating _p_a_t_h.

     EFAULT	    _B_u_f or _p_a_t_h points to an invalid address.

     EIO	    An I/O error occurred while reading from or
		    writing to the file system.

     _F_s_t_a_t_f_s fails if one or both of the following are true:

     EBADF	    _f_d is not a valid open file descriptor.

     EFAULT	    _b_u_f points to an invalid address.

     EIO	    An I/O error occurred while reading from or
		    writing to the file system.
















Printed 7/27/90               June				2



