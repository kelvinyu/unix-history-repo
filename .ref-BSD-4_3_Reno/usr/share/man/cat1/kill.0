KILL(1)                     UNIX Reference Manual		       KILL(1)

NNAAMMEE
     kkiillll - terminate or signal a process

SSYYNNOOPPSSIISS
     kkiillll [--ssiiggnnaall__nnaammee] _p_i_d ...
     kkiillll [--ll]

DDEESSCCRRIIPPTTIIOONN
     The kill utility sends a signal to the process(es) specified by each pid
     operand. It is used to kill runaway or misbegotten processes, such as
     those _b_a_c_k_g_r_o_u_n_d_e_d with `&'.  KKiillll is intelligent about who owns a pro-
     cess.

     Options available:

     --ssiiggnnaall__nnaammee
	   A symbolic signal name. To find out all the possible signal names
	   do a kill -l.

     --ll    Available signal names are listed and are as found in
	   /_u_s_r/_i_n_c_l_u_d_e/_s_i_g_n_a_l._h, stripped of the common SIG prefix.

     --ssiiggnnaall__nnuummbbeerr
	   A (nonnegative) decimal integer, representing the signal to be used
	   instead of TERM as the sig argument in the effective call to
	   kill(2).

     Some of the more commonly used signals with kill:

	   -1	  -1	  (broadcast to all processes, super user only)
	   0	  0	  (sh(1) only, signals all members of process group)
	   2	  INT	  (interupt)
	   3	  QUIT	  (quit)
	   6	  ABRT	  (abort)
	   9	  KILL	  (non-catchable non-ignorable kill)
	   14	  ALRM	  (alarm clock)
	   15	  TERM	  (software termination signal)

     KKiillll is a built-in to csh(1); it allows job specifiers of the form
     ``%...'' as arguments so process id's are not as often used as kkiillll argu-
     ments.  See csh(1) for details.

SSEEEE AALLSSOO
     csh(1), ps(1), kill(2), sigvec(2)

HHIISSTTOORRYY
     A kkiillll command appeared in Version 6 AT&T Unix.

BBUUGGSS
     A replacement for ``kill 0'' for csh(1) users should be provided.
