DC(1)			    UNIX Reference Manual			 DC(1)

NNAAMMEE
     ddcc - desk calculator

SSYYNNOOPPSSIISS
     ddcc [file]

DDEESSCCRRIIPPTTIIOONN
     DDcc is an arbitrary precision arithmetic package.  Ordinarily it operates
     on decimal integers, but one may specify an input base, output base, and
     a number of fractional digits to be maintained.  The overall structure of
     ddcc is a stacking (reverse Polish) calculator.  If an argument is given,
     input is taken from that file until its end, then from the standard in-
     put.  The following constructions are recognized:

     _n_u_m_b_e_r    The value of the number is pushed on the stack.	A number is an
	       unbroken string of the digits 0-9.  It may be preceded by an
	       underscore _ to input a negative number.  Numbers may contain
	       decimal points.

     + - / * % ^
	       The top two values on the stack are added (+), subtracted (-),
	       multiplied (*), divided (/), remaindered (%), or exponentiated
	       (^).  The two entries are popped off the stack; the result is
	       pushed on the stack in their place.  Any fractional part of an
	       exponent is ignored.

     ss_x        The top of the stack is popped and stored into a register named
	       _x, where _x may be any character.  If the _s is capitalized, _x is
	       treated as a stack and the value is pushed on it.

     ll_x        The value in register _x is pushed on the stack.	The register _x
	       is not altered.	All registers start with zero value.  If the _l
	       is capitalized, register _x is treated as a stack and its top
	       value is popped onto the main stack.

     dd	       The top value on the stack is duplicated.

     pp	       The top value on the stack is printed.  The top value remains
	       unchanged.  _P interprets the top of the stack as an ascii
	       string, removes it, and prints it.

     ff	       All values on the stack and in registers are printed.

     qq	       exits the program.  If executing a string, the recursion level
	       is popped by two.  If _q is capitalized, the top value on the
	       stack is popped and the string execution level is popped by
	       that value.

     xx	       treats the top element of the stack as a character string and
	       executes it as a string of dc commands.

     XX	       replaces the number on the top of the stack with its scale fac-
	       tor.

     [...]     puts the bracketed ascii string onto the top of the stack.

     <_x >_x =_x
	       The top two elements of the stack are popped and compared.  Re-
	       gister _x is executed if they obey the stated relation.

     vv	       replaces the top element on the stack by its square root.  Any
	       existing fractional part of the argument is taken into account,
	       but otherwise the scale factor is ignored.

     !!	       interprets the rest of the line as a UNIX command.
     cc	       All values on the stack are popped.

     ii	       The top value on the stack is popped and used as the number ra-
	       dix for further input.  II pushes the input base on the top of
	       the stack.

     oo	       The top value on the stack is popped and used as the number ra-
	       dix for further output.

     OO	       pushes the output base on the top of the stack.

     kk	       the top of the stack is popped, and that value is used as a
	       non-negative scale factor: the appropriate number of places are
	       printed on output, and maintained during multiplication, divi-
	       sion, and exponentiation.  The interaction of scale factor, in-
	       put base, and output base will be reasonable if all are changed
	       together.

     zz	       The stack level is pushed onto the stack.

     ZZ	       replaces the number on the top of the stack with its length.

     ??	       A line of input is taken from the input source (usually the
	       terminal) and executed.

     ;; ::       are used by _b_c for array operations.

     An example which prints the first ten values of nn!!:

	   [la1+dsa*pla10>y]sy
	   0sa1
	   lyx

SSEEEE AALLSSOO
     bc(1), which is a preprocessor for ddcc providing infix notation and a C-
     like syntax which implements functions and reasonable control structures
     for programs.

HHIISSTTOORRYY
     DDcc appeared in Version 6 AT&T Unix.

DDIIAAGGNNOOSSTTIICCSS
     x is unimplemented
		 where x is an octal number.

     stack empty
		 for not enough elements on the stack to do what was asked.

     Out of space
		 when the free list is exhausted (too many digits).

     Out of headers
		 for too many numbers being kept around.

     Out of pushdown
		 for too many items on the stack.

     Nesting Depth
		 for too many levels of nested execution.
