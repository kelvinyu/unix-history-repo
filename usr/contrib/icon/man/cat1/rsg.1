


RSG(1)                Icon Program Library                 RSG(1)



NNNNAAAAMMMMEEEE
     rsg - generate random sentences

SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
     rrrrssssgggg [----llll _n] [----llll _n] [----tttt]

DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
     _R_s_g generates randomly selected sentences from a grammar
     specified by the user.

     The following options may appear in any order:

     ----ssss _n Set the seed for random generation to _n.  The default
          seed is 0.

     ----llll _n Terminate generation if the number of symbols remaining
          to be processed exceeds _n. There is no default limit.

     ----tttt   Trace the generation of sentences. Trace output goes to
          standard error output.

     _R_s_g works interactively, allowing the user to build, test,
     modify, and save grammars. Input to _r_s_g consists of various
     kinds of specifications, which can be intermixed:

     _P_r_o_d_u_c_t_i_o_n_s define nonterminal symbols in a syntax similar
     to the rewriting rules of BNF with various alternatives con-
     sisting of the concatenation of nonterminal and terminal
     symbols.

     _G_e_n_e_r_a_t_i_o_n _s_p_e_c_i_f_i_c_a_t_i_o_n_s cause the generation of a speci-
     fied number of sentences from the language defined by a
     given nonterminal symbol.

     _G_r_a_m_m_a_r _o_u_t_p_u_t _s_p_e_c_i_f_i_c_a_t_i_o_n_s cause the definition of a
     specified nonterminal or the entire current grammar to be
     written to a given file.

     _S_o_u_r_c_e _s_p_e_c_i_f_i_c_a_t_i_o_n_s cause subsequent input to be read from
     a specified file.

     In addition, any line beginning with #### is considered to be a
     comment, while any line beginning with ==== causes the rest of
     that line to be used as a prompt to the user whenever _r_s_g is
     ready for input (there normally is no prompt). A line con-
     sisting of a single ==== stops prompting.

   PPPPrrrroooodddduuuuccccttttiiiioooonnnnssss
     Examples of productions are:

          <expr>::=<term>|<term>+<expr>
          <term>::=<element>|<element>*<term>



Version 5.9    The University of Arizona - 5/16/83              1






RSG(1)                Icon Program Library                 RSG(1)



          <element>::=x|y|z|(<expr>)

     Productions may occur in any order. The definition for a
     nonterminal symbol can be changed by specifying a new pro-
     duction for it.

     There are a number of special devices to facilitate the
     definition of grammars, including eight predefined, built-in
     nonterminal symbols:

          symbol    definition
          <<<<llllbbbb>>>>      <<<<
          <<<<rrrrbbbb>>>>      >>>>
          <<<<vvvvbbbb>>>>      ||||
          <<<<nnnnllll>>>>      newline
          <<<<>>>>        empty string
          <<<<&&&&llllccccaaaasssseeee>>>>  any single lowercase letter
          <<<<&&&&uuuuccccaaaasssseeee>>>>  any single uppercase letter
          <<<<&&&&ddddiiiiggggiiiitttt>>>>  any single digit

     In addition, if the string between a <<<< and >>>> begins and ends
     with a single quotation mark, that construction stands for
     any single character between the quotation marks. For exam-
     ple,

          <'xyz'>

     is equivalent to

          x|y|z

     Finally, if the name of a nonterminal symbol between the <<<<
     and >>>> begins with ????, the user is queried during generation
     to supply a string for that nonterminal symbol. For example,
     in

          <expr>::=<term>|<term>+<expr>|<?expr>

     if the third alternative is encountered during generation,
     the user is asked to provide a string for <<<<eeeexxxxpppprrrr>>>>.

   GGGGeeeennnneeeerrrraaaattttiiiioooonnnn SSSSppppeeeecccciiiiffffiiiiccccaaaattttiiiioooonnnnssss
     A generation specification consists of a nonterminal symbol
     followed by a nonnegative integer. An example is

          <expr>10

     which specifies the generation of 10 <<<<eeeexxxxpppprrrr>>>>s. If the integer
     is omitted, it is assumed to be 1. Generated sentences are
     written to standard output.





Version 5.9    The University of Arizona - 5/16/83              2






RSG(1)                Icon Program Library                 RSG(1)



   GGGGrrrraaaammmmmmmmaaaarrrr OOOOuuuuttttppppuuuutttt SSSSppppeeeecccciiiiffffiiiiccccaaaattttiiiioooonnnnssss
     A grammar output specification consists of a nonterminal
     symbol, followed by ---->>>>, followed by a file name. Such a
     specification causes the current definition of the nontermi-
     nal symbol to be written to the given file. If the file is
     omitted, standard output is assumed. If the nonterminal sym-
     bol is omitted, the entire grammar is written out. Thus,

          ->

     causes the entire grammar to be written to standard output.

   SSSSoooouuuurrrrcccceeee SSSSppppeeeecccciiiiffffiiiiccccaaaattttiiiioooonnnnssss
     A source specification consists of @@@@ followed by a file
     name.  Subsequent input is read from that file. When an end
     of file is encountered, input reverts to the previous file.
     Input files can be nested.

DDDDIIIIAAAAGGGGNNNNOOOOSSSSTTTTIIIICCCCSSSS
     Syntactically erroneous input lines are noted, but ignored.

     Specifications for a file that cannot be opened are noted
     and treated as erroneous.

     If an undefined nonterminal symbol is encountered during
     generation, an error message that identifies the undefined
     symbol is produced, followed by the partial sentence gen-
     erated to that point. Exceeding the limit of symbols remain-
     ing to be generated as specified by the ----llll option is handled
     in similarly.

CCCCAAAAVVVVEEEEAAAATTTTSSSS
     Generation may fail to terminate because of a loop in the
     rewriting rules or, more seriously, because of the progres-
     sive accumulation of nonterminal symbols. The latter problem
     can be identified by using the ----tttt option and controlled by
     using the ----llll option. The problem often can be circumvented
     by duplicating alternatives that lead to fewer rather than
     more nonterminal symbols. For example, changing

          <expr>::=<term>|<term>+<expr>

     to

          <expr>::=<term>|<term>|<term>+<expr>

     increases the probability of selecting <<<<tttteeeerrrrmmmm>>>> from 1/2 to
     2/3.  See the second reference listed below for a discussion
     of the general problem.

SSSSEEEEEEEE AAAALLLLSSSSOOOO
     Griswold, Ralph E. and Madge T. Griswold. _T_h_e _I_c_o_n



Version 5.9    The University of Arizona - 5/16/83              3






RSG(1)                Icon Program Library                 RSG(1)



     _P_r_o_g_r_a_m_m_i_n_g _L_a_n_g_u_a_g_e, Prentice-Hall, Inc., Englewood Cliffs,
     New Jersey, 1983.  pp. 211-219, 301-302.

     Wetherell, C. S. ``Probabilistic Languages: A Review and
     Some Open Questions'', _C_o_m_p_u_t_e_r _S_u_r_v_e_y_s, Vol. 12, No. 4
     (1980), pp. 361-379.

AAAAUUUUTTTTHHHHOOOORRRR
     Ralph E. Griswold














































Version 5.9    The University of Arizona - 5/16/83              4



