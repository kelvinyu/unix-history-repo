CC(1)			    UNIX Reference Manual			 CC(1)

NNAAMMEE
     cccc - C compiler

SSYYNNOOPPSSIISS
     cccc [option] _f_i_l_e ...

DDEESSCCRRIIPPTTIIOONN
     CCcc is the UNIX C compiler.  CCcc accepts several types of arguments:

     Arguments whose names end with `.c' are taken to be C source programs;
     they are compiled, and each object program is left on the file whose name
     is that of the source with `.o' substituted for `.c'.  The `.o' file is
     normally deleted, however, if a single C program is compiled and loaded
     all at one go.

     In the same way, arguments whose names end with `.s' are taken to be as-
     sembly source programs and are assembled, producing a `.o' file.

     The following options are interpreted by cccc.  See ld(1) for load-time op-
     tions.

     --cc    Suppress the loading phase of the compilation, and force an object
	   file to be produced even if only one program is compiled.

     --gg    Have the compiler produce additional symbol table information for
	   dbx(1) Also pass the --llgg flag to ld(1).

     --ggoo   Have the compiler produce additional symbol table information for
	   the obsolete debugger sdb(1).  Also pass the --llgg flag to ld(1).

     --ww    Suppress warning diagnostics.

     --pp    Arrange for the compiler to produce code which counts the number of
	   times each routine is called.  If loading takes place, replace the
	   standard startup routine by one which automatically calls moni-
	   tor(3) at the start and arranges to write out a _m_o_n._o_u_t file at
	   normal termination of execution of the object program.  An execu-
	   tion profile can then be generated by use of prof(1).

     --ppgg   Causes the compiler to produce counting code in the manner of --pp
	   but invokes a run-time recording mechanism that keeps more exten-
	   sive statistics and produces a _g_m_o_n._o_u_t file at normal termination.
	   Also, a profiling library is searched, in lieu of the standard C
	   library.  An execution profile can then be generated by  use of
	   gprof(1).

     --OO    Invoke an object-code improver.

     --RR    Passed on to as(1) making initialized variables shared and read-
	   only.

     --SS    Compile the named C programs, and leave the assembler-language out-
	   put on corresponding files suffixed `.s'.

     --MM    Run only the macro preprocessor on the named C programs, requesting
	   it to generate Makefile dependencies and send the result to the
	   standard output.

     --EE    Run only the macro preprocessor on the named C programs, and send
	   the result to the standard output.

     --CC    prevent the macro preprocessor from eliding comments.

     --oo_o_u_t_p_u_t
	   Name the final output file _o_u_t_p_u_t.  If this option is used the file
	   `a.out' will be left undisturbed.

     --DD_n_a_m_e=_d_e_f
     --DD_n_a_m_e
	   Define the _n_a_m_e to the preprocessor, as if by `#define'.  If no de-
	   finition is given, the name is defined as "1".


     --UU_n_a_m_e
	   Remove any initial definition of _n_a_m_e.

     --II_d_i_r
	   `#include' files whose names do not begin with `/' are always
	   sought first in the directory of the _f_i_l_e argument, then in direc-
	   tories named in --II options, then in directories on a standard list.

     --LL_d_i_r
	   Library archives are sought first in directories named in --LL op-
	   tions, then in directories on a standard list.

     --ff    Use an alternate compiler which does not convert expressions in-
	   volving only floats to double. This does not conform to the stan-
	   dard which states that all intermediate results should be converted
	   to double but does provide a speed improvement for programs which
	   don't require full double precision.  This option also makes
	   rreeggiisstteerr ffllooaatt variables work appropriately.

     --BB_p_a_t_h
	   Find substitute compiler passes in the named path with the suffixes
	   cpp, ccom and c2.

     --tt[p012]
	   Find only the designated compiler passes in the files whose names
	   are constructed by a --BB option.

     Other arguments are taken to be either loader option arguments, or C-
     compatible object programs, typically produced by an earlier cccc run, or
     perhaps libraries of C-compatible routines.  These programs, together
     with the results of any compilations specified, are loaded (in the order
     given) to produce an executable program with name _a._o_u_t.

FFIILLEESS
     _f_i_l_e._c		  input file
     _f_i_l_e._o		  object file
     _a._o_u_t		  loaded output
     _c_t_m?		  temporary
     /_u_s_r/_b_i_n/_c_p_p	  preprocessor
     /_u_s_r/_l_i_b_e_x_e_c/_c_c_o_m	  compiler
     /_u_s_r/_l_i_b_e_x_e_c/_c_c_o_m	  compiler for single precision floats
     /_u_s_r/_l_i_b_e_x_e_c/_c_2	  optional optimizer
     /_u_s_r/_l_i_b/_c_r_t_0._o	  runtime startoff
     /_u_s_r/_l_i_b/_m_c_r_t_0._o	  startoff for profiling
     /_u_s_r/_l_i_b/_g_c_r_t_0._o	  startoff for gprof-profiling
     /_u_s_r/_l_i_b/_l_i_b_c._a	  standard library, see intro(3)
     /_u_s_r/_l_i_b/_l_i_b_c__p._a	  profiling library, see intro(3)
     /_u_s_r/_i_n_c_l_u_d_e	  standard directory for `#include' files
     _m_o_n._o_u_t		  file produced for analysis by prof(1)
     _g_m_o_n._o_u_t		  file produced for analysis by gprof(1)


SSEEEE AALLSSOO
     B. W. Kernighan and D. M. Ritchie, _T_h_e _P_r_o_g_r_a_m_m_i_n_g _L_a_n_g_u_a_g_e, Prentice-
     Hall, 1978

     B. W. Kernighan, _P_r_o_g_r_a_m_m_i_n_g _i_n _C - _a _t_u_t_o_r_i_a_l

     D. M. Ritchie, _C _R_e_f_e_r_e_n_c_e _M_a_n_u_a_l

     monitor(3), prof(1), gprof(1), adb(1), ld(1), dbx(1), as(1)

DDIIAAGGNNOOSSTTIICCSS
     The diagnostics produced by C itself are intended to be self-explanatory.
     Occasional messages may be produced by the assembler or loader.

HHIISSTTOORRYY
     The cccc compiler was distributed with Version 6 AT&T UNIX.

BBUUGGSS
     The compiler currently ignores advice to put cchhaarr, uunnssiiggnneedd cchhaarr, sshhoorrtt,
     uunnssiiggnneedd sshhoorrtt, ffllooaatt, or ddoouubbllee variables in registers, except as noted
     above.  It previously produced poor, and in some cases incorrect, code
     for such declarations.
