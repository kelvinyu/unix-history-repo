MAKE(1)                     UNIX Reference Manual		       MAKE(1)

NNAAMMEE
     mmaakkee - maintain program dependencies

SSYYNNOOPPSSIISS
     mmaakkee [--eeiikknnqqrrssttvv] [--DD _v_a_r_i_a_b_l_e] [--dd _f_l_a_g_s] [--ff _m_a_k_e_f_i_l_e]
	  [--II _d_i_r_e_c_t_o_r_y] [--jj _m_a_x__j_o_b_s] [_v_a_r_i_a_b_l_e=_v_a_l_u_e] [_t_a_r_g_e_t ...]

DDEESSCCRRIIPPTTIIOONN
     MMaakkee is a program designed to simplify the maintenance of other programs.
     Its input is a ``makefile'' which specifies files that programs and other
     files are dependent upon.

     This manual page is intended as a reference document only.  For a more
     thorough description of mmaakkee and makefiles, please refer to _M_a_k_e -- _A
     _T_u_t_o_r_i_a_l.

     The options are as follows:

     --_v_a_r_i_a_b_l_e
	   Define _v_a_r_i_a_b_l_e to be 1, in the global context.

     --dd_f_l_a_g_s
	   Turn on debugging, and specify which portions of mmaakkee are to print
	   debugging information.  _F_l_a_g_s is one or more of the following:

	   AA	 Print all possible debugging information; equivalent to
		 specifying all of the debugging flags.

	   aa	 Print debugging information about archive searching and cach-
		 ing.

	   cc	 Print debugging information about conditional evaluation.

	   dd	 Print debugging information about directory searching and
		 caching.

	   gg11	 Print the input graph before making anything.

	   gg22	 Print the input graph after making everything, or before ex-
		 iting on error.

	   jj	 Print debugging information about running multiple shells.

	   mm	 Print debugging information about making targets, including
		 modification dates.

	   ss	 Print debugging information about suffix-transformation
		 rules.

	   tt	 Print debugging information about target list maintenance.

	   vv	 Print debugging information about variable assignment.

     --ff_m_a_k_e_f_i_l_e
	   Specify a makefile to read.	If no makefile is specified, the files
	   ``makefile'' and ``Makefile'' are searched for, in that order.  If
	   _m_a_k_e_f_i_l_e is ``-'', standard input is read.  Multiple makefile's may
	   be specified, and are read in the order specified.

     --II_d_i_r_e_c_t_o_r_y
	   Specify a directory in which to search for makefiles and included
	   makefiles.  The system makefile directory is automatically included
	   as part of this list.

     --ii    Ignore non-zero exit of shell commands in the makefile.  Equivalent
	   to specifying ``-'' before each command line in the makefile.

     --jj_m_a_x__j_o_b_s
	   Specify the maximum number of jobs that mmaakkee may have running at
	   any one time.

     --kk    Continue processing after errors are encountered, but only on those
	   targets that do not depend on the target whose creation caused the
	   error.

     --nn    Display the commands that would have been executed, but do not ac-
	   tually execute them.

     --qq    Do not execute any commands, but exit 0 if the specified targets
	   are up-to-date and 1, otherwise.

     --rr    Do not use the built-in rules specified in the system makefile.

     --ss    Do not echo any commands as they are executed.  Equivalent to
	   specifying ``@'' before each command line in the makefile.

     --tt    Rather than re-building a target as specified in the makefile,
	   create it or update its modification time to make it appear up-to-
	   date.

     _v_a_r_i_a_b_l_e=_v_a_l_u_e
	   Set the value of the variable _v_a_r_i_a_b_l_e to _v_a_l_u_e.

     There are six different types of lines in a makefile: file dependency
     specifications, shell commands, variable assignments, include statements,
     conditional directives, and comments.

     In general, lines may be continued from one line to the next by ending
     them with a backslash (``\'').  The trailing newline character and ini-
     tial whitespace on the following line are compressed into a single space.

FFIILLEE DDEEPPEENNDDEENNCCYY SSPPEECCIIFFIICCAATTIIOONNSS
     Dependency lines consist of one or more targets, an operator, and zero or
     more sources.  This creates a relationship where the targets ``depend''
     on the sources and are usually created from them.	The exact relationship
     between the target and the source is determined by the operator that
     separates them.  The three operators are as follows:

     ::	   A target is considered out-of-date if its modification time is less
	   than those of any of its sources.  Sources for a target accumulate
	   over dependency lines when this operator is used.  The target is
	   removed if mmaakkee is interrupted.

     !!	   Targets are always re-created, but not until all sources have been
	   examined and re-created as necessary.  Sources for a target accumu-
	   late over dependency lines when this operator is used.  The target
	   is removed if mmaakkee is interrupted.

     ::::    If no sources are specified, the target is always re-created.  Oth-
	   erwise, a target is considered out-of-date if any of its sources
	   has been modified more recently than the target.  Sources for a
	   target do not accumulate over dependency lines when this operator
	   is used.  The target will not be removed if mmaakkee is interrupted.

     Targets and sources may contain the shell wildcard values ``?'', ``*'',
     ``[]'' and ``{}''.  The values ``?'', ``*'' and ``[]'' may only be used
     as part of the final component of the target or source, and must be used
     to describe existing files.  The value ``{}'' need not necessarily be
     used to describe existing files.  Expansion is in directory order, not
     alphabetically as done in the shell.

SSHHEELLLL CCOOMMMMAANNDDSS
     Each target may have associated with it a series of shell commands,
     normally used to create the target.  Each of the commands in this script
     _m_u_s_t be preceded by a tab.  While any target may appear on a dependency
     line, only one of these dependencies may be followed by a creation
     script, unless the ``::'' operator is used.

     If the first or first two characters of the command line are ``@'' and/or
     ``-'', the command is treated specially.  A ``@'' causes the command not
     to be echoed before it is executed.  A ``-'' causes any non-zero exit
     status of the command line to be ignored.

VVAARRIIAABBLLEE AASSSSIIGGNNMMEENNTTSS
     Variables in make are much like variables in the shell, and, by tradi-
     tion, consist of all upper-case letters.  The five operators that can be
     used to assign values to variables are as follows:

     ==	   Assign the value to the variable.  Any previous value is overrid-
	   den.

     ++==    Append the value to the current value of the variable.

     ??==    Assign the value to the variable if it is not already defined.

     ::==    Assign with expansion, i.e. expand the value before assigning it to
	   the variable.  Normally, expansion is not done until the variable
	   is referenced.

     !!==    Expand the value and pass it to the shell for execution and assign
	   the result to the variable.	Any newlines in the result are re-
	   placed with spaces.

     Any white-space before the assigned _v_a_l_u_e is removed; if the value is be-
     ing appended, a single space is inserted between the previous contents of
     the variable and the appended value.

     Variables are expanded by surrounding the variable name with either curly
     braces (``{}'') or parenthesis (``()'') and preceding it with a dollar
     sign (``$'').  If the variable name contains only a single letter, the
     surrounding braces or parenthesis are not required.  This shorter form is
     not recommended.

     Variable substitution occurs at two distinct times, depending on where
     the variable is being used.  Variables in dependency lines are expanded
     as the line is read.  Variables in shell commands are expanded when the
     shell command is executed.

     The four different classes of variables (in order of increasing pre-
     cedence) are:

     environment variables
	   Variables defined as part of mmaakkee's environment.

     global variables
	   Variables defined in the makefile or in included makefiles.

     command line variables
	   Variables defined as part of the command line.

     local variables
	   Variables that are defined specific to a certain target.  The seven
	   local variables are as follows:

	   ._A_L_L_S_R_C
		 The list of all sources for this target; also known as ``>''.

	   ._A_R_C_H_I_V_E
		 The name of the archive file.

	   ._I_M_P_S_R_C
		 The name/path of the source from which the target is to be
		 transformed (the ``implied'' source); also known as ``<''.

	   ._M_E_M_B_E_R
		 The name of the archive member.

	   ._O_O_D_A_T_E
		 The list of sources for this target that were deemed out-of-
		 date; also known as ``?''.

	   ._P_R_E_F_I_X
		 The file prefix of the file, containing only the file por-
		 tion, no suffix or preceding directory components; also known
		 as ``*'.

	   ._T_A_R_G_E_T
		 The name of the target; also known as ``@''.

	   The shorter forms ``@'', ``?'', ``>'' and ``*'' are permitted for
	   backward compatibility with historical makefiles and are not recom-
	   mended.  The six variables ``@F'', ``@D'', ``<F'', ``<D'', ``*F''
	   and ``*D'' are permitted for compatibility with System V makefiles
	   and are not recommended.

	   Four of the local variables may be used in sources on dependency
	   lines because they expand to the proper value for each target on
	   the line.  These variables are ``.TARGET'', ``.PREFIX'', ``.AR-
	   CHIVE'', and ``.MEMBER''.

	   In addition, mmaakkee sets or knows about the following variables:

	   $	       A single dollar sign (``$''), i.e. ``$$'' expands to a
		       single dollar sign.

	   ._M_A_K_E       The name that mmaakkee was executed with (_a_r_g_v) [0]

	   ._C_U_R_D_I_R     A path to the directory where mmaakkee was executed.

	   _M_A_K_E_F_L_A_G_S   The environment variable ``MAKEFLAGS'' may contain any-
		       thing that may be specified on mmaakkee's command line.
		       Anything specified on mmaakkee's command line is appended
		       to the ``MAKEFLAGS'' variable which is then entered
		       into the environment for all programs which mmaakkee exe-
		       cutes.

	   Variable expansion may be modified to select or modify each word of
	   the variable (where a ``word'' is white-space delimited sequence of
	   characters).  The general format of a variable expansion is as fol-
	   lows:

		 {variable[:modifier[:...]]}

	   Each modifier begins with a colon and one of the following special
	   characters.	The colon may be escaped with a backslash (``\'').

     EE	   Replaces each word in the variable with its suffix.

     HH	   Replaces each word in the variable with everything but the last
	   component.

     MM_p_a_t_t_e_r_n
	   Select only those words that match the rest of the modifier.  The
	   standard shell wildcard characters (``*'', ``?'', and ``[]'') may
	   be used.  The wildcard characters may be escaped with a backslash
	   (``\'').

     NN_p_a_t_t_e_r_n
	   This is identical to ``M'', but selects all words which do not
	   match the rest of the modifier.

     RR	   Replaces each word in the variable with everything but its suffix.

     SS/_o_l_d__p_a_t_t_e_r_n/_n_e_w__p_a_t_t_e_r_n/[gg]
	   Modify the first occurrence of _o_l_d__p_a_t_t_e_r_n in each word to be re-
	   placed with _n_e_w__p_a_t_t_e_r_n.  If a ``g'' is appended to the last slash
	   of the pattern, all occurrences in each word are replaced.  If
	   _o_l_d__p_a_t_t_e_r_n begins with a carat (``^''), _o_l_d__p_a_t_t_e_r_n is anchored at
	   the beginning of each word.	If _o_l_d__p_a_t_t_e_r_n ends with a dollar sign
	   (``$''), it is anchored at the end of each word.  Inside
	   _n_e_w__s_t_r_i_n_g, an ampersand (``&'') is replaced by _o_l_d__p_a_t_t_e_r_n.  Any
	   character may be used as a delimiter for the parts of the modifier
	   string.  The anchoring, ampersand and delimiter characters may be
	   escaped with a backslash (``\'').

	   Variable expansion occurs in the normal fashion inside both
	   _o_l_d__s_t_r_i_n_g and _n_e_w__s_t_r_i_n_g with the single exception that a
	   backslash is used to prevent the expansion of a dollar sign
	   (``$''), not a preceding dollar sign as is usual.

     TT	   Replaces each word in the variable with its last component.

     _o_l_d__s_t_r_i_n_g=_n_e_w__s_t_r_i_n_g
	   This is the System V style variable substitution.  It must be the
	   last modifier specified.  _O_l_d__s_t_r_i_n_g is anchored at the end of each
	   word, so only suffixes or entire words may be replaced.

IINNCCLLUUDDEE SSTTAATTEEMMEENNTTSS AANNDD CCOONNDDIITTIIOONNAALLSS
     Makefile inclusion and conditional structures reminiscent of the C pro-
     gramming language are provided in mmaakkee.  All such structures are identi-
     fied by a line beginning with a single dot (``.'') character.  Files are
     included with either ``.include <file>'' or ``.include "file"''.  Vari-
     ables between the angle brackets or double quotes are expanded to form
     the file name.  If angle brackets are used, the included makefile is ex-
     pected to be in the system makefile directory.  If double quotes are
     used, the including makefile's directory and any directories specified
     using the --II option are searched before the system makefile directory.

     Conditional expressions are also preceded by a single dot as the first
     chraracter of a line.  The possible conditionals are as follows:

     ..uunnddeeff _v_a_r_i_a_b_l_e
	   Un-define the specified global variable.  Only global variables may
	   be un-defined.

     ..iiff [!] _e_x_p_r_e_s_s_i_o_n [_o_p_e_r_a_t_o_r _e_x_p_r_e_s_s_i_o_n ...]
	   Test the value of an expression.

     ..iiffddeeff [!]_v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e ...]
	   Test the value of an variable.

     ..iiffnnddeeff [!] _v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e ...]
	   Test the value of an variable.

     ..iiffmmaakkee [!] _t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t ...]
	   Test the the target being built.

     ..iiffnnmmaakkee [!]_t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t ...]
	   Test the target being built.
     ..eellssee
	   Reverse the sense of the last conditional.

     ..eelliiff [!] _e_x_p_r_e_s_s_i_o_n [_o_p_e_r_a_t_o_r _e_x_p_r_e_s_s_i_o_n ...]
	   A combination of ``.else'' followed by ``.if''.

     ..eelliiffddeeff [!] _v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e ...]
	   A combination of ``.else'' followed by ``.ifdef''.

     ..eelliiffnnddeeff [!] _v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e ...]
	   A combination of ``.else'' followed by ``.ifndef''.

     ..eelliiffmmaakkee [!] _t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t ...]
	   A combination of ``.else'' followed by ``.ifmake''.

     ..eelliiffnnmmaakkee [!] _t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t ...]
	   A combination of ``.else'' followed by ``.ifnmake''.

     ..eennddiiff
	   End the body of the conditional.

     The _o_p_e_r_a_t_o_r may be any one of the following:

     ||||        logical OR

     &&&&        Logical AND; of higher precedence than ``''.

     As in C, mmaakkee will only evaluate a conditional as far as is necessary to
     determine its value.  Parenthesis may be used to change the order of
     evaluation.  The boolean operator ``!'' may be used to logically negate
     an entire conditional.  It is of higher precendence than ``&&''.

     The value of _e_x_p_r_e_s_s_i_o_n may be any of the following:

     ddeeffiinneedd   Takes a variable name as an argument and evaluates to true if
	       the variable has been defined.

     mmaakkee      Takes a target name as an argument and evaluates to true if the
	       target was specified as part of mmaakkee's command line or was
	       declared the default target (either implicitly or explicitly,
	       see .MAIN) before the line containing the conditional.

     eemmppttyy     Takes a variable, with possible modifiers, and evalutes to true
	       if the expansion of the variable would result in an empty
	       string.

     eexxiissttss    Takes a file name as an argument and evaluates to true if the
	       file exists.  The file is searched for on the system search
	       path (see .PATH).

     ttaarrggeett    Takes a target name as an argument and evaluates to true if the
	       target has been defined.

     _E_x_p_r_e_s_s_i_o_n may also be an arithmetic or string comparison, with the
     left-hand side being a variable expansion.  The standard C relational
     operators are all supported, and the usual number/base conversion is per-
     formed.  Note, octal numbers are not supported.  If the righthand value
     of a ``=='' or ``!='' operator begins with a quotation mark (``"'') a
     string comparison is done between the expanded variable and the text
     between the quotation marks.  If no relational operator is given, it is
     assumed that the expanded variable is being compared against 0.

     When mmaakkee is evaluating one of these conditional expression, and it en-
     counters a word it doesn't recognize, either the ``make'' or ``defined''
     expression is applied to it, depending on the form of the conditional.
     If the form is ``.ifdef'' or ``.ifndef'', the ``defined'' expression is
     applied.  Similarly, if the form is ``.ifmake'' or ``.ifnmake'', the
     ``make'' expression is applied.

     If the conditional evaluates to true the parsing of the makefile contin-
     ues as before.  If it evaluates to false, the following lines are
     skipped.  In both cases this continues until a ``.else'' or ``.endif'' is
     found.

CCOOMMMMEENNTTSS
     Comments begin with a hash (``#'') character, anywhere but in a shell
     command line, and continue to the end of the line.

SSPPEECCIIAALL SSOOUURRCCEESS
     ..IIGGNNOORREE   Ignore any errors from the commands associated with this tar-
	       get, exactly as if they all were preceded by a dash (``-'').

     ..MMAAKKEE     Execute the commands associated with this target even if the -n
	       or -t options were specified.  Normally used to mark recursive
	       mmaakkee's.

     ..NNOOTTMMAAIINN
	       Normally mmaakkee selects the first target it encounters as the de-
	       fault target to be built if no target was specified.  This
	       source prevents this target from being selected.

     ..OOPPTTIIOONNAALL
	       If a target is marked with this attribute and mmaakkee can't figure
	       out how to create it, it will ignore this fact and assume the
	       file isn't needed or already exists.

     ..PPRREECCIIOOUUSS
	       When mmaakkee is interrupted, it removes any partially made tar-
	       gets.  This source prevents the target from being removed.

     ..SSIILLEENNTT   Do not echo any of the commands associated with this target,
	       exactly as if they all were preceded by an at sign (``@'').

     ..UUSSEE      Turn the target into mmaakkee's.  version of a macro.  When the
	       target is used as a source for another target, the other target
	       acquires the commands, sources, and attributes (except for
	       .USE) of the source.  If the target already has commands, the
	       .USE target's commands are appended to them.

SSPPEECCIIAALL TTAARRGGEETTSS
     Special targets may not be included with other targets, i.e. they must be
     the only target specified.

     ..BBEEGGIINN    Any command lines attached to this target are executed before
	       anything else is done.

     ..DDEEFFAAUULLTT
	       This is sort of a .USE rule for any target (that was used only
	       as a source) that mmaakkee can't figure out any other way to
	       create.	Only the shell script is used.	The .IMPSRC variable
	       of a target that inherits .DEFAULT's commands is set to the
	       target's own name.

     ..EENNDD      Any command lines attached to this target are executed after
	       everything else is done.

     ..IIGGNNOORREE   Mark each of the sources with the .IGNORE attribute.  If no
	       sources are specified, this is the equivalent of specifying the
	       -i option.

     ..IINNTTEERRRRUUPPTT
	       If mmaakkee is interrupted, the commands for this target will be
	       executed.

     ..MMAAIINN     If no target is specified when mmaakkee is invoked, this target
	       will be built.

     ..MMAAKKEEFFLLAAGGSS
	       This target provides a way to specify flags for mmaakkee when the
	       makefile is used.  The flags are as if typed to the shell,
	       though the -f option will have no effect.

     ..PPAATTHH     The sources are directories which are to be searched for files
	       not found in the current directory.  If no sources are speci-
	       fied, any previously specified directories are deleted.

     ..PPRREECCIIOOUUSS
	       Apply the .PRECIOUS attribute to any specified sources.	If no
	       sources are specified, the .PRECIOUS attribute is applied to
	       every target in the file.

     ..SSIILLEENNTT   Apply the .SILENT attribute to any specified sources.  If no
	       sources are specified, the .SILENT attribute is applied to
	       every command in the file.

     ..SSUUFFFFIIXXEESS
	       Each source specifies a suffix to mmaakkee.	If no sources are
	       specified, any previous specifies suffices are deleted.

EENNVVIIRROONNMMEENNTT
     MMaakkee utilizes the following environment variables, if they exist: MAKE,
     MAKEFLAGS and MAKEOBJDIR.

FFIILLEESS
     /_u_s_r/_s_h_a_r_e/_m_k   system makefile directory
     _s_y_s._m_k	     include system makefile
     _b_s_d._m_k	     BSD source tree template
     _s_u_b_d_i_r._m_k	     BSD source tree subdirectory template


SSEEEE AALLSSOO
HHIISSTTOORRYY
     MMaakkee appeared in Version 7 AT&T UNIX.  The mmaakkee this man page describes
     is derived from code contributed by Adam de Boor.
