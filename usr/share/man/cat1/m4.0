M4(1)                        BSD Reference Manual                        M4(1)

NNAAMMEE
     mm44 - macro language preprocessor for ratfor(1) and pascal(1)

SSYYNNOOPPSSIISS
     mm44 [options]

DDEESSCCRRIIPPTTIIOONN
     MM44 is a macro language preprocessor for Ratfor, Pascal, and similar lan-
     guages which do not have a built-in macro processing capability.  MM44
     reads standard input, and writes the results to the standard output.

     The options and their effects are as follows:

     --DD_n_a_m_e[_=_V_a_l]  Defines _n_a_m_e to _v_a_l or to null in the absence of _v_a_l.

     --UU_n_a_m_e        Undefines _n_a_m_e.

     The mm44 processor provides a kind of CC like syntax and some of the macro
     functions will be familiar:

     ddeeffiinnee   _d_e_f_i_n_e_(_n_a_m_e _[_, _v_a_l_]_) the second argument is installed as the
              value of the macro whose name is the first argument.  If there
              is no second argument, the value is null.  Each occurrence of $$_n
              in the replacement text, where _n is a digit, is replaced by the
              _n'th argument.  Argument 0 is the name of the macro; missing ar-
              guments are replaced by the null string.

     ddeeffnn     _d_e_f_n_(_n_a_m_e _[_, _n_a_m_e _._._._]_) returns the quoted definition of its ar-
              gument(s).  Useful in renaming macros.

     uunnddeeffiinnee
              _u_n_d_e_f_i_n_e_(_n_a_m_e _[_, _n_a_m_e _._._._]_) removes the definition of the
              macro(s) named.  If there is more than one definition for the
              named macro, (due to previous use of ppuusshhddeeff) all definitions
              are removed.

     ppuusshhddeeff  _p_u_s_h_d_e_f_(_n_a_m_e _[_, _v_a_l_]_) like ddeeffiinnee, but saves any previous defi-
              nition by stacking the current definition.

     ppooppddeeff   _p_o_p_d_e_f_(_n_a_m_e _[_, _n_a_m_e _._._._]_) removes current definition of its ar-
              gument(s), exposing the previous one if any.

     iiffddeeff    _i_f_d_e_f_(_n_a_m_e_, _i_f_-_d_e_f _[_, _i_f_n_o_t_-_d_e_f_]_) if the first argument is de-
              fined, the value is the second argument, otherwise the third.
              If there is no third argument, the value is null.  A word indi-
              cating the current operating system is predefined (e.g.  or

     sshhiifftt    _s_h_i_f_t_(_a_r_g_, _a_r_g_, _a_r_g_, _._._._) returns all but its first argument.
              The other arguments are quoted and pushed back with commas in
              between.  The quoting nullifies the effect of the extra scan
              that will subsequently be performed.

     cchhaannggeeqquuoottee
              _c_h_a_n_g_e_q_u_o_t_e_(_l_q_c_h_a_r_, _r_q_c_h_a_r_) change quote symbols to the first
              and second arguments.  With no arguments, the quotes are reset
              back to the default characters (i.e., `` and ))..

     cchhaannggeeccoomm
              _c_h_a_n_g_e_c_o_m_(_l_c_c_h_a_r_, _r_c_c_h_a_r_) change left and right comment markers
              from the default ## and nneewwlliinnee. With no arguments, the comment
              mechanism is reset back to the default characters.  With one ar-
              gument, the left marker becomes the argument and the right mark-
              er becomes newline.  With two arguments, both markers are af-

              fected.

     ddiivveerrtt   _d_i_v_e_r_t_(_d_i_v_n_u_m_) mm44 maintains 10 output streams, numbered 0-9.
              initially stream 0 is the current stream.  The ddiivveerrtt macro
              changes the current output stream to its (digit-string) argu-
              ment.  Output diverted to a stream other than 0 through 9 disap-
              pears into bitbucket.

     uunnddiivveerrtt
              _u_n_d_i_v_e_r_t_(_[_d_i_v_n_u_m _[_, _d_i_v_n_u_m _._._._]_) causes immediate output of text
              from diversions named as argument(s), or all diversions if no
              argument.  Text may be undiverted into another diversion.  Undi-
              verting discards the diverted text. At the end of input process-
              ing, MM44 forces an automatic uunnddiivveerrtt, unless mm44wwrraapp is defined.

     ddiivvnnuumm   _d_i_v_n_u_m_(_) returns the value of the current output stream.

     ddnnll      _d_n_l_(_) reads and discards characters up to and including the next
              newline.

     iiffeellssee   _i_f_e_l_s_e_(_a_r_g_, _a_r_g_, _i_f_-_s_a_m_e _[_, _i_f_n_o_t_-_s_a_m_e _| _a_r_g_, _a_r_g _._._._]_) has
              three or more arguments.  If the first argument is the same
              string as the second, then the value is the third argument.  If
              not, and if there are more than four arguments, the process is
              repeated with arguments 4, 5, 6 and 7.  Otherwise, the value is
              either the fourth string, or, if it is not present, null.

     iinnccrr     _i_n_c_r_(_n_u_m_) returns the value of its argument incremented by 1.
              The value of the argument is calculated by interpreting an ini-
              tial digit-string as a decimal number.

     ddeeccrr     _d_e_c_r_(_n_u_m_) returns the value of its argument decremented by 1.

     eevvaall     _e_v_a_l_(_e_x_p_r_e_s_s_i_o_n_) evaluates its argument as a constant expres-
              sion, using integer arithmetic.  The evaluation mechanism is
              very similar to that of cpp (#if expression).  The expression
              can involve only integer constants and character constants, pos-
              sibly connected by the binary operators

                    *     /     %     +     -     >>    <<    <     >
                          <=    >=    ==    !=    &     ^     &&

              or the unary operators ~~ !! or by the ternary operator ?? ::.
              Parentheses may be used for grouping. Octal numbers may be spec-
              ified as in C.

     lleenn      _l_e_n_(_s_t_r_i_n_g_) returns the number of characters in its argument.

     iinnddeexx    _i_n_d_e_x_(_s_e_a_r_c_h_-_s_t_r_i_n_g_, _s_t_r_i_n_g_) returns the position in its first
              argument where the second argument begins (zero origin), or -1
              if the second argument does not occur.

     ssuubbssttrr   _s_u_b_s_t_r_(_s_t_r_i_n_g_, _i_n_d_e_x _[_, _l_e_n_g_t_h_]_) returns a substring of its
              first argument.  The second argument is a zero origin number se-
              lecting the first character (internally treated as an expres-
              sion); the third argument indicates the length of the substring.
              A missing third argument is taken to be large enough to extend
              to the end of the first string.

     ttrraannsslliitt
              _t_r_a_n_s_l_i_t_(_s_o_u_r_c_e_, _f_r_o_m _[_, _t_o_]_) transliterates the characters in
              its first argument from the set given by the second argument to
              the set given by the third.  If the third argument is shorter
              than the second, all extra characters in the second argument are
              deleted from the first argument. If the third argument is miss-
              ing altogether, all characters in the second argument are delet-
              ed from the first argument.

     iinncclluuddee  _i_n_c_l_u_d_e_(_f_i_l_e_n_a_m_e_) returns the contents of the file named in the
              argument.

     ssiinncclluuddee
              _s_i_n_c_l_u_d_e_(_f_i_l_e_n_a_m_e_) is identical to iinncclluuddee, except that it says
              nothing if the file is inaccessible.

     ppaassttee    _p_a_s_t_e_(_f_i_l_e_n_a_m_e_) returns the contents of the file named in the
              argument without any processing, unlike iinncclluuddee.

     ssppaassttee   _s_p_a_s_t_e_(_f_i_l_e_n_a_m_e_) is identical to ppaassttee, except that it says
              nothing if the file is inaccessible.

     ssyyssccmmdd   _s_y_s_c_m_d_(_c_o_m_m_a_n_d_) executes the UNIX command given in the first ar-
              gument.  No value is returned.

     ssyyssvvaall   _s_y_s_v_a_l_(_) is the return code from the last call to ssyyssccmmdd.

     mmaakkeetteemmpp
              _m_a_k_e_t_e_m_p_(_s_t_r_i_n_g_) fills in a string of XXXXXX in its argument
              with the current process ID.

     mm44eexxiitt   _m_4_e_x_i_t_(_[_e_x_i_t_c_o_d_e_]_) causes immediate exit from mm44. Argument 1, if
              given, is the exit code; the default is 0.

     mm44wwrraapp   _m_4_w_r_a_p_(_m_4_-_m_a_c_r_o_-_o_r_-_b_u_i_l_t_-_i_n_) argument 1 will be pushed back at
              final EEOOFF;
                    example: m4wrap(`dumptable()').

     eerrrrpprriinntt
              _e_r_r_p_r_i_n_t_(_s_t_r _[_, _s_t_r_, _s_t_r_, _._._._]_) prints its argument(s) on
              stderr. If there is more than one argument, each argument is
              separated by a space during the output.

     dduummppddeeff  _d_u_m_p_d_e_f_(_[_n_a_m_e_, _n_a_m_e_, _._._._]_) prints current names and definitions,
              for the named items, or for all if no arguments are given.

AAUUTTHHOORR
     Ozan S. Yigit (oz)

BBUUGGSS
     A sufficiently complex MM44 macro set is about as readable as APL.

     All complex uses of MM44 require the ability to program in deep recursion.
     Previous lisp experience is recommended.

EEXXAAMMPPLLEESS
     The following macro program illustrates the type of things that can be
     done with MM44.

           changequote(<,>) define(HASHVAL,99) dnl
           define(hash,<expr(str(substr($1,1),0)%HASHVAL)>) dnl
           define(str,
                   <ifelse($1,",$2,
                   <str(substr(<$1>,1),<expr($2+'substr($1,0,1)')>)>)
                   >) dnl
           define(KEYWORD,<$1,hash($1),>) dnl
           define(TSTART,
           <struct prehash {
                   char *keyword;
                   int   hashval;
           } keytab[] = {>) dnl
           define(TEND,<   "",0
           };>)
           dnl

     Thus a keyword table containing the keyword string and its pre-calculated
     hash value may be generated thus:

           TSTART
                   KEYWORD("foo")
                   KEYWORD("bar")
                   KEYWORD("baz")
           TEND

     which will expand into:

           struct prehash {
                   char *keyword;
                   int   hashval;
           } keytab[] = {
                   "foo",27,
                   "bar",12,
                   "baz",20,
                   "",0
           };

     Presumably, such a table would speed up the installation of the keywords
     into a dynamic hash table. (Note that the above macro cannot be used with
     mm44, since eevvaall does not handle character constants.)

SSEEEE AALLSSOO
     cpp(1)

     B. W. Kernighan, and D. M. Ritchie., _T_h_e _M_4 _M_a_c_r_o _P_r_o_c_e_s_s_o_r.

HHIISSTTOORRYY
     An MM44 command appeared in Version 7 AT&T UNIX.  The MM44 command this page
     describes is derived from code contributed by Ozan S. Yigit.

AT&T 7th Edition                 June 6, 1993                                4
