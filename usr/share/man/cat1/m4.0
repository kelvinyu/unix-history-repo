M4(1)			    UNIX Reference Manual			 M4(1)

NNAAMMEE
     mm44 - macro language preprocessor for Ratfor and Pascal

SSYYNNOOPPSSIISS
     mm44 [options]

DDEESSCCRRIIPPTTIIOONN
     MM44 is a macro language preprocessor for Ratfor, Pascal, and similar
     languages which do not have a built-in macro processing capability.  M4
     reads standard input, and writes the results to the standard output.

     The options and their effects are as follows:

     --DD_n_a_m_e[=_V_a_l]   Defines _n_a_m_e to _v_a_l or to null in the absence of _v_a_l.

     --UU_n_a_m_e	    undefines _n_a_m_e.

     The mm44 processor provides a kind of CC like syntax and some of the macro
     functions will be familiar:

     ddeeffiinnee    _d_e_f_i_n_e(_n_a_m_e [, _v_a_l])
	       the second argument is installed as the value of the macro
	       whose name is the first argument. If there is no second argu-
	       ment, the value is null.  Each occurrence of $$_n in the
	       replacement text, where _n is a digit, is replaced by the _n'th
	       argument.  Argument 0 is the name of the macro; missing
	       arguments are replaced by the null string.

     ddeeffnn      _d_e_f_n(_n_a_m_e [, _n_a_m_e ...])
	       returns the quoted definition of its argument(s). Useful in
	       renaming macros.

     uunnddeeffiinnee
	       _u_n_d_e_f_i_n_e(_n_a_m_e [, _n_a_m_e ...])
	       removes the definition of the macro(s) named. If there is more
	       than one definition for the named macro, (due to previous use
	       of ppuusshhddeeff) all definitions are removed.

     ppuusshhddeeff   _p_u_s_h_d_e_f(_n_a_m_e [, _v_a_l])
	       like ddeeffiinnee, but saves any previous definition by stacking the
	       current definition.

     ppooppddeeff    _p_o_p_d_e_f(_n_a_m_e [, _n_a_m_e ...])
	       removes current definition of its argument(s), exposing the
	       previous one if any.

     iiffddeeff     _i_f_d_e_f(_n_a_m_e, _i_f-_d_e_f [, _i_f_n_o_t-_d_e_f])
	       if the first argument is defined, the value is the second argu-
	       ment, otherwise the third.  If there is no third argument, the
	       value is null.

     sshhiifftt     _s_h_i_f_t(_a_r_g, _a_r_g, _a_r_g, ...)
	       returns all but its first argument.  The other arguments are
	       quoted and pushed back with commas in between.  The quoting
	       nullifies the effect of the extra scan that will subsequently
	       be performed.

     cchhaannggeeqquuoottee
	       _c_h_a_n_g_e_q_u_o_t_e(_l_q_c_h_a_r, _r_q_c_h_a_r)
	       change quote symbols to the first and second arguments.	With
	       no arguments, the quotes are reset back to the default charac-
	       ters. (i.e., \*').

     cchhaannggeeccoomm
	       _c_h_a_n_g_e_c_o_m(_l_c_c_h_a_r, _r_c_c_h_a_r)
	       change left and right comment markers from the default ## and
	       nneewwlliinnee.  With no arguments, the comment mechanism is reset
	       back to the default characters.	With one argument, the left
	       marker becomes the argument and the right marker becomes new-
	       line.  With two arguments, both markers are affected.

     ddiivveerrtt    _d_i_v_e_r_t(_d_i_v_n_u_m)
	       mm44 maintains 10 output streams, numbered 0-9.  initially stream
	       0 is the current stream.  The ddiivveerrtt macro changes the current
	       output stream to its (digit-string) argument.  Output diverted
	       to a stream other than 0 through 9 disappears into bitbucket.

     uunnddiivveerrtt
	       _u_n_d_i_v_e_r_t([_d_i_v_n_u_m [, _d_i_v_n_u_m ...])
	       causes immediate output of text from diversions named as
	       argument(s), or all diversions if no argument.  Text may be un-
	       diverted into another diversion.  Undiverting discards the
	       diverted text. At the end of input processing, MM44 forces an au-
	       tomatic uunnddiivveerrtt, unless mm44wwrraapp is defined.

     ddiivvnnuumm    _d_i_v_n_u_m()
	       returns the value of the current output stream.

     ddnnll       _d_n_l()
	       reads and discards characters up to and including the next new-
	       line.

     iiffeellssee    _i_f_e_l_s_e(_a_r_g, _a_r_g, _i_f-_s_a_m_e [, _i_f_n_o_t-_s_a_m_e | _a_r_g, _a_r_g ...])
	       has three or more arguments.  If the first argument is the same
	       string as the second, then the value is the third argument.  If
	       not, and if there are more than four arguments, the process is
	       repeated with arguments 4, 5, 6 and 7.  Otherwise, the value is
	       either the fourth string, or, if it is not present, null.

     iinnccrr      _i_n_c_r(_n_u_m)
	       returns the value of its argument incremented by 1.  The value
	       of the argument is calculated by interpreting an initial
	       digit-string as a decimal number.

     ddeeccrr      _d_e_c_r(_n_u_m)
	       returns the value of its argument decremented by 1.

     eevvaall      _e_v_a_l(_e_x_p_r_e_s_s_i_o_n)
	       evaluates its argument as a constant expression, using integer
	       arithmetic.  The evaluation mechanism is very similar to that
	       of cpp (#if expression).  The expression can involve only in-
	       teger constants and character constants, possibly connected by
	       the binary operators
		     *	  /    %    +	 -    >>   <<	<    >
		     <=   >=   ==   !=	 &    ^         &&
	       or the unary operators ~~ !!  or by the ternary operator ?? ::.
	       Parentheses may be used for grouping. Octal numbers may be
	       specified as in C.

     lleenn       _l_e_n(_s_t_r_i_n_g)
	       returns the number of characters in its argument.

     iinnddeexx     _i_n_d_e_x(_s_e_a_r_c_h-_s_t_r_i_n_g, _s_t_r_i_n_g)
	       returns the position in its first argument where the second ar-
	       gument begins (zero origin), or -1 if the second argument does
	       not occur.

     ssuubbssttrr    _s_u_b_s_t_r(_s_t_r_i_n_g, _i_n_d_e_x [, _l_e_n_g_t_h])
	       returns a substring of its first argument.  The second argument
	       is a zero origin number selecting the first character (inter-
	       nally treated as an expression); the third argument indicates
	       the length of the substring.  A missing third argument is taken
	       to be large enough to extend to the end of the first string.

     ttrraannsslliitt
	       _t_r_a_n_s_l_i_t(_s_o_u_r_c_e, _f_r_o_m [, _t_o])
	       transliterates the characters in its first argument from the
	       set given by the second argument to the set given by the third.
	       If the third argument is shorter than the second, all extra
	       characters in the second argument are deleted from the first
	       argument. If the third argument is missing altogether, all
	       characters in the second argument are deleted from the first
	       argument.

     iinncclluuddee   _i_n_c_l_u_d_e(_f_i_l_e_n_a_m_e)
	       returns the contents of the file named in the argument.

     ssiinncclluuddee
	       _s_i_n_c_l_u_d_e(_f_i_l_e_n_a_m_e)
	       is identical to iinncclluuddee, except that it says nothing if the
	       file is inaccessible.

     ppaassttee     _p_a_s_t_e(_f_i_l_e_n_a_m_e)
	       returns the contents of the file named in the argument without
	       any processing, unlike iinncclluuddee.

     ssppaassttee    _s_p_a_s_t_e(_f_i_l_e_n_a_m_e)
	       is identical to ppaassttee, except that it says nothing if the file
	       is inaccessible.

     ssyyssccmmdd    _s_y_s_c_m_d(_c_o_m_m_a_n_d)
	       executes the UNIX command given in the first argument.  No
	       value is returned.

     ssyyssvvaall    _s_y_s_v_a_l()
	       is the return code from the last call to ssyyssccmmdd.

     mmaakkeetteemmpp
	       _m_a_k_e_t_e_m_p(_s_t_r_i_n_g)
	       fills in a string of XXXXXX in its argument with the current
	       process ID.

     mm44eexxiitt    _m_4_e_x_i_t([_e_x_i_t_c_o_d_e])
	       causes immediate exit from mm44.  Argument 1, if given, is the
	       exit code; the default is 0.

     mm44wwrraapp    _m_4_w_r_a_p(_m_4-_m_a_c_r_o-_o_r-_b_u_i_l_t-_i_n)
	       argument 1 will be pushed back at final EEOOFF;
		     example: m4wrap(`dumptable()').

     eerrrrpprriinntt
	       _e_r_r_p_r_i_n_t(_s_t_r [, _s_t_r, _s_t_r, ...])
	       prints its argument(s) on stderr. If there is more than one ar-
	       gument, each argument is separated by a space during the out-
	       put.

     dduummppddeeff   _d_u_m_p_d_e_f([_n_a_m_e, _n_a_m_e, ...])
	       prints current names and definitions, for the named items, or
	       for all if no arguments are given.

AAUUTTHHOORR
     Ozan S. Yigit (oz)

BBUUGGSS
     A sufficiently complex M4 macro set is about as readable as _A_P_L.


     All complex uses of M4 require the ability to program in deep recursion.
     Previous lisp experience is recommended.

EEXXAAMMPPLLEESS
     The following macro program illustrates the type of things that can be
     done with M4.

	   changequote(<,>) define(HASHVAL,99) dnl
	   define(hash,<expr(str(substr($1,1),0)%HASHVAL)>) dnl
	   define(str,
		<ifelse($1,",$2,
		<str(substr(<$1>,1),<expr($2+'substr($1,0,1)')>)>)
		>) dnl
	   define(KEYWORD,<$1,hash($1),>) dnl
	   define(TSTART,
	   <struct prehash {
		char *keyword;
		int   hashval;
	   } keytab[] = {>) dnl
	   define(TEND,<  "",0
	   };>)
	   dnl

     Thus a keyword table containing the keyword string and its pre-calculated
     hash value may be generated thus:

	   TSTART
		KEYWORD("foo")
		KEYWORD("bar")
		KEYWORD("baz")
	   TEND

     which will expand into:

	   struct prehash {
		char *keyword;
		int   hashval;
	   } keytab[] = {
		"foo",27,
		"bar",12,
		"baz",20,
		"",0
	   };

     Presumably, such a table would speed up the installation of the keywords
     into a dynamic hash table. (Note that the above macro cannot be used with
     mm44, since eevvaall does not handle character constants.)

SSEEEE AALLSSOO
     cc(1), cpp(1).  m4(1)
     _T_h_e _M_4 _M_a_c_r_o _P_r_o_c_e_s_s_o_r by B. W. Kernighan and D. M. Ritchie.

HHIISSTTOORRYY
     MM44 command appeared in Version 7 AT&T UNIX.  The mm44 command this page
     describes is derived from code contributed by Ozan S. Yigit.
