


MT(4)			      1990			    MT(4)



NNAAMMEE
     mt - UNIX magtape interface

DDEESSCCRRIIPPTTIIOONN
     The files _c_y_0_s, ..., _c_y_1_5_s refer to the UNIX magtape drives,
     which may be on the VERSABUS using the CIPHER tapemaster
     formatter _c_y(4), The following description applies to any of
     the transport/controller pairs.  The files _c_y_0_s, ..., _c_y_1_5_s
     are read/written in 25ips, The density (1600 bpi or 3200
     bpi) is selected by a switch on the drive.  The files _c_y_0_s,
     ..., _c_y_7_s are rewound when closed.  The non-rewinding files
     are named _n_c_y[_0-_7] respectively.

     For compatibility, the [_n]_c_y*_s files are linked to appropri-
     ate [_n]_m_t* files.

     When a file open for writing is closed, two file-marks are
     written.  If the tape is not to be rewound it is positioned
     with the head between the two file-marks.

     A standard tape consists of a series of 1024 byte records
     terminated by two file-marks.  To the extent possible, the
     system makes it possible, if inefficient, to treat the tape
     like any other file.  Seeks have their usual meaning and it
     is possible to read or write a byte at a time.

     The _m_t files discussed above are useful when it is desired
     to access the tape in a way compatible with ordinary files.
     When foreign tapes are to be dealt with, and especially when
     long records are to be read or written, the `raw' interface
     is appropriate.  Writing in very small units is inadvisable,
     however, because it tends to create monstrous record gaps.
     The associated files are named _r_c_y_0_s, ..., _r_c_y_1_5_s, but the
     same minor-device considerations as for the regular files
     still apply, as well as the appropriate _r[_n]_m_t* links.

     A number of other ioctl operations are available on raw mag-
     netic tape.  The following definitions are from
     <sys/mtio.h>:

     /*
      * Structures and definitions for mag tape io control commands
      */

     /* mag tape io control commands */
     #define MTIOCTOP	 (('m'<<8)|1)	/* do a mag tape op */
     #define MTIOCGET	 (('m'<<8)|2)	/* get mag tape status */

     /* structure for MTIOCTOP - mag tape op command */
     struct    mtop {
	  short     mt_op;	   /* operations defined below */
	  daddr_t   mt_count; /* how many of them */



Printed 7/27/90               June				1






MT(4)			      1990			    MT(4)



     };

     /* operations */
     #define MTWEOF 0	 /* write an end-of-file record */
     #define MTFSF  1	 /* forward space file */
     #define MTBSF  2	 /* backward space file */
     #define MTFSR  3	 /* forward space record */
     #define MTBSR  4	 /* backward space record */
     #define MTREW  5	 /* rewind */
     #define MTOFFL 6	 /* rewind and put the drive offline */
     #define MTNOP  7	 /* no operation, sets status only */

     /* structure for MTIOCGET - mag tape get status command */

     struct    mtget	 {
	  short     mt_type;	   /* type of magtape device */
     /* the following two registers are grossly device dependent */
	  short     mt_dsreg;	   /* ``drive status'' register */
	  short     mt_erreg;	   /* ``error'' register */
     /* end device-dependent registers */
	  short     mt_resid;	   /* residual count */
     /* the following two are not yet implemented */
	  daddr_t mt_fileno;  /* file number of current position */
	  daddr_t mt_blkno;   /* block number of current position */
     /* end not yet implemented */
     };

     /*
      * Constants for mt_type byte
      */
     #define MT_ISTS	      01
     #define MT_ISHT	      02
     #define MT_ISTM	      03

     Each _r_e_a_d or _w_r_i_t_e call reads or writes the next record on
     the tape.	In the write case the record has the same length
     as the buffer given.  During a read, the record size is
     passed back as the number of bytes read, provided it is no
     greater than the buffer size; if the record is long, an
     error is indicated.  In raw tape I/O seeks are ignored.  A
     zero byte count is returned when a tape mark is read, but
     another read will fetch the first record of the new tape
     file.

FFIILLEESS
     /dev/mt?, /dev/rmt?

SSEEEE AALLSSOO
     mt(1), tar(1), cy(4)

BBUUGGSS

Printed 7/27/90               June				2






