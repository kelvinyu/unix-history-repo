AWK(1)                       BSD Reference Manual                       AWK(1)

NNAAMMEE
     aawwkk - pattern scanning and processing language

SSYYNNOOPPSSIISS
     aawwkk [--FF _c] [--ff _p_r_o_g___f_i_l_e] [_p_r_o_g] _f_i_l_e _._._.

DDEESSCCRRIIPPTTIIOONN
     AAwwkk scans each input _f_i_l_e for lines that match any of a set of patterns
     specified in _p_r_o_g. With each pattern in _p_r_o_g there can be an associated
     action that will be performed when a line of a _f_i_l_e matches the pattern.
     The set of patterns may appear literally as _p_r_o_g or in a file specified
     as --ff _f_i_l_e.

     --FF_c   Specify a field separator of _c.

     --ff    Use _p_r_o_g___f_i_l_e as an input _p_r_o_g (an awk script).

     Files are read in order; if there are no files, the standard input is
     read.  The file name `--' means the standard input.  Each line is matched
     against the pattern portion of every pattern-action statement; the asso-
     ciated action is performed for each matched pattern.

     An input line is made up of fields separated by white space.  (This de-
     fault can be changed by using FS, _v_i_d_e _i_n_f_r_a.) The fields are denoted $1,
     $2, ... ; $0 refers to the entire line.

     A pattern-action statement has the form

           pattern {action}

     A missing { action } means print the line; a missing pattern always
     matches.

     An action is a sequence of statements.  A statement can be one of the
     following:

           if ( conditional ) statement [ else statement ]
           while ( conditional ) statement
           for ( expression ; conditional ; expression ) statement
           break
           continue
           { [ statement ] ... }
           variable = expression
           print [ expression-list ] [ >expression ]
           printf format [, expression-list ] [ >expression ]
           next # skip remaining patterns on this input line
           exit # skip the rest of the input

     Statements are terminated by semicolons, newlines or right braces.  An
     empty expression-list stands for the whole line.  Expressions take on
     string or numeric values as appropriate, and are built using the opera-
     tors +, -, *, /, %,  and concatenation (indicated by a blank).  The C op-
     erators ++, --, +=, -=, *=, /=, and %= are also available in expressions.
     Variables may be scalars, array elements (denoted or fields.  Variables
     are initialized to the null string.  Array subscripts may be any string,
     not necessarily numeric; this allows for a form of associative memory.
     String constants are quoted "...".

     The pprriinntt statement prints its arguments on the standard output (or on a
     file if _>_f_i_l_e is present), separated by the current output field separa-
     tor, and terminated by the output record separator.  The pprriinnttff statement
     formats its expression list according to the format (see printf(3)).


     The built-in function lleennggtthh returns the length of its argument taken as
     a string, or of the whole line if no argument.  There are also built-in
     functions eexxpp, lloogg, ssqqrrtt and iinntt. The last truncates its argument to an
     integer.  The function ssuubbssttrr(_s, _m, _n) returns the _n- character substring
     of _s that begins at position _m. The sspprriinnttff(_f_m_t, _e_x_p_r, _e_x_p_r, _._._.) func-
     tion formats the expressions according to the printf(3) format given by
     _f_m_t and returns the resulting string.

     Patterns are arbitrary Boolean combinations (!, ||, &&, and parentheses)
     of regular expressions and relational expressions.  Regular expressions
     must be surrounded by slashes and are as in egrep(1).  Isolated regular
     expressions in a pattern apply to the entire line.  Regular expressions
     may also occur in relational expressions.

     A pattern may consist of two patterns separated by a comma; in this case,
     the action is performed for all lines between an occurrence of the first
     pattern and the next occurrence of the second.

     A relational expression is one of the following:

           expression matchop regular-expression
           expression relop expression

     where a relop is any of the six relational operators in C, and a matchop
     is either ~ (for contains) or !~ (for does not contain).  A conditional
     is an arithmetic expression, a relational expression, or a Boolean combi-
     nation of these.

     The special patterns BEGIN and END may be used to capture control before
     the first input line is read and after the last.  BEGIN must be the first
     pattern, END the last.

     A single character _c may be used to separate the fields by starting the
     program with

           BEGIN { FS = c }

     or by using the --FF_c option.

     Other variable names with special meanings include

     NF         the number of fields in the current record;
     NR         the ordinal number of the current record;
     FILENAME   the name of the current input file;
     OFS        the output field separator (default blank);
     ORS        the output record separator (default newline);
     OFMT       the output format for numbers (default "%.6g").

EEXXAAMMPPLLEESS
     Print lines longer than 72 characters:

           length > 72

     Print first two fields in opposite order:

           { print $2, $1 }

     Add up first column, print sum and average:

                   { s += $1 }
           END     { print "sum is", s, " average is", s/NR }

     Print fields in reverse order:


           { for (i = NF; i > 0; --i) {0 0{1 1{2

     Print all lines between start/stop pairs:

           /start/, /stop/

     Print all lines whose first field is different from previous one:

           $1 != prev { print; prev = $1 }

SSEEEE AALLSSOO
     lex(1),  sed(1)

     A. V. Aho, B. W. Kernighan, and P. J. Weinberger, _A_w_k _- _a _p_a_t_t_e_r_n
     _s_c_a_n_n_i_n_g _a_n_d _p_r_o_c_e_s_s_i_n_g _l_a_n_g_u_a_g_e.

HHIISSTTOORRYY
     The version of aawwkk this man page describes appeared in Version Version 7
     AT&T UNIX.  A much improved and true to the book version of aawwkk appeared
     in the AT&T Toolchest in the late 1980's.  The version of aawwkk this manual
     page describes is a derivative of the original and not the Toolchest ver-
     sion.

BBUUGGSS
     There are no explicit conversions between numbers and strings.  To force
     an expression to be treated as a number add 0 to it; to force it to be
     treated as a string concatenate "" (an empty string) to it.

AT&T 7th Edition                August 7, 1991                               3
