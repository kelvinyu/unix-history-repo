


WAIT(2)                       1989			  WAIT(2)



NNAAMMEE
     wait, waitpid, wait4, wait3 - wait for process to terminate

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
     ##iinncclluuddee <<ssyyss//wwaaiitt..hh>>

     ppiidd == wwaaiitt((ssttaattuuss))
     ppiidd__tt ppiidd;;
     iinntt **ssttaattuuss;;

     ppiidd == wwaaiittppiidd((wwppiidd,, ssttaattuuss,, ooppttiioonnss))
     ppiidd__tt ppiidd,, wwppiidd;;
     iinntt **ssttaattuuss;;
     iinntt ooppttiioonnss;;

     ##iinncclluuddee <<ssyyss//ttiimmee..hh>>
     ##iinncclluuddee <<ssyyss//rreessoouurrccee..hh>>

     ppiidd == wwaaiitt44((wwppiidd,, ssttaattuuss,, ooppttiioonnss,, rruussaaggee))
     ppiidd__tt ppiidd,, wwppiidd;;
     iinntt **ssttaattuuss;;
     iinntt ooppttiioonnss;;
     ssttrruucctt rruussaaggee **rruussaaggee;;

     ppiidd == wwaaiitt33((ssttaattuuss,, ooppttiioonnss,, rruussaaggee))
     ppiidd__tt ppiidd;;
     iinntt **ssttaattuuss;;
     iinntt ooppttiioonnss;;
     ssttrruucctt rruussaaggee **rruussaaggee;;

DDEESSCCRRIIPPTTIIOONN
     _W_a_i_t causes its caller to delay until a signal is received
     or one of its child processes terminates.	If any child has
     died since the last _w_a_i_t, return is immediate, returning the
     process id and exit status of one of the terminated chil-
     dren.  If there are no children, return is immediate with
     the value -1 returned.

     On return from a successful _w_a_i_t call, the _s_t_a_t_u_s area con-
     tains termination information about the process that exited
     as defined below.

     The _w_a_i_t_4 call provides a more general interface for pro-
     grams that wish to wait for certain child processes, that
     wish resource utilization statistics accummulated by child
     processes, or that require options.  The other wait func-
     tions are implemented using _w_a_i_t_4.

     The _w_p_i_d parameter specifies the set of child processes for
     which to wait.  If _w_p_i_d is -1, the call waits for any child
     process.  If _w_p_i_d is 0, the call waits for any child process



Printed 7/27/90              August				1






WAIT(2)                       1989			  WAIT(2)



     in the process group of the caller.  If _w_p_i_d is greater than
     zero, the call waits for the process with process id _w_p_i_d.
     If _w_p_i_d is less than -1, the call waits for any process
     whose process group id equals the absolute value of _w_p_i_d.

     The _s_t_a_t_u_s parameter is defined below.  The _o_p_t_i_o_n_s parame-
     ter contains the bitwise OR of any of the following options.
     The WNOHANG option is used to indicate that the call should
     not block if there are no processes that wish to report
     status.  If the WUNTRACED option is set, children of the
     current process that are stopped due to a SIGTTIN, SIGTTOU,
     SIGTSTP, or SIGSTOP signal also have their status reported.

     If _r_u_s_a_g_e is non-zero, a summary of the resources used by
     the terminated process and all its children is returned
     (this information is currently not available for stopped
     processes).

     When the WNOHANG option is specified and no processes wish
     to report status, _w_a_i_t_4 returns a _p_i_d of 0.

     The _w_a_i_t_p_i_d call is identical to _w_a_i_t_4 with an _r_u_s_a_g_e value
     of zero.  The older _w_a_i_t_3 call is the same as _w_a_i_t_4 with a
     _w_p_i_d value of -1.

     The following macros may be used to test the manner of exit
     of the process.  One of the first three macros will evaluate
     to a non-zero (true) value:

     WIFEXITED(status)
	  True if the process terminated normally by a call to
	  __e_x_i_t(2) or _e_x_i_t(2).

     WIFSIGNALED(status)
	  True if the process terminated due to receipt of a sig-
	  nal.

     WIFSTOPPED(status)
	  True if the process has not terminated, but has stopped
	  and can be restarted.  This macro can be true only if
	  the wait call specified the WUNTRACED option or if the
	  child process is being traced (see _p_t_r_a_c_e(2)).

     Depending on the values of those macros, the following mac-
     ros produce the remaining status information about the child
     process:

     WEXITSTATUS(status)
	  If WIFEXITED(status) is true, evaluates to the low-
	  order 8 bits of the argument passed to __e_x_i_t(2) or
	  _e_x_i_t(2) by the child.




Printed 7/27/90              August				2






WAIT(2)                       1989			  WAIT(2)



     WTERMSIG(status)
	  If WIFSIGNALED(status) is true, evaluates to the number
	  of the signal that caused the termination of the pro-
	  cess.

     WCOREDUMP(status)
	  If WIFSIGNALED(status) is true, evaluates as true if
	  the termination of the process was accompanied by the
	  creation of a core file containing an image of the pro-
	  cess when the signal was received.

     WSTOPSIG(status)
	  If WIFSTOPPED(status) is true, evaluates to the number
	  of the signal that caused the process to stop.

NNOOTTEESS
     See _s_i_g_a_c_t_i_o_n(2) for a list of termination signals.  A
     status of 0 indicates normal termination.

     If the parent process terminates without waiting on its
     children, the initialization process (process ID = 1) inher-
     its the children.

     If a signal is caught while any of the _w_a_i_t calls is pend-
     ing, the call may be interrupted or restarted when the
     signal-catching routine returns, depending on the options in
     effect for the signal; see _i_n_t_r_o(2), System call restart.

RREETTUURRNN VVAALLUUEE
     If _w_a_i_t returns due to a stopped or terminated child pro-
     cess, the process ID of the child is returned to the calling
     process.  Otherwise, a value of -1 is returned and _e_r_r_n_o is
     set to indicate the error.

     If _w_a_i_t_4, _w_a_i_t_3 or _w_a_i_t_p_i_d returns due to a stopped or ter-
     minated child process, the process ID of the child is
     returned to the calling process.  If there are no children
     not previously awaited, -1 is returned with _e_r_r_n_o set to
     [ECHILD].	Otherwise, if WNOHANG is specified and there are
     no stopped or exited children, 0 is returned.  If an error
     is detected or a caught signal aborts the call, a value of
     -1 is returned and _e_r_r_n_o is set to indicate the error.

EERRRROORRSS
     _W_a_i_t will fail and return immediately if one or more of the
     following are true:

     [ECHILD]	    The calling process has no existing
		    unwaited-for child processes.

     [EFAULT]	    The _s_t_a_t_u_s or _r_u_s_a_g_e arguments point to an
		    illegal address.  (May not be detected before



Printed 7/27/90              August				3






WAIT(2)                       1989			  WAIT(2)



		    exit of a child process.)

     [EINTR]	    The call was interrupted by a caught signal,
		    or the signal did not have the SA_RESTART
		    flag set.

SSTTAANNDDAARRDDSS
     The _w_a_i_t and _w_a_i_t_p_i_d functions are defined by POSIX; _w_a_i_t_4
     and _w_a_i_t_3 are not specified by POSIX.  The WCOREDUMP macro
     and the ability to restart a pending _w_a_i_t call are exten-
     sions to the POSIX interface.

SSEEEE AALLSSOO
     exit(2), sigaction(2)









































Printed 7/27/90              August				4



