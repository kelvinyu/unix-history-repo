


SIGACTION(2)		      1990		     SIGACTION(2)



NNAAMMEE
     sigaction - software signal facilities

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssiiggnnaall..hh>>

     ssttrruucctt ssiiggaaccttiioonn {{
	vvooiidd   ((**ssaa__hhaannddlleerr))(());;
	ssiiggsseett__tt    ssaa__mmaasskk;;
	iinntt    ssaa__ffllaaggss;;
     }};;

     ssiiggaaccttiioonn((ssiigg,, aacctt,, ooaacctt))
     iinntt ssiigg;;
     ssttrruucctt ssiiggaaccttiioonn **aacctt,, **ooaacctt;;

DDEESSCCRRIIPPTTIIOONN
     The system defines a set of signals that may be delivered to
     a process.  Signal delivery resembles the occurence of a
     hardware interrupt: the signal is blocked from further
     occurrence, the current process context is saved, and a new
     one is built.  A process may specify a _h_a_n_d_l_e_r to which a
     signal is delivered, or specify that a signal is to be
     _i_g_n_o_r_e_d.  A process may also specify that a default action
     is to be taken by the system when a signal occurs.  A signal
     may also be _b_l_o_c_k_e_d, in which case its delivery is postponed
     until it is _u_n_b_l_o_c_k_e_d.  The action to be taken on delivery
     is determined at the time of delivery.  Normally, signal
     handlers execute on the current stack of the process.  This
     may be changed, on a per-handler basis, so that signals are
     taken on a special _s_i_g_n_a_l _s_t_a_c_k.

     Signal routines execute with the signal that caused their
     invocation _b_l_o_c_k_e_d, but other signals may yet occur.  A glo-
     bal _s_i_g_n_a_l _m_a_s_k defines the set of signals currently blocked
     from delivery to a process.  The signal mask for a process
     is initialized from that of its parent (normally empty).  It
     may be changed with a _s_i_g_p_r_o_c_m_a_s_k(2) call, or when a signal
     is delivered to the process.

     When a signal condition arises for a process, the signal is
     added to a set of signals pending for the process.  If the
     signal is not currently _b_l_o_c_k_e_d by the process then it is
     delivered to the process.	Signals may be delivered any time
     a process enters the operating system (e.g., during a system
     call, page fault or trap, or clock interrupt).  If multiple
     signals are ready to be delivered at the same time, any sig-
     nals that could be caused by traps are delivered first.
     Additional signals may be processed at the same time, with
     each appearing to interrupt the handlers for the previous
     signals before their first instructions.  The set of pending
     signals is returned by the _s_i_g_p_e_n_d_i_n_g(2) function.  When a



Printed 7/27/90               July				1






SIGACTION(2)		      1990		     SIGACTION(2)



     caught signal is delivered, the current state of the process
     is saved, a new signal mask is calculated (as described
     below), and the signal handler is invoked.  The call to the
     handler is arranged so that if the signal handling routine
     returns normally the process will resume execution in the
     context from before the signal's delivery.  If the process
     wishes to resume in a different context, then it must
     arrange to restore the previous context itself.

     When a signal is delivered to a process a new signal mask is
     installed for the duration of the process' signal handler
     (or until a _s_i_g_p_r_o_c_m_a_s_k call is made).  This mask is formed
     by taking the union of the current signal mask set, the sig-
     nal to be delivered, and the signal mask associated with the
     handler to be invoked.

     _S_i_g_a_c_t_i_o_n assigns an action for a specific signal.  If _a_c_t
     is non-zero, it specifies an action (SIG_DFL, SIG_IGN, or a
     handler routine) and mask to be used when delivering the
     specified signal.	If _o_a_c_t is non-zero, the previous han-
     dling information for the signal is returned to the user.

     Once a signal handler is installed, it remains installed
     until another _s_i_g_a_c_t_i_o_n call is made, or an _e_x_e_c_v_e(2) is
     performed.  The default action for a signal may be rein-
     stated by setting _s_a__h_a_n_d_l_e_r to SIG_DFL.  The default
     actions are termination, possibly with a core image; no
     action; stopping the process; or continuing the process.
     See the signal list below for each signal's default action.
     If _s_a__h_a_n_d_l_e_r is SIG_IGN the signal is subsequently ignored,
     and pending instances of the signal are discarded.

     Options may be specified by setting _s_a__f_l_a_g_s.  If the
     SA_NOCLDSTOP bit is set when installing a catching function
     for the SIGCHLD signal, the SIGCHLD signal will be generated
     only when a child process exits, not when a child process
     stops.  Further, if the SA_ONSTACK bit is set in _s_a__f_l_a_g_s,
     the system will deliver the signal to the process on a _s_i_g_-
     _n_a_l _s_t_a_c_k, specified with _s_i_g_s_t_a_c_k(2).

     If a caught signal occurs during certain system calls, the
     call may be forced to terminate prematurely with an EINTR
     error return, or the call may be restarted.  Restart of
     pending calls is requested by setting the SA_RESTART bit in
     _s_a__f_l_a_g_s. The affected system calls include _r_e_a_d(2),
     _w_r_i_t_e(2), _s_e_n_d_t_o(2), _r_e_c_v_f_r_o_m(2), _s_e_n_d_m_s_g(2) and _r_e_c_v_m_s_g(2)
     on a communications channel or a slow device (such as a ter-
     minal, but not a regular file) and during a _w_a_i_t(2) or
     _i_o_c_t_l(2).	However, calls that have already committed are
     not restarted, but instead return a partial success (for
     example, a short read count).




Printed 7/27/90               July				2






SIGACTION(2)		      1990		     SIGACTION(2)



     After a _f_o_r_k(2) or _v_f_o_r_k(2) the child inherits all signals,
     the signal mask, the signal stack, and the restart/interrupt
     flags.

     _E_x_e_c_v_e(2) resets all caught signals to default action and
     resets all signals to be caught on the user stack.  Ignored
     signals remain ignored; the signal mask remains the same;
     signals that restart pending system calls continue to do so.

     The following is a list of all signals with names as in the
     include file <_s_i_g_n_a_l._h>:

	  SIGHUP      1                                                                       hangup
	  SIGINT      2                                                                       interrupt
	  SIGQUIT     3*								      quit
	  SIGILL      4*								      illegal instruction
	  SIGTRAP     5*'|='								      trace trap
	  SIGABRT     6*								      _a_b_o_r_t() call (formerly SIGIOT)
	  SIGEMT      7*'|='								      EMT instruction
	  SIGFPE      8*								      floating point exception
	  SIGKILL     9                                                                       kill (cannot be caught, blocked, or ignored)
	  SIGBUS      10*'|='								      bus error
	  SIGSEGV     11*								      segmentation violation
	  SIGSYS      12*'|='								      bad argument to system call
	  SIGPIPE     13								      write on a pipe with no one to read it
	  SIGALRM     14								      alarm clock
	  SIGTERM     15								      software termination signal
	  SIGURG      16@'|='								      urgent condition present on socket
	  SIGSTOP     17'|+'								      stop (cannot be caught, blocked, or ignored)
	  SIGTSTP     18'|+'								      stop signal generated from keyboard
	  SIGCONT     19@								      continue after stop
	  SIGCHLD     20@								      child status has changed
	  SIGTTIN     21'|+'								      background read attempted from control terminal
	  SIGTTOU     22'|+'								      background write attempted to control terminal
	  SIGIO       23@'|='								      i/o is possible on a descriptor (see _f_c_n_t_l(2))
	  SIGXCPU     24'|='								      cpu time limit exceeded (see _s_e_t_r_l_i_m_i_t(2))
	  SIGXFSZ     25'|='								      file size limit exceeded (see _s_e_t_r_l_i_m_i_t(2))
	  SIGVTALRM   26'|='								      virtual time alarm (see _s_e_t_i_t_i_m_e_r(2))
	  SIGPROF     27'|='								      profiling timer alarm (see _s_e_t_i_t_i_m_e_r(2))
	  SIGWINCH    28@'|='								      window size change
	  SIGINFO     29@'|='								      status request from keyboard
	  SIGUSR1     30								      user-defined signal 1
	  SIGUSR2     31								      user-defined signal 2

     The default signal action is termination if the signal is
     not caught or ignored, except for signals marked with @ or
     '|+'.  The starred signals in the list above cause termina-
     tion with a core image.  Signals marked with @ are discarded
     if the action is SIG_DFL; signals marked with '|+' cause the
     process to stop.  The signals marked with '|=' are not
     defined by POSIX.




Printed 7/27/90               July				3






SIGACTION(2)		      1990		     SIGACTION(2)



NNOOTTEESS
     The mask specified in _a_c_t is not allowed to block SIGKILL or
     SIGSTOP.  This is done silently by the system.

RREETTUURRNN VVAALLUUEE
     A 0 value indicated that the call succeeded.  A -1 return
     value indicates an error occurred and _e_r_r_n_o is set to indi-
     cated the reason.

EERRRROORRSS
     _S_i_g_a_c_t_i_o_n will fail and no new signal handler will be
     installed if one of the following occurs:

     [EFAULT]	    Either _a_c_t or _o_a_c_t points to memory that is
		    not a valid part of the process address
		    space.

     [EINVAL]	    _S_i_g is not a valid signal number.

     [EINVAL]	    An attempt is made to ignore or supply a
		    handler for SIGKILL or SIGSTOP.

SSTTAANNDDAARRDDSS
     The _s_i_g_a_c_t_i_o_n function is defined by POSIX.1.  The
     SA_ONSTACK and SA_RESTART flags are Berkeley extensions, as
     are the signals marked with '|='.  Most of those signals are
     available on most BSD-derived systems.

SSEEEE AALLSSOO
     kill(1), ptrace(2), kill(2), sigaction(2), sigprocmask(2),
     sigsetops(2), sigsuspend(2), sigblock(2), sigsetmask(2),
     sigpause(2), sigstack(2), sigvec(2), setjmp(3), siginter-
     rupt(3), tty(4)

NNOOTTEESS  ((VVAAXX--1111))
     The handler routine can be declared:

	 void handler(sig, code, scp)
	 int sig, code;
	 struct sigcontext *scp;

     Here _s_i_g is the signal number, into which the hardware
     faults and traps are mapped as defined below. _C_o_d_e is a
     parameter that is either a constant as given below or, for
     compatibility mode faults, the code provided by the hardware
     (Compatibility mode faults are distinguished from the other
     SIGILL traps by having PSL_CM set in the psl).  _S_c_p is a
     pointer to the _s_i_g_c_o_n_t_e_x_t structure (defined in <_s_i_g_n_a_l._h>),
     used to restore the context from before the signal.

     The following defines the mapping of hardware traps to sig-
     nals and codes.  All of these symbols are defined in



Printed 7/27/90               July				4






SIGACTION(2)		      1990		     SIGACTION(2)



     <_s_i_g_n_a_l._h>:

	Hardware condition		    Signal	 Code

     Arithmetic traps:
	Integer overflow		    SIGFPE	 FPE_INTOVF_TRAP
	Integer division by zero	    SIGFPE	 FPE_INTDIV_TRAP
	Floating overflow trap		    SIGFPE	 FPE_FLTOVF_TRAP
	Floating/decimal division by zero   SIGFPE	 FPE_FLTDIV_TRAP
	Floating underflow trap             SIGFPE	 FPE_FLTUND_TRAP
	Decimal overflow trap		    SIGFPE	 FPE_DECOVF_TRAP
	Subscript-range                     SIGFPE	 FPE_SUBRNG_TRAP
	Floating overflow fault             SIGFPE	 FPE_FLTOVF_FAULT
	Floating divide by zero fault	    SIGFPE	 FPE_FLTDIV_FAULT
	Floating underflow fault	    SIGFPE	 FPE_FLTUND_FAULT
     Length access control		    SIGSEGV
     Protection violation		    SIGBUS
     Reserved instruction		    SIGILL	 ILL_RESAD_FAULT
     Customer-reserved instr.		    SIGEMT
     Reserved operand			    SIGILL	 ILL_PRIVIN_FAULT
     Reserved addressing		    SIGILL	 ILL_RESOP_FAULT
     Trace pending			    SIGTRAP
     Bpt instruction			    SIGTRAP
     Compatibility-mode                     SIGILL	 hardware supplied code
     Chme				    SIGSEGV
     Chms				    SIGSEGV
     Chmu				    SIGSEGV

BBUUGGSS
     This manual page is still confusing.

























Printed 7/27/90               July				5



