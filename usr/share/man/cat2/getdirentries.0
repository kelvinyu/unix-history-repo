


GETDIRENTRIES(2)	      1990		 GETDIRENTRIES(2)



NNAAMMEE
     getdirentries - get directory entries in a filesystem
     independent format

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ddiirreenntt..hh>>

     cccc == ggeettddiirreennttrriieess((ffdd,, bbuuff,, nnbbyytteess,, bbaasseepp))
     iinntt cccc,, ffdd;;
     cchhaarr **bbuuff;;
     iinntt nnbbyytteess;;
     lloonngg **bbaasseepp;;

DDEESSCCRRIIPPTTIIOONN
     _G_e_t_d_i_r_e_n_t_r_i_e_s reads directory entries from the directory
     referenced by the file descriptor _f_d into the buffer pointed
     to by _b_u_f, in a filesystem independent format.  Up to _n_b_y_t_e_s
     of data will be transferred.  _N_b_y_t_e_s must be greater than or
     equal to the block size associated with the file, see
     _s_t_a_t(_2).  Some filesystems may not support _g_e_t_d_i_r_e_n_t_r_i_e_s
     with buffers smaller than this size.

     The data in the buffer is a series of _d_i_r_e_n_t structures each
     containing the following entries:

	  unsigned long  d_fileno;
	  unsigned short d_reclen;
	  unsigned short d_namlen;
	  char		 d_name[MAXNAMELEN + 1]; /* see below */

     The _d__f_i_l_e_n_o entry is a number which is unique for each dis-
     tinct file in the filesystem.  Files that are linked by hard
     links (see _l_i_n_k(_2)) have the same _d__f_i_l_e_n_o.  The _d__r_e_c_l_e_n
     entry is the length, in bytes, of the directory record.  The
     _d__n_a_m_e entry contains a null terminated file name.  The
     _d__n_a_m_l_e_n entry specifies the length of the file name exclud-
     ing the null byte.  Thus the actual size of _d__n_a_m_e may vary
     from 1 to MMAAXXNNAAMMEELLEENN ++ 11.

     Entries may be separated by extra space.  The _d__r_e_c_l_e_n entry
     may be used as an offset from the start of a _d_i_r_e_n_t struc-
     ture to the next structure, if any.

     The actual number of bytes transferred is returned.  The
     current position pointer associated with _f_d is set to point
     to the next block of entries.  The pointer may not advance
     by the number of bytes returned by _g_e_t_d_i_r_e_n_t_r_i_e_s.	A value
     of zero is returned when the end of the directory has been
     reached.

     _G_e_t_d_i_r_e_n_t_r_i_e_s writes the position of the block read into the
     location pointed to by _b_a_s_e_p.  Alternatively, the current



Printed 7/27/90               June				1






GETDIRENTRIES(2)	      1990		 GETDIRENTRIES(2)



     position pointer may be set and retrieved by _l_s_e_e_k(_2).  The
     current position pointer should only be set to a value
     returned by _l_s_e_e_k(_2) , a value returned in the location
     pointed to by _b_a_s_e_p , or zero.

RREETTUURRNN VVAALLUUEE
     If successful, the number of bytes actually transferred is
     returned.	Otherwise, a -1 is returned and the global vari-
     able _e_r_r_n_o is set to indicate the error.

EERRRROORRSS
     _G_e_t_d_i_r_e_n_t_r_i_e_s will fail if one or more of the following are
     true:

     EBADF	    _f_d is not a valid file descriptor open for
		    reading.

     EFAULT	    Either _b_u_f or _b_a_s_e_p point outside the allo-
		    cated address space.

     EIO	    An I/O error occurred while reading from or
		    writing to the file system.

SSEEEE AALLSSOO
     open(2), lseek(2)






























Printed 7/27/90               June				2



