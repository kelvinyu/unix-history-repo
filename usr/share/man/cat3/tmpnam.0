


TMPFILE(3)		      1990		       TMPFILE(3)



NNAAMMEE
     tempnam, tmpfile, tmpnam - temporary file routines

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssttddiioo..hh>>

     FFIILLEE **
     ttmmppffiillee((vvooiidd));;

     cchhaarr **
     ttmmppnnaamm((cchhaarr **ssttrr));;

     cchhaarr **
     tteemmppnnaamm((ccoonnsstt cchhaarr **ttmmppddiirr,, ccoonnsstt cchhaarr **pprreeffiixx));;

DDEESSCCRRIIPPTTIIOONN
     _T_m_p_f_i_l_e opens a file using a file name generated by the rou-
     tine _t_m_p_n_a_m(3), and returns a pointer to the stream associ-
     ated with the file.  The created file is unlinked before
     _t_m_p_f_i_l_e returns, causing the contents of the file to be
     deleted automatically when the last reference to it is
     closed.  The file is opened with the access value ``w+''.
     If _t_m_p_n_a_m returns NULL, or if _t_m_p_f_i_l_e is unable to open the
     file, a NULL pointer is returned.

     _T_m_p_n_a_m returns a pointer to a file name, in the directory
     ``/usr/tmp'', which did not reference an existing file at
     some indeterminate point in the past.  If the argument _s is
     non-NULL, this file name is copied to the buffer it refer-
     ences.  Otherwise, memory to contain this file name is allo-
     cated by _t_m_p_n_a_m.  In either case, _t_m_p_n_a_m returns a pointer
     to the file name; in the latter case, the return value may
     be used as a subsequent argument to _f_r_e_e(3).

     In the current implementation, the memory buffer referenced
     by _s must be at least 16 bytes long.

     _T_e_m_p_n_a_m is similar to _t_m_p_n_a_m, but provides the ability to
     specify the directory which will contain the temporary file
     and the file name prefix.

     The environmental variable ``TMPDIR'' (if set), the argument
     _d_i_r (if non-NULL), the directory ``/usr/tmp'' and the direc-
     tory ``/tmp'' are tried, in the listed order, as directories
     in which to store the temporary file.  _T_e_m_p_n_a_m allocates
     memory in which to store the file name; the returned pointer
     may be used as a subsequent argument to _f_r_e_e(3).  The argu-
     ment _p_r_e_f_i_x, if non-NULL, is used to specify a file name
     prefix, which will be the first part of the created file
     name.





Printed 7/27/90               June				1






TMPFILE(3)		      1990		       TMPFILE(3)



     _T_m_p_n_a_m and _t_e_m_p_n_a_m_e return a NULL pointer if unable to allo-
     cate memory or find a file which may be created.

     The manifest constants ``TMP_MAX'', ``P_tmpdir'' and
     ``L_tmpnam'', documented for the routines _t_m_p_n_a_m and _t_e_m_p_n_a_m
     in other systems, are not available in this implementation.
     If the source code requires them, simply use:

	  #define   TMP_MAX	   308915776
	  #define   P_tmpdir	   "/usr/tmp"
	  #define   L_tmpnam	   1024

BBUUGGSS
     These interfaces are provided for System V compatibility
     only.  The _m_k_s_t_e_m_p(3) interface is strongly preferred.

     There are three important problems with these interfaces (as
     well as with the historic _m_k_t_e_m_p(3) interface).  First,
     there is an obvious race between file name selection and
     file creation.  Second, most implementations provide only a
     limited number (usually 26) of possible temporary file names
     before file names will start being recycled.  Third, the
     System V implementations of these functions (and _m_k_t_e_m_p) use
     the _a_c_c_e_s_s(2) system call to determine whether or not the
     temporary file may be created.  This has obvious ramifica-
     tions for setuid or setgid programs, complicating the port-
     able use of these interfaces in such programs.

     The _m_k_s_t_e_m_p(3) interface has none of these problems; the
     _m_k_t_e_m_p(_3) implementation in this system suffers only from
     the race condition described above.

     The _t_m_p_f_i_l_e interface should not be used if there is any
     possibility that the user does not wish the temporary file
     to be publicly readable or writable.

SSEEEE AALLSSOO
     fopen(3), mkstemp(3), mktemp(3)

















Printed 7/27/90               June				2



