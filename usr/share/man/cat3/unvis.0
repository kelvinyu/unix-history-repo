


UNVIS(3)		      1990			 UNVIS(3)



NNAAMMEE
     unvis, strunvis - decode a visual representation of charac-
     ters

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<vviiss..hh>>

     iinntt uunnvviiss((ccpp,, cc,, aassttaattee,, ffllaagg))
     uu__cchhaarr **ccpp,, cc;;
     iinntt **aassttaattee,, ffllaagg;;

     iinntt ssttrruunnvviiss((ddsstt,, ssrrcc))
     cchhaarr **ddsstt,, **ssrrcc;;


DDEESSCCRRIIPPTTIIOONN
     _U_n_v_i_s and _s_t_r_u_n_v_i_s are used to decode a visual representa-
     tion of characters, as produced by the vis(3) function, back
     into its original form.  Unvis is called with successive
     characters in c until a valid sequence is recognized, at
     which time the decoded character is available at the charac-
     ter pointed to by cp.  Strunvis decodes the characters
     pointed to by src into the buffer pointed to by dst.

     _S_t_r_u_n_v_i_s simply copies src to dst, decoding any escape
     sequences along the way, and returns the number of charac-
     ters placed into dst, or -1 if an invalid escape sequence
     was detected.  The size of dst should be equal to the size
     of src (that is, no expansion takes place during decoding).

     _U_n_v_i_s implements a state machine that can be used to decode
     an arbitrary stream of bytes.  All state associated with the
     bytes being decoded is stored outside the _u_n_v_i_s function
     (that is, a pointer to the state is passed in), so calls
     decoding different streams can be freely intermixed.  To
     start decoding a stream of bytes, first initialize an
     integer to zero.  Call unvis with each successive byte,
     along with a pointer to this integer, and a pointer to an
     destination character.  _V_i_s has several return codes that
     must be handled properly.	They are:

     0 (zero)
	  Another character is necessary; nothing has been recog-
	  nized yet.

     UNVIS_VALID
	  A valid character has been recognized and is available
	  at the location pointed to by cp.

     UNVIS_VALIDPUSH
	  A valid character has been recognized and is available
	  at the location pointed to by cp; however, the



Printed 7/27/90               June				1






UNVIS(3)		      1990			 UNVIS(3)



	  character currently passed in should be passed in
	  again.

     UNVIS_NOCHAR
	  A valid sequence was detected, but no character was
	  produced.  This return code is necessary to indicate a
	  logical break between characters.

     UNVIS_SYNBAD
	  An invalid esacpe sequence was detected, or the decoder
	  is in an unknown state.  The decoder is placed into the
	  starting state.

     When all bytes in the stream have been processed, call _u_n_v_i_s
     one more time with flag set to UUNNVVIISS__EENNDD to extract any
     remaining character (the character passed in is ignored).

     The following code fragment illustrates a proper use of
     _u_n_v_i_s.

     int state = 0;
     char out;

     while ((ch = getchar()) != EOF) {
     again:
	  switch(unvis(&out, ch, &state, 0)) {
	  case 0:
	  case UNVIS_NOCHAR:
	       break;
	  case UNVIS_VALID:
	       (void) putchar(out);
	       break;
	  case UNVIS_VALIDPUSH:
	       (void) putchar(out);
	       goto again;
	  case UNVIS_SYNBAD:
	       (void)fprintf(stderr, "bad sequence!0);
	       exit(1);
	  }
     }
     if (unvis(&out, (char)0, &state, UNVIS_END) == UNVIS_VALID)
	  (void) putchar(out);

SSEEEE AALLSSOO
     vis(1)










Printed 7/27/90               June				2



