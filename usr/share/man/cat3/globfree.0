


GLOB(3)                       1990			  GLOB(3)



NNAAMMEE
     glob, globfree - generate pathnames matching a pattern

SSYYNNOOPPSSIISS
     #include <glob.h>

     glob(const char *pattern, int flags,
	  const int (*errfunc)(char *, int), glob_t *pglob);

     void globfree(glob_t *pglob);

DDEESSCCRRIIPPTTIIOONN
     _G_l_o_b is a pathname generator that implements the rules for
     file name pattern matching used by the shell.

     The include file _g_l_o_b._h defines the structure type _g_l_o_b__t,
     which contains at least the following fields:

	  typedef struct {
	       int gl_pathc;	  /* count of paths matching pattern */
	       int gl_offs;	  /* reserved at beginning of gl_pathv */
	       char **gl_pathv;   /* list of paths matching pattern */
	  } glob_t;

     The argument _p_a_t_t_e_r_n is a pointer to a pathname pattern to
     be expanded.  _G_l_o_b matches all accessible pathnames against
     the pattern and creates a list of the pathnames that match.
     In order to have access to a pathname, _g_l_o_b requires search
     permission on every component of a path except the last and
     read permission on each directory of any filename component
     of _p_a_t_t_e_r_n that contains any of the special characters
     ``*'', ``?'' or ``[''.

     _G_l_o_b stores the number of matched pathnames into the
     _g_l__p_a_t_h_c field, and a pointer to a list of pointers to path-
     names into the _g_l__p_a_t_h_v field.  The first pointer after the
     last pathname is NULL.  If the pattern does not match any
     pathnames, the returned number of matched paths is set to
     zero.

     It is the caller's responsibility to create the structure
     pointed to by _p_g_l_o_b.  The _g_l_o_b function allocates other
     space as needed, including the memory pointed to by
     _g_l__p_a_t_h_v.

     The argument _f_l_a_g_s is used to modify the behavior of _g_l_o_b.
     The value of _f_l_a_g_s is the bitwise inclusive OR of any of the
     following values defined in _g_l_o_b._h:

     GLOB_APPEND
	  Append pathnames generated to the ones from a previous
	  call (or calls) to _g_l_o_b.  The value of _g_l__p_a_t_h_c will be



Printed 7/27/90               June				1






GLOB(3)                       1990			  GLOB(3)



	  the total matches found by this call and the previous
	  call(s).  The pathnames are appended to, not merged
	  with the pathnames returned by the previous call(s).
	  Between calls, the caller must not change the setting
	  of the GLOB_DOOFFS flag, nor change the value of
	  _g_l__o_f_f_s when GLOB_DOOFFS is set, nor (obviously) call
	  _g_l_o_b_f_r_e_e for _p_g_l_o_b.

     GLOB_DOOFFS
	  Make use of the _g_l__o_f_f_s field.  If this flag is set,
	  _g_l__o_f_f_s is used to specify how many NULL pointers to
	  prepend to the beginning of the _g_l__p_a_t_h_v field.  In
	  other words, _g_l__p_a_t_h_v will point to _g_l__o_f_f_s NULL
	  pointers, followed by _g_l__p_a_t_h_c pathname pointers, fol-
	  lowed by a NULL pointer.

     GLOB_ERR
	  Causes _g_l_o_b to return when it encounters a directory
	  that it cannot open or read.	Ordinarily, _g_l_o_b contin-
	  ues to find matches.

     GLOB_MARK
	  Each pathname that is a directory that matches _p_a_t_t_e_r_n
	  has a slash appended.

     GLOB_NOSORT
	  By default, the pathnames are sorted in ascending ASCII
	  order; this flag prevents that sorting (speeding up
	  _g_l_o_b).

     GLOB_NOCHECK
	  If _p_a_t_t_e_r_n does not match any pathname, then _g_l_o_b
	  returns a list consisting of only _p_a_t_t_e_r_n, and the
	  number of matched pathnames is set to 1.  If _G_L_O_B__Q_U_O_T_E
	  is set, its effect is present in the pattern returned.

     GLOB_QUOTE
	  Use the backslash (``\'') character for quoting: every
	  occurrence of a backslash followed by a character in
	  the pattern is replaced by that character, avoiding any
	  special interpretation of the character.

     If, during the search, a directory is encountered that can-
     not be opened or read and _e_r_r_f_u_n_c is non-NULL, _g_l_o_b calls
     (*_e_r_r_f_u_n_c)(_p_a_t_h, _e_r_r_n_o).  This may be unintuitive: a pattern
     like ``*/Makefile'' will try to _s_t_a_t(2) ``foo/Makefile''
     even if ``foo'' is not a directory, resulting in a call to
     _e_r_r_f_u_n_c.  The error routine can suppress this action by
     testing for ENOENT and ENOTDIR; however, the GLOB_ERR flag
     will still cause an immediate return when this happens.





Printed 7/27/90               June				2






GLOB(3)                       1990			  GLOB(3)



     If _e_r_r_f_u_n_c returns non-zero, _g_l_o_b stops the scan and returns
     _G_L_O_B__A_B_E_N_D after setting _g_l__p_a_t_h_c and _g_l__p_a_t_h_v to reflect
     any paths already matched.  This also happens if an error is
     encountered and _G_L_O_B__E_R_R is set in _f_l_a_g_s, regardless of the
     return value of _e_r_r_f_u_n_c, if called.  If _G_L_O_B__E_R_R is not set
     and either _e_r_r_f_u_n_c is NULL or _e_r_r_f_u_n_c returns zero, the
     error is ignored.

     The _g_l_o_b_f_r_e_e function frees any space associated with _p_g_l_o_b
     from a previous call(s) to _g_l_o_b.

RREETTUURRNNSS
     On successful completion, _g_l_o_b returns zero.  The field
     _g_l__p_a_t_h_c returns the number of matched pathnames and the
     field _g_l__p_a_t_h_v contains a pointer to a NULL-terminated list
     of matched pathnames.  However, if _p_g_l_o_b->_g_l__p_a_t_h_c is zero,
     the contents of _p_g_l_o_b->_g_l__p_a_t_h_v is undefined.

     If _g_l_o_b terminates due to an error, it sets errno and
     returns one of the following non-zero constants, which are
     defined in the include file <glob.h>:

     GLOB_NOSPACE
	  An attempt to allocate memory failed.

     GLOB_ABEND
	  The scan was stopped because an error was encountered
	  and either GLOB_ERR was set or (*_e_r_r_f_u_n_c)() returned
	  non-zero.

     The arguments _p_g_l_o_b->_g_l__p_a_t_h_c and _p_g_l_o_b->_g_l__p_a_t_h_v are still
     set as specified above.

SSTTAANNDDAARRDDSS
     The _g_l_o_b function is expected to be POSIX 1003.2 compatible
     with the exception that the flag GLOB_QUOTE should not be
     used by applications striving for strict POSIX conformance.

EEXXAAMMPPLLEE
     A rough equivalent of ``ls -l *.c *.h'' can be obtained with
     the following code:

	  glob_t g;

	  g.gl_offs = 2;
	  glob("*.c", GLOB_DOOFFS, NULL, &g);
	  glob("*.h", GLOB_DOOFFS | GLOB_APPEND, NULL, &g);
	  g.gl_pathv[0] = "ls";
	  g.gl_pathv[1] = "-l";
	  execvp("ls", g.gl_pathv);





Printed 7/27/90               June				3






GLOB(3)                       1990			  GLOB(3)



SSEEEE AALLSSOO
     sh(1), fnmatch(3), wordexp(3), regexp(3)

BBUUGGSS
     Patterns longer than MAXPATHLEN may cause unchecked errors.

     _G_l_o_b may fail and set errno for any of the errors specified
     for the library routines _s_t_a_t (_2), _c_l_o_s_e_d_i_r (_3), _o_p_e_n_d_i_r
     (_3), _r_e_a_d_d_i_r (_3), _m_a_l_l_o_c (_3), and _f_r_e_e (_3).














































Printed 7/27/90               June				4



