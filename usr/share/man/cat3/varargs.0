


VARARGS(3)		      1990		       VARARGS(3)



NNAAMMEE
     varargs - variable argument lists

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssttddaarrgg..hh>>

     vvooiidd
     vvaa__ssttaarrtt((vvaa__lliisstt aapp,, llaasstt));;

     ttyyppee
     vvaa__aarrgg((vvaa__lliisstt aapp,, ttyyppee));;

     vvooiidd
     vvaa__eenndd((vvaa__lliisstt aapp));;

DDEESSCCRRIIPPTTIIOONN
     A function may be called with a varying number of arguments
     of varying types.	The include file <_s_t_d_a_r_g._h> declares a
     type (_v_a__l_i_s_t) and defines three macros for stepping through
     a list of arguments whose number and types are not known to
     the called function.

     The called function must declare an object of type _v_a__l_i_s_t
     which is used by the macros _v_a__s_t_a_r_t, _v_a__a_r_g, and _v_a__e_n_d.

     The _v_a__s_t_a_r_t macro initializes _a_p for subsequent use by
     _v_a__a_r_g and _v_a__e_n_d, and must be called first.

     The parameter _l_a_s_t is the name of the last parameter before
     the variable argument list, i.e. the last parameter of which
     the calling function knows the type.

     Because the address of this parameter is used in the
     _v_a__s_t_a_r_t macro, it should not be declared as a register
     variable, or as a function or array type.

     The _v_a__s_t_a_r_t macro returns no value.

     The _v_a__a_r_g macro expands to an expression that has the type
     and value of the next argument in the call.  The parameter
     _a_p is the _v_a__l_i_s_t _a_p initialized by _v_a__s_t_a_r_t.  Each call to
     _v_a__a_r_g modifies _a_p so that the next call returns the next
     argument.	The parameter _t_y_p_e is a type name specified so
     that the type of a pointer to an object that has the speci-
     fied type can be obtained simply by adding a * to _t_y_p_e.

     If there is no next argument, or if _t_y_p_e is not compatible
     with the type of the actual next argument (as promoted
     according to the default argument promotions), random errors
     will occur.





Printed 7/27/90                May				1






VARARGS(3)		      1990		       VARARGS(3)



     The first use of the _v_a__a_r_g macro after that of the _v_a__s_t_a_r_t
     macro returns the argument after _l_a_s_t.  Successive invoca-
     tions return the values of the remaining arguments.

     The _v_a__e_n_d macro handles a normal return from the function
     whose variable argument list was initialized by _v_a__s_t_a_r_t.

     The _v_a__e_n_d macro returns no value.

SSTTAANNDDAARRDDSS
     The _v_a__s_t_a_r_t, _v_a__a_r_g, and _v_a__e_n_d macros are ANSI C compati-
     ble.

CCOOMMPPAATTIIBBIILLIITTYY
     These macros are nnoott compatible with the historic macros
     they replace.  A backward compatible version can be found in
     the include file <_v_a_r_a_r_g_s._h>.

EEXXAAMMPPLLEESS
     The function _f_o_o takes a string of format characters and
     prints out the argument associated with each format charac-
     ter based on the type.

	  foo(fmt)
	       char *fmt;
	  {
	       va_list ap;
	       int d;
	       char c, *p, *s;

	       va_start(ap, fmt);
	       while (*fmt)
		    switch(*fmt++) {
		    case 's':		/* string */
			 s = va_arg(ap, char *);
			 printf("string %s\n", s);
			 break;
		    case 'd':		/* int */
			 d = va_arg(ap, int);
			 printf("int %d\n", d);
			 break;
		    case 'c':		/* char */
			 c = va_arg(ap, char);
			 printf("char %c\n", c);
			 break;
		    }
	       va_end(ap);
	  }







Printed 7/27/90                May				2



