ED(1)			    UNIX Reference Manual			 ED(1)

NNAAMMEE
     eedd - text editor

SSYYNNOOPPSSIISS
     eedd [--] [_f_i_l_e]

DDEESSCCRRIIPPTTIIOONN
     EEdd is the standard text editor.

     If a _f_i_l_e argument is given, eedd simulates an ee command (see below) on the
     named file; that is to say, the file is read into eedd ''ss buffer so that it
     can be edited.

     --	   Suppresses the printing of explanatory output and should be used
	   when the standard input is an editor script.

     EEdd operates on a copy of any file it is editing; changes made in the copy
     have no effect on the file until a ww (write) command is given.  The copy
     of the text being edited resides in a temporary file called the _b_u_f_f_e_r.

     Commands to eedd have a simple and regular structure: zero or more
     _a_d_d_r_e_s_s_e_s followed by a single character _c_o_m_m_a_n_d, possibly followed by
     parameters to the command.  These addresses specify one or more lines in
     the buffer.  Missing addresses are supplied by default.

     In general, only one command may appear on a line.  Certain commands al-
     low the addition of text to the buffer.  While eedd is accepting text, it
     is said to be in _i_n_p_u_t _m_o_d_e.  In this mode, no commands are recognized;
     all input is merely collected.  Input mode is left by typing a period `..'
     alone at the beginning of a line.

     EEdd supports a limited form of _r_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n notation.  A regular ex-
     pression specifies a set of strings of characters.  A member of this set
     of strings is said to be _m_a_t_c_h_e_d by the regular expression.  In the fol-
     lowing specification for regular expressions the word `character' means
     any character but newline.

     1.    Any character except a special character matches itself.  Special
	   characters are the regular expression delimiter plus `\\[[..' and
	   sometimes `^^**$$'.

     2.    A `..' matches any character.

     3.    A `\' followed by any character except a digit or () matches that
	   character.

     4.    A nonempty string [_s] or ([^^_s]) matches any character in (or not
	   in) _s.  In _s, `\' has no special meaning, and may only appear as
	   the first letter.  A substring _a-_b, with _a and _b in ascending ASCII
	   order, stands for the inclusive range of ASCII characters.

     5.    A regular expression of form 1-4 followed by * matches a sequence
	   of 0 or more matches of the regular expression.

     6.    A regular expression, _x, of form 1-8, bracketed \(_x\) matches what
	   _x matches.

     7.    A \ followed by a digit _n matches a copy of the string that the
	   bracketed regular expression beginning with the _n'th \( matched.

     8.    A regular expression of form 1-8, _x, followed by a regular expres-
	   sion of form 1-7, _y matches a match for _x followed by a match for
	   _y, with the _x match being as long as possible while still permit-
	   ting a _y match.
     9.    A regular expression of form 1-8 preceded by `^' (or followed by
	   `$'), is constrained to matches that begin at the left (or end at
	   the right) end of a line.

     10.   A regular expression of form 1-9 picks out the longest among the
	   leftmost matches in a line.

     11.   An empty regular expression stands for a copy of the last regular
	   expression encountered.

     Regular expressions are used in addresses to specify lines and in one
     command (see _s below) to specify a portion of a line which is to be re-
     placed.  If it is desired to use one of the regular expression metachar-
     acters as an ordinary character, that character may be preceded by `\'.
     This also applies to the character bounding the regular expression (often
     `/') and to `\' itself.

     To understand addressing in eedd it is necessary to know that at any time
     there is a _c_u_r_r_e_n_t _l_i_n_e.  Generally speaking, the current line is the
     last line affected by a command; however, the exact effect on the current
     line is discussed under the description of the command.  Addresses are
     constructed as follows.

     1.    The character `..' addresses the current line.

     2.    The character `$$' addresses the last line of the buffer.

     3.    A decimal number _n addresses the _n'th line of the buffer.

     4.    `'_x' addresses the line marked with the name _x, which must be a
	   lower-case letter.  Lines are marked with the _k command described
	   below.

     5.    A regular expression enclosed in slashes `/' addresses the line
	   found by searching forward from the current line and stopping at
	   the first line containing a string that matches the regular
	   expression.	If necessary the search wraps around to the beginning
	   of the buffer.

     6.    A regular expression enclosed in queries `?' addresses the line
	   found by searching backward from the current line and stopping at
	   the first line containing a string that matches the regular
	   expression.	If necessary the search wraps around to the end of the
	   buffer.

     7.    An address followed by a plus sign `+' or a minus sign `-' followed
	   by a decimal number specifies that address plus (resp. minus) the
	   indicated number of lines.  The plus sign may be omitted.

     8.    If an address begins with `+' or `-' the addition or subtraction is
	   taken with respect to the current line; e.g.  `-5' is understood to
	   mean `.-5' .

     9.    If an address ends with `+' `-', then 1 is added (resp.
	   subtracted).  As a consequence of this rule and rule 8, the address
	   `-' refers to the line before the current line.  Moreover, trailing
	   `+' and `-' characters have cumulative effect, so `--' refers to
	   the current line less 2.

     10.   To maintain compatibility with earlier versions of the editor, the
	   character `^' in addresses is equivalent to `-'.

     Commands may require zero, one, or two addresses.	Commands which require
     no addresses regard the presence of an address as an error.  Commands
     which accept one or two addresses assume default addresses when
     insufficient are given.  If more addresses are given than such a command
     requires, the last one or two (depending on what is accepted) are used.

     Addresses are separated from each other typically by a comma `,' They may
     also be separated by a semicolon `;' In this case the current line `.' .
     is set to the previous address before the next address is interpreted.
     This feature can be used to determine the starting line for forward and
     backward searches (`/' `?').  The second address of any two-address
     sequence must correspond to a line following the line corresponding to
     the first address.  The special form `%' is an abbreviation for the
     address pair `1,$'.

     In the following list of eedd commands, the default addresses are shown in
     parentheses.  The parentheses are not part of the address, but are used
     to show that the given addresses are the default.

     As mentioned, it is generally illegal for more than one command to appear
     on a line.  However, most commands may be suffixed by `p' or by `l', in
     which case the current line is either printed or listed respectively in
     the way discussed below.  Commands may also be suffixed by `n', meaning
     the output of the command is to be line numbered.	These suffixes may be
     combined in any order.

     (.)aa

     <text>

     ..	   The append command reads the given text and appends it after the
	   addressed line.  `..' is left on the last line input, if there were
	   any, otherwise at the addressed line.  Address `0' is legal for
	   this command; text is placed at the beginning of the buffer.

     (..,..)cc

     <text>

     ..	   The change command deletes the addressed lines, then accepts input
	   text which replaces these lines.  `..' is left at the last line in-
	   put; if there were none, it is left at the line preceding the
	   deleted lines.

     (..,..)dd
	   The delete command deletes the addressed lines from the buffer.
	   The line originally after the last line deleted becomes the current
	   line; if the lines deleted were originally at the end, the new last
	   line becomes the current line.

     ee _f_i_l_e_n_a_m_e
	   The edit command causes the entire contents of the buffer to be
	   deleted, and then the named file to be read in.  `..' is set to the
	   last line of the buffer.  The number of characters read is typed.
	   _f_i_l_e_n_a_m_e is remembered for possible use as a default file name in a
	   subsequent rr or ww command.  If _f_i_l_e_n_a_m_e is missing, the remembered
	   name is used.

     EE _f_i_l_e_n_a_m_e
	   This command is the same as ee, except that no diagnostic results
	   when no ww has been given since the last buffer alteration.

     ff _f_i_l_e_n_a_m_e
	   The filename command prints the currently remembered file name.  If
	   _f_i_l_e_n_a_m_e is given, the currently remembered file name is changed to
	   _f_i_l_e_n_a_m_e.

     (1,$$)gg/_r_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n/_c_o_m_m_a_n_d _l_i_s_t
	   In the global command, the first step is to mark every line which
	   matches the given regular expression.  Then for every such line,
	   the given command list is executed with `..' initially set to that
	   line.  A single command or the first of multiple commands appears
	   on the same line with the global command.  All lines of a multi-
	   line list except the last line must be ended with `\\'.  AA, ii,, and cc
	   commands and associated input are permitted; the `..' terminating
	   input mode may be omitted if it would be on the last line of the
	   command list.  The commands gg and vv are not permitted in the com-
	   mand list.

     (.)ii

     <text>

     ..	   This command inserts the given text before the addressed line.  `..'
	   is left at the last line input, or, if there were none, at the line
	   before the addressed line.  This command differs from the aa command
	   only in the placement of the text.

     (..,..++11)jj
	   This command joins the addressed lines into a single line;
	   intermediate newlines simply disappear.  `..' is left at the
	   resulting line.

     (.)kk_x
	   The mark command marks the addressed line with name _x, which must
	   be a lower-case letter.  The address form `'_x' then addresses this
	   line.

     (..,..)ll
	   The list command prints the addressed lines in an unambiguous way:
	   non-graphic characters are printed in two-digit octal, and long
	   lines are folded.  The _l command may be placed on the same line
	   after any non-i/o command.

     (..,..)mm_a
	   The move command repositions the addressed lines after the line
	   addressed by _a.  The last of the moved lines becomes the current
	   line.

     (..,..)pp
	   The print command prints the addressed lines.  `..' is left at the
	   last line printed.  The pp command may be placed on the same line
	   after any non-i/o command.

     (..,..)PP
	   This command is a synonym for pp.

     qq	   The quit command causes eedd to exit.	No automatic write of a file
	   is done.

     QQ	   This command is the same as qq, except that no diagnostic results
	   when no ww has been given since the last buffer alteration.

     ($$)rr _f_i_l_e_n_a_m_e
	   The read command reads in the given file after the addressed line.
	   If no file name is given, the remembered file name, if any, is used
	   (see ee and ff commands).  The file name is remembered if there was
	   no remembered file name already.  Address `0' is legal for rr and
	   causes the file to be read at the beginning of the buffer.  If the
	   read is successful, the number of characters read is typed.	`..' is
	   left at the last line read in from the file.

     (..,..)ss/_r_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n/_r_e_p_l_a_c_e_m_e_n_t/  or

     (..,..)ss/_r_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n/_r_e_p_l_a_c_e_m_e_n_t/gg
	   The substitute command searches each addressed line for an
	   occurrence of the specified regular expression.  On each line in
	   which a match is found, all matched strings are replaced by the
	   replacement specified, if the global replacement indicator gg ap-
	   pears after the command.  If the global indicator does not appear,
	   only the first occurrence of the matched string is replaced.  It is
	   an error for the substitution to fail on all addressed lines.  Any
	   punctuation character may be used instead of `//' to delimit the
	   regular expression and the replacement.  `..' is left at the last
	   line substituted.  An ampersand `&&' appearing in the replacement is
	   replaced by the string matching the regular expression.  The
	   special meaning of `&&' in this context may be suppressed by
	   preceding it by `\\'.  The characters `\\_n' where _n is a digit, are
	   replaced by the text matched by the _n'th regular subexpression
	   enclosed between `\\(('.  and `\\))'.  When nested, parenthesized
	   subexpressions are present, _n is determined by counting occurrences
	   of `\\(('.  starting from the left.  Lines may be split by
	   substituting new-line characters into them.	The new-line in the
	   replacement string must be escaped by preceding it by `\\'.  One or
	   two trailing delimiters may be omitted, implying the pp suffix.  The
	   special form ss followed by _n_o delimiters repeats the most recent
	   substitute command on the addressed lines.  The ss may be followed
	   by the letters rr (use the most recent regular expression for the
	   left hand side, instead of the most recent left hand side of a sub-
	   stitute command), pp (complement the setting of the pp suffix from
	   the previous substitution), or gg (complement the setting of the gg
	   suffix).  These letters may be combined in any order.

     (..,..)tt_a
	   This command acts just like the mm command, except that a copy of
	   the addressed lines is placed after address _a (which may be 0).
	   `..' is left on the last line of the copy.

     (..,..)uu
	   The undo command restores the buffer to it's state before the most
	   recent buffer modifying command.  The current line is also
	   restored.  Buffer modifying commands are aa, cc, dd, gg, ii and vv.  For
	   purposes of undo, gg and vv are considered to be a single buffer
	   modifying command.  Undo is its own inverse.  When eedd runs out of
	   memory (at about 8000 lines on any 16 bit mini-computer such as the
	   PDP-11) This full undo is not possible, and uu can only undo the ef-
	   fect of the most recent substitute on the current line.  This res-
	   tricted undo also applies to editor scripts when eedd is invoked with
	   the -- option.

     (1,$$)vv/_r_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n/_c_o_m_m_a_n_d _l_i_s_t
	   This command is the same as the global command gg except that the
	   command list is executed gg with `..' initially set to every line
	   _e_x_c_e_p_t those matching the regular expression.  (1, $) 192.Tp Cx ( 1
	   ,$$)ww _f_i_l_e_n_a_m_e The write command writes the addressed lines onto the
	   given file.	If the file does not exist, it is created.  The file
	   name is remembered if there was no remembered file name already.
	   If no file name is given, the remembered file name, if any, is used
	   (see ee and ff commands).  `..' is unchanged.  If the command is
	   successful, the number of characters written is printed.

     (1,$$)WW _f_i_l_e_n_a_m_e
	   This command is the same as ww, except that the addressed lines are
	   appended to the file.

     (1,$$)wwqq _f_i_l_e_n_a_m_e
	   This command is the same as ww except that afterwards a qq command is
	   done, exiting the editor after the file is written.	1 ++11 )zz  or,

     (1++11)zz_n
	   This command scrolls through the buffer starting at the addressed
	   line.  22 (or _n, if given) lines are printed.  The last line print-
	   ed becomes the current line.  The value _n is sticky, in that it be-
	   comes the default for future zz commands.

     ($$)==
	   The line number of the addressed line is typed.  `..' is unchanged
	   by this command.

     !!<shell command>
	   The remainder of the line after the `!' is sent to sh(1) to be
	   interpreted as a command.  `..' is unchanged.

     (..++11,..++11)<newline>
	   An address alone on a line causes the addressed line to be printed.
	   A blank line alone is equivalent to ..++11 it is useful for stepping
	   through text.  If two addresses are present with no intervening
	   semicolon, eedd prints the range of lines.  If they are separated by
	   a semicolon, the second line is printed.

     If an interrupt signal (ASCII DEL) is sent, eedd prints `?interrupted' and
     returns to its command level.

     Some size limitations: 512 characters per line, 256 characters per global
     command list, 64 characters per file name, and, on mini computers, 128K
     characters in the temporary file.	The limit on the number of lines
     depends on the amount of core: each line takes 2 words.

     When reading a file, eedd discards ASCII NUL characters and all characters
     after the last newline.  It refuses to read files containing non-ASCII
     characters.

FFIILLEESS
     /_t_m_p/_e*
     _e_d_h_u_p   work is saved here if terminal hangs up


SSEEEE AALLSSOO
     ex(1), sed(1), crypt(1)
     B. W. Kernighan, _A _T_u_t_o_r_i_a_l _I_n_t_r_o_d_u_c_t_i_o_n _t_o _t_h_e _E_D _T_e_x_t _E_d_i_t_o_r
     B. W. Kernighan, _A_r _A_d_v_a_n_c_e_d _e_d_i_t_i_n_g _o_n _U_N_I_X

HHIISSTTOORRYY
     The eedd command appeared in Version 6 AT&T UNIX.

DDIIAAGGNNOOSSTTIICCSS
     `name' for inaccessible file; `?self-explanatory message' for other er-
     rors.

     To protect against throwing away valuable work, a qq or ee command is con-
     sidered to be in error, unless a ww has occurred since the last buffer
     change.  A second qq or ee will be obeyed regardless.

BBUUGGSS
     The ll command mishandles DEL.
     The uunnddoo command causes marks to be lost on affected lines.
