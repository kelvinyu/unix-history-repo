


CTIME(3)		      1990			 CTIME(3)



NNAAMMEE
     asctime, ctime, difftime, gmtime, localtime, mktime, tzset,
     tzsetwall - convert date and time to ASCII

SSYYNNOOPPSSIISS
     eexxtteerrnn cchhaarr **ttzznnaammee[[22]];;

     vvooiidd ttzzsseett(())

     vvooiidd ttzzsseettwwaallll(())

     ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>

     cchhaarr **ccttiimmee((cclloocckk))
     ttiimmee__tt **cclloocckk;;

     ddoouubbllee ddiiffffttiimmee((ttiimmee11,, ttiimmee00))
     ttiimmee__tt ttiimmee11;;
     ttiimmee__tt ttiimmee00;;

     ##iinncclluuddee <<ttiimmee..hh>>

     cchhaarr **aassccttiimmee((ttmm))
     ssttrruucctt ttmm **ttmm;;

     ssttrruucctt ttmm **llooccaallttiimmee((cclloocckk))
     lloonngg **cclloocckk;;

     ssttrruucctt ttmm **ggmmttiimmee((cclloocckk))
     lloonngg **cclloocckk;;

     ttiimmee__tt mmkkttiimmee((ttmm))
     ssttrruucctt ttmm **ttmm;;

DDEESSCCRRIIPPTTIIOONN
     _T_z_s_e_t uses the value of the environment variable TTZZ to set
     time conversion information used by _l_o_c_a_l_t_i_m_e.  If TTZZ does
     not appear in the environment, the best available approxima-
     tion to local wall clock time, as specified by the
     _t_z_f_i_l_e(5)-format file llooccaallttiimmee in the system time conver-
     sion information directory, is used by _l_o_c_a_l_t_i_m_e.	If TTZZ
     appears in the environment but its value is a null string,
     Coordinated Universal Time (UTC) is used (without leap
     second correction).  If TTZZ appears in the environment and
     its value is not a null string:

	  if the value begins with a colon, it is used as a path-
	  name of a file from which to read the time conversion
	  information;

	  if the value does not begin with a colon, it is first
	  used as the pathname of a file from which to read the



Printed 7/27/90               June				1






CTIME(3)		      1990			 CTIME(3)



	  time conversion information, and, if that file cannot
	  be read, is used directly as a specification of the
	  time conversion information.

     When TTZZ is used as a pathname, if it begins with a slash, it
     is used as an absolute pathname; otherwise, it is used as a
     pathname relative to a system time conversion information
     directory.  The file must be in the format specified in
     _t_z_f_i_l_e(5).

     When TTZZ is used directly as a specification of the time
     conversion information, it must have the following syntax
     (spaces inserted for clarity):

	  _s_t_d_o_f_f_s_e_t[_d_s_t[_o_f_f_s_e_t][,,_r_u_l_e]]

     Where:

	  _s_t_d and _d_s_t	 Three or more bytes that are the desig-
			 nation for the standard (_s_t_d) or summer
			 (_d_s_t) time zone.  Only _s_t_d is required;
			 if _d_s_t is missing, then summer time does
			 not apply in this locale.  Upper- and
			 lowercase letters are explicitly
			 allowed.  Any characters except a lead-
			 ing colon (::), digits, comma (,,), minus
			 (--), plus (++), and ASCII NUL are
			 allowed.

	  _o_f_f_s_e_t	 Indicates the value one must add to the
			 local time to arrive at Coordinated
			 Universal Time.  The _o_f_f_s_e_t has the
			 form:

			      _h_h[::_m_m[::_s_s]]

			 The minutes (_m_m) and seconds (_s_s) are
			 optional.  The hour (_h_h) is required and
			 may be a single digit.  The _o_f_f_s_e_t fol-
			 lowing _s_t_d is required.  If no _o_f_f_s_e_t
			 follows _d_s_t, summer time is assumed to
			 be one hour ahead of standard time.  One
			 or more digits may be used; the value is
			 always interpreted as a decimal number.
			 The hour must be between zero and 24,
			 and the minutes (and seconds) - if
			 present - between zero and 59.  If pre-
			 ceded by a ``--'', the time zone shall be
			 east of the Prime Meridian; otherwise it
			 shall be west (which may be indicated by
			 an optional preceding ``++'').




Printed 7/27/90               June				2






CTIME(3)		      1990			 CTIME(3)



	  _r_u_l_e		 Indicates when to change to and back
			 from summer time.  The _r_u_l_e has the
			 form:

			      _d_a_t_e//_t_i_m_e,,_d_a_t_e//_t_i_m_e

			 where the first _d_a_t_e describes when the
			 change from standard to summer time
			 occurs and the second _d_a_t_e describes
			 when the change back happens.	Each _t_i_m_e
			 field describes when, in current local
			 time, the change to the other time is
			 made.

			 The format of _d_a_t_e is one of the follow-
			 ing:

			 JJ_n	   The Julian day _n
				   (1 <_ _n <_ 365).  Leap days are
				   not counted; that is, in all
				   years - including leap years -
				   February 28 is day 59 and
				   March 1 is day 60.  It is
				   impossible to explicitly refer
				   to the occasional February 29.

			 _n	   The zero-based Julian day
				   (0 <_ _n <_ 365).  Leap days are
				   counted, and it is possible to
				   refer to February 29.

			 MM_m.._n.._d    The _d'th day (0 <_ _d <_ 6) of
				   week _n of month _m of the year
				   (1 <_ _n <_ 5, 1 <_ _m <_ 12, where
				   week 5 means ``the last _d day
				   in month _m'' which may occur
				   in either the fourth or the
				   fifth week).  Week 1 is the
				   first week in which the _d'th
				   day occurs.	Day zero is Sun-
				   day.

			 The _t_i_m_e has the same format as _o_f_f_s_e_t
			 except that no leading sign (``--'' or
			 ``++'') is allowed.  The default, if _t_i_m_e
			 is not given, is 0022::0000::0000.

     If no _r_u_l_e is present in TTZZ, the rules specified by the
     _t_z_f_i_l_e(5)-format file ppoossiixxrruulleess in the system time conver-
     sion information directory are used, with the standard and
     summer time offsets from UTC replaced by those specified by
     the _o_f_f_s_e_t values in TTZZ.



Printed 7/27/90               June				3






CTIME(3)		      1990			 CTIME(3)



     For compatibility with System V Release 3.1, a semicolon (;;)
     may be used to separate the _r_u_l_e from the rest of the
     specification.

     If the TTZZ environment variable does not specify a
     _t_z_f_i_l_e(5)-format and cannot be interpreted as a direct
     specification, UTC is used.

     _T_z_s_e_t_w_a_l_l sets things up so that _l_o_c_a_l_t_i_m_e returns the best
     available approximation of local wall clock time.

     _C_t_i_m_e converts a long integer, pointed to by _c_l_o_c_k,
     representing the time in seconds since 00:00:00 UTC, January
     1, 1970, and returns a pointer to a 26-character string of
     the form
		     Thu Nov 24 18:22:48 1986\n\0
     All the fields have constant width.

     _L_o_c_a_l_t_i_m_e and _g_m_t_i_m_e return pointers to ``tm'' structures,
     described below.  _L_o_c_a_l_t_i_m_e corrects for the time zone and
     any time zone adjustments (such as Daylight Saving Time in
     the U.S.A.).  Before doing so, _l_o_c_a_l_t_i_m_e calls _t_z_s_e_t (if
     _t_z_s_e_t has not been called in the current process).  After
     filling in the ``tm'' structure, _l_o_c_a_l_t_i_m_e sets the
     ttmm__iissddsstt'th element of ttzznnaammee to a pointer to an ASCII
     string that's the time zone abbreviation to be used with
     _l_o_c_a_l_t_i_m_e's return value.

     _G_m_t_i_m_e converts to Coordinated Universal Time.

     _A_s_c_t_i_m_e converts a time value contained in a ``tm'' struc-
     ture to a 26-character string, as shown in the above exam-
     ple, and returns a pointer to the string.

     _M_k_t_i_m_e converts the broken-down time, expressed as local
     time, in the structure pointed to by _t_m into a calendar time
     value with the same encoding as that of the values returned
     by the _t_i_m_e function.  The original values of the ttmm__wwddaayy
     and ttmm__yyddaayy components of the structure are ignored, and the
     original values of the other components are not restricted
     to their normal ranges.  (A positive or zero value for
     ttmm__iissddsstt causes _m_k_t_i_m_e to presume initially that summer time
     (for example, Daylight Saving Time in the U.S.A.) respec-
     tively, is or is not in effect for the specified time.  A
     negative value for ttmm__iissddsstt causes the _m_k_t_i_m_e function to
     attempt to divine whether summer time is in effect for the
     specified time.) On successful completion, the values of the
     ttmm__wwddaayy and ttmm__yyddaayy components of the structure are set
     appropriately, and the other components are set to represent
     the specified calendar time, but with their values forced to
     their normal ranges; the final value of ttmm__mmddaayy is not set
     until ttmm__mmoonn and ttmm__yyeeaarr are determined.  _M_k_t_i_m_e returns the



Printed 7/27/90               June				4






CTIME(3)		      1990			 CTIME(3)



     specified calendar time; If the calendar time cannot be
     represented, it returns --11.

     _D_i_f_f_t_i_m_e returns the difference between two calendar times,
     _t_i_m_e_1 - _t_i_m_e_0, expressed in seconds.

     Declarations of all the functions and externals, and the
     ``tm'' structure, are in the <<ttiimmee..hh>> header file.  The
     structure (of type) ssttrruucctt ttmm includes the following fields:

	       int tm_sec;	/* seconds (0 - 60) */
	       int tm_min;	/* minutes (0 - 59) */
	       int tm_hour;	/* hours (0 - 23) */
	       int tm_mday;	/* day of month (1 - 31) */
	       int tm_mon;	/* month of year (0 - 11) */
	       int tm_year;	/* year - 1900 */
	       int tm_wday;	/* day of week (Sunday = 0) */
	       int tm_yday;	/* day of year (0 - 365) */
	       int tm_isdst;	/* is summer time in effect? */
	       char *tm_zone;	/* abbreviation of timezone name */
	       long tm_gmtoff;	/* offset from UTC in seconds */

     The _t_m__z_o_n_e and _t_m__g_m_t_o_f_f fields exist, and are filled in,
     only if arrangements to do so were made when the library
     containing these functions was created.  There is no guaran-
     tee that these fields will continue to exist in this form in
     future releases of this code.

     _T_m__i_s_d_s_t is non-zero if summer time is in effect.

     _T_m__g_m_t_o_f_f is the offset (in seconds) of the time represented
     from UTC, with positive values indicating east of the Prime
     Meridian.

FFIILLEESS
     /usr/share/zoneinfo	     time zone information direc-
     tory
     /usr/share/zoneinfo/localtime   local time zone file
     /usr/share/zoneinfo/posixrules  used in converting POSIX-
     style TZ's
     /usr/share/zoneinfo/GMT	     for UTC leap seconds

     If /_u_s_r/_s_h_a_r_e/_z_o_n_e_i_n_f_o/_G_M_T is absent, UTC leap seconds are
     loaded from /_u_s_r/_s_h_a_r_e/_z_o_n_e_i_n_f_o/_p_o_s_i_x_r_u_l_e_s.

SSEEEE AALLSSOO
     time(2), getenv(3), tzfile(5)

NNOOTTEESS
     The return values point to static data whose content is
     overwritten by each call.	The ttmm__zzoonnee field of a returned
     ssttrruucctt ttmm points to a static array of characters, which will



Printed 7/27/90               June				5






CTIME(3)		      1990			 CTIME(3)



     also be overwritten at the next call (and by calls to _t_z_s_e_t
     or _t_z_s_e_t_w_a_l_l).

     Avoid using out-of-range values with _m_k_t_i_m_e when setting up
     lunch with promptness sticklers in Riyadh.


















































Printed 7/27/90               June				6



