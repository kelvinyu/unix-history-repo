


WINDOW(1)	    UNIX Programmer's Manual		WINDOW(1)



NNAAMMEE
     window - window environment

SSYYNNOOPPSSIISS
     wwiinnddooww [ --tt ] [ --ff ] [ --dd ] [ --ee eessccaappee--cchhaarr ] [ --cc ccoommmmaanndd
     ]

DDEESSCCRRIIPPTTIIOONN
     _W_i_n_d_o_w implements a window environment on ASCII terminals.

     A window is a rectangular portion of the physical terminal
     screen associated with a set of processes.  Its size and
     position can be changed by the user at any time.  Processes
     communicate with their window in the same way they normally
     interact with a terminal--through their standard input, out-
     put, and diagnostic file descriptors.  The window program
     handles the details of redirecting input an output to and
     from the windows.	At any one time, only one window can
     receive input from the keyboard, but all windows can simul-
     taneously send output to the display.

     Windows can overlap and are framed as necessary.  Each win-
     dow is named by one of the digits ``1'' to ``9''.	This one
     character identifier, as well as a user definable label
     string, are displayed with the window on the top edge of its
     frame.  A window can be designated to be in the _f_o_r_e_g_r_o_u_n_d,
     in which case it will always be on top of all normal, non-
     foreground windows, and can be covered only by other fore-
     ground windows.  A window need not be completely within the
     edges of the terminal screen.  Thus a large window (possibly
     larger than the screen) may be positioned to show only a
     portion of its full size.

     Each window has a cursor and a set of control functions.
     Most intelligent terminal operations such as line and char-
     acter deletion and insertion are supported.  Display modes
     such as underlining and reverse video are available if they
     are supported by the terminal.  In addition, similar to ter-
     minals with multiple pages of memory, each window has a text
     buffer which can have more lines than the window itself.

OOPPTTIIOONNSS
     When _w_i_n_d_o_w starts up, the commands (see long commands
     below) contained in the file ._w_i_n_d_o_w_r_c in the user's home
     directory are executed.  If it does not exist, two equal
     sized windows spanning the terminal screen are created by
     default.

     The command line options are

     --tt   Turn on terse mode (see _t_e_r_s_e command below).




Printed 7/9/88		  May 12, 1986				1






WINDOW(1)	    UNIX Programmer's Manual		WINDOW(1)



     --ff   Fast.  Don't perform any startup action.

     --dd   Ignore ._w_i_n_d_o_w_r_c and create the two default windows
	  instead.

     --ee eessccaappee--cchhaarr
	  Set the escape character to _e_s_c_a_p_e-_c_h_a_r.  _E_s_c_a_p_e-_c_h_a_r
	  can be a single character, or in the form ^_X where _X is
	  any character, meaning control-_X.

     --cc ccoommmmaanndd
	  Execute the string _c_o_m_m_a_n_d as a long command (see
	  below) before doing anything else.

PPRROOCCEESSSS EENNVVIIRROONNMMEENNTT
     With each newly created window, a shell program is spawned
     with its process environment tailored to that window.  Its
     standard input, output, and diagnostic file descriptors are
     bound to one end of either a pseudo-terminal (_p_t_y (4)) or a
     UNIX domain socket (_s_o_c_k_e_t_p_a_i_r (4)).  If a pseudo-terminal
     is used, then its special characters and modes (see _s_t_t_y
     (1)) are copied from the physical terminal.  A _t_e_r_m_c_a_p (5)
     entry tailored to this window is created and passed as
     environment (_e_n_v_i_r_o_n (5)) variable _T_E_R_M_C_A_P.  The termcap
     entry contains the window's size and characteristics as well
     as information from the physical terminal, such as the
     existence of underline, reverse video, and other display
     modes, and the codes produced by the terminal's function
     keys, if any.  In addition, the window size attributes of
     the pseudo-terminal are set to reflect the size of this win-
     dow, and updated whenever it is changed by the user.  In
     particular, the editor _v_i (1) uses this information to
     redraw its display.

OOPPEERRAATTIIOONN
     During normal execution, _w_i_n_d_o_w can be in one of two states:
     conversation mode and command mode.  In conversation mode,
     the terminal's real cursor is placed at the cursor position
     of a particular window--called the current window--and input
     from the keyboard is sent to the process in that window.
     The current window is always on top of all other windows,
     except those in foreground.  In addition, it is set apart by
     highlighting its identifier and label in reverse video.

     Typing _w_i_n_d_o_w's escape character (normally ^P) in conversa-
     tion mode switches it into command mode.  In command mode,
     the top line of the terminal screen becomes the command
     prompt window, and _w_i_n_d_o_w interprets input from the keyboard
     as commands to manipulate windows.

     There are two types of commands: short commands are usually
     one or two key strokes; long commands are strings either



Printed 7/9/88		  May 12, 1986				2






WINDOW(1)	    UNIX Programmer's Manual		WINDOW(1)



     typed by the user in the command window (see the ``:'' com-
     mand below), or read from a file (see _s_o_u_r_c_e below).

SSHHOORRTT CCOOMMMMAANNDDSS
     Below, # represents one of the digits ``1'' to ``9''
     corresponding to the windows 1 to 9.  ^_X means control-_X,
     where _X is any character.	In particular, ^^ is control-^.
     _E_s_c_a_p_e is the escape key, or ^[.

     ##	  Select window # as the current window and return to
	  conversation mode.

     %%##   Select window # but stay in command mode.

     ^^^^   Select the previous window and return to conversation
	  mode.  This is useful for toggling between two windows.

     eessccaappee
	  Return to conversation mode.

     ^^PP   Return to conversation mode and write ^P to the current
	  window.  Thus, typing two ^P's in conversation mode
	  sends one to the current window.  If the _w_i_n_d_o_w escape
	  is changed to some other character, that character
	  takes the place of ^P here.

     ??	  List a short summary of commands.

     ^^LL   Redraw the screen.

     qq	  Exit _w_i_n_d_o_w.	Confirmation is requested.

     ^^ZZ   Suspend _w_i_n_d_o_w.

     ww	  Create a new window.	The user is prompted for the
	  positions of the upper left and lower right corners of
	  the window.  The cursor is placed on the screen and the
	  keys ``h'', ``j'', ``k'', and ``l'' move the cursor
	  left, down, up, and right, respectively.  The keys
	  ``H'', ``J'', ``K'', and ``L'' move the cursor to the
	  respective limits of the screen.  Typing a number
	  before the movement keys repeats the movement that
	  number of times.  Return enters the cursor position as
	  the upper left corner of the window.	The lower right
	  corner is entered in the same manner.  During this pro-
	  cess, the placement of the new window is indicated by a
	  rectangular box drawn on the screen, corresponding to
	  where the new window will be framed.	Typing escape at
	  any point cancels this command.

	  This window becomes the current window, and is given
	  the first available ID.  The default buffer size is



Printed 7/9/88		  May 12, 1986				3






WINDOW(1)	    UNIX Programmer's Manual		WINDOW(1)



	  used (see _n_l_i_n_e command below).

	  Only fully visible windows can be created this way.

     cc##   Close window #.  The process in the window is sent the
	  hangup signal (see _k_i_l_l (1)).  _C_s_h (1) should handle
	  this signal correctly and cause no problems.

     mm##   Move window # to another location.  A box in the shape
	  of the window is drawn on the screen to indicate the
	  new position of the window, and the same keys as those
	  for the _w command are used to position the box.  The
	  window can be moved partially off-screen.

     MM##   Move window # to its previous position.

     ss##   Change the size of window #.	The user is prompted to
	  enter the new lower right corner of the window.  A box
	  is drawn to indicate the new window size.  The same
	  keys used in _w and _m are used to enter the position.

     SS##   Change window # to its previous size.

     ^^YY   Scroll the current window up by one line.

     ^^EE   Scroll the current window down by one line.

     ^^UU   Scroll the current window up by half the window size.

     ^^DD   Scroll the current window down by half the window size.

     ^^BB   Scroll the current window up by the full window size.

     ^^FF   Scroll the current window down by the full window size.

     hh	  Move the cursor of the current window left by one
	  column.

     jj	  Move the cursor of the current window down by one line.

     kk	  Move the cursor of the current window up by one line.

     ll	  Move the cursor of the current window right by one
	  column.

     ^^SS   Stop output in the current window.

     ^^QQ   Start output in the current window.

     ::	  Enter a line to be executed as long commands.  Normal
	  line editing characters (erase character, erase word,
	  erase line) are supported.



Printed 7/9/88		  May 12, 1986				4






WINDOW(1)	    UNIX Programmer's Manual		WINDOW(1)



LLOONNGG CCOOMMMMAANNDDSS
     Long commands are a sequence of statements parsed much like
     a programming language, with a syntax similar to that of C.
     Numeric and string expressions and variables are supported,
     as well as conditional statements.

     There are two data types: string and number.  A string is a
     sequence of letters or digits beginning with a letter.
     ``_'' and ``.'' are considered letters.  Alternately, non-
     alphanumeric characters can be included in strings by quot-
     ing them in ``"'' or escaping them with ``\''.  In addition,
     the ``\'' sequences of C are supported, both inside and out-
     side quotes (e.g., ``\n'' is a new line, ``\r'' a carriage
     return).  For example, these are legal strings: abcde01234,
     "&#$^*&#", ab"$#"cd, ab\$\#cd, "/usr/ucb/window".

     A number is an integer value in one of three forms: a
     decimal number, an octal number preceded by ``0'', or a hex-
     adecimal number preceded by ``0x'' or ``0X''.  The natural
     machine integer size is used (i.e., the signed integer type
     of the C compiler).  As in C, a non-zero number represents a
     boolean true.

     The character ``#'' begins a comment which terminates at the
     end of the line.

     A statement is either a conditional or an expression.
     Expression statements are terminated with a new line or
     ``;''.  To continue an expression on the next line, ter-
     minate the first line with ``\''.

CCOONNDDIITTIIOONNAALL SSTTAATTEEMMEENNTT
     _W_i_n_d_o_w has a single control structure: the fully bracketed
     if statement in the form
	  if <expr> then
	       <statement>
	       . . .
	  elsif <expr> then
	       <statement>
	       . . .
	  else
	       <statement>
	       . . .
	  endif
     The _e_l_s_e and _e_l_s_i_f parts are optional, and the latter can be
     repeated any number of times.  <_E_x_p_r> must be numeric.

EEXXPPRREESSSSIIOONNSS
     Expressions in _w_i_n_d_o_w are similar to those in the C
     language, with most C operators supported on numeric
     operands.	In addition, some are overloaded to operate on
     strings.



Printed 7/9/88		  May 12, 1986				5






WINDOW(1)	    UNIX Programmer's Manual		WINDOW(1)



     When an expression is used as a statement, its value is dis-
     carded after evaluation.  Therefore, only expressions with
     side effects (assignments and function calls) are useful as
     statements.

     Single valued (no arrays) variables are supported, of both
     numeric and string values.  Some variables are predefined.
     They are listed below.

     The operators in order of increasing precedence:

     <<eexxpprr11>> == <<eexxpprr22>>
	  Assignment.  The variable of name <_e_x_p_r_1>, which must
	  be string valued, is assigned the result of <_e_x_p_r_2>.
	  Returns the value of <_e_x_p_r_2>.

     <<eexxpprr11>> ?? <<eexxpprr22>> :: <<eexxpprr33>>
	  Returns the value of <_e_x_p_r_2> if <_e_x_p_r_1> evaluates true
	  (non-zero numeric value); returns the value of <_e_x_p_r_3>
	  otherwise.  Only one of <_e_x_p_r_2> and <_e_x_p_r_3> is
	  evaluated.  <_E_x_p_r_1> must be numeric.

     <<eexxpprr11>> |||| <<eexxpprr22>>
	  Logical or.  Numeric values only.  Short circuit
	  evaluation is supported (i.e., if <_e_x_p_r_1> evaluates
	  true, then <_e_x_p_r_2> is not evaluated).

     <<eexxpprr11>> &&&& <<eexxpprr22>>
	  Logical and with short circuit evaluation.  Numeric
	  values only.

     <<eexxpprr11>> || <<eexxpprr22>>
	  Bitwise or.  Numeric values only.

     <<eexxpprr11>> ^^ <<eexxpprr22>>
	  Bitwise exclusive or.  Numeric values only.

     <<eexxpprr11>> && <<eexxpprr22>>
	  Bitwise and.	Numeric values only.

     <<eexxpprr11>> ==== <<eexxpprr22>>,, <<eexxpprr11>> !!== <<eexxpprr22>>
	  Comparison (equal and not equal, respectively).  The
	  boolean result (either 1 or 0) of the comparison is
	  returned.  The operands can be numeric or string
	  valued.  One string operand forces the other to be con-
	  verted to a string in necessary.

     <<eexxpprr11>> << <<eexxpprr22>>,, <<eexxpprr11>> >> <<eexxpprr22>>,,
	  Less than, greater than, less than or equal to, greater
	  than or equal to.  Both numeric and string values, with
	  automatic conversion as above.




Printed 7/9/88		  May 12, 1986				6






WINDOW(1)	    UNIX Programmer's Manual		WINDOW(1)



     <<eexxpprr11>> <<<< <<eexxpprr22>>,, <<eexxpprr11>> >>>> <<eexxpprr22>>
	  If both operands are numbers, <_e_x_p_r_1> is bit shifted
	  left (or right) by <_e_x_p_r_2> bits.  If <_e_x_p_r_1> is a
	  string, then its first (or last) <_e_x_p_r_2> characters are
	  returns (if <_e_x_p_r_2> is also a string, then its length
	  is used in place of its value).

     <<eexxpprr11>> ++ <<eexxpprr22>>,, <<eexxpprr11>> -- <<eexxpprr22>>
	  Addition and subtraction on numbers.	For ``+'', if one
	  argument is a string, then the other is converted to a
	  string, and the result is the concatenation of the two
	  strings.

     <<eexxpprr11>> ** <<eexxpprr22>>,, <<eexxpprr11>> // <<eexxpprr22>>,,
	  Multiplication, division, modulo.  Numbers only.

     --<<eexxpprr>>,, ~~<<eexxpprr>>,, !!<<eexxpprr>>,, $$<<eexxpprr>>,, $$??<<eexxpprr>>
	  The first three are unary minus, bitwise complement and
	  logical complement on numbers only.  The operator,
	  ``$'', takes <_e_x_p_r> and returns the value of the vari-
	  able of that name.  If <_e_x_p_r> is numeric with value _n
	  and it appears within an alias macro (see below), then
	  it refers to the nth argument of the alias invocation.
	  ``$?'' tests for the existence of the variable <_e_x_p_r>,
	  and returns 1 if it exists or 0 otherwise.

     <<eexxpprr>>((<<aarrgglliisstt>>))
	  Function call.  <_E_x_p_r> must be a string that is the
	  unique prefix of the name of a builtin _w_i_n_d_o_w function
	  or the full name of a user defined alias macro.  In the
	  case of a builtin function, <_a_r_g_l_i_s_t> can be in one of
	  two forms:
	       <expr1>, <expr2>, . . .
	       argname1 = <expr1>, argname2 = <expr2>, . . .
	  The two forms can in fact be intermixed, but the result
	  is unpredictable.  Most arguments can be omitted;
	  default values will be supplied for them.  The _a_r_g_n_a_m_e_s
	  can be unique prefixes of the the argument names.  The
	  commas separating arguments are used only to disambigu-
	  ate, and can usually be omitted.

	  Only the first argument form is valid for user defined
	  aliases.  Aliases are defined using the _a_l_i_a_s builtin
	  function (see below).  Arguments are accessed via a
	  variant of the variable mechanism (see ``$'' operator
	  above).

	  Most functions return value, but some are used for side
	  effect only and so must be used as statements.  When a
	  function or an alias is used as a statement, the
	  parenthesis surrounding the argument list may be omit-
	  ted.	Aliases return no value.



Printed 7/9/88		  May 12, 1986				7






WINDOW(1)	    UNIX Programmer's Manual		WINDOW(1)



BBUUIILLTTIINN FFUUNNCCTTIIOONNSS
     The arguments are listed by name in their natural order.
     Optional arguments are in square brackets (``[ ]'').  Argu-
     ments that have no names are in angle brackets (``<>'').

     aalliiaass(([[<<ssttrriinngg>>]],, [[<<ssttrriinngg--lliisstt>>]]))
	  If no argument is given, all currently defined alias
	  macros are listed.  Otherwise, <_s_t_r_i_n_g> is defined as
	  an alias, with expansion <_s_t_r_i_n_g-_l_i_s_t>.  The previous
	  definition of <_s_t_r_i_n_g>, if any, is returned.	Default
	  for <_s_t_r_i_n_g-_l_i_s_t> is no change.

     cclloossee((<<wwiinnddooww--lliisstt>>))
	  Close the windows specified in <_w_i_n_d_o_w-_l_i_s_t>.  If
	  <_w_i_n_d_o_w-_l_i_s_t> is the word _a_l_l, than all windows are
	  closed.  No value is returned.

     ccuurrssoorrmmooddeess(([[mmooddeess]]))
	  Set the window cursor to _m_o_d_e_s.  _M_o_d_e_s is the bitwise
	  or of the mode bits defined as the variables _m__u_l
	  (underline), _m__r_e_v (reverse video), _m__b_l_k (blinking),
	  and _m__g_r_p (graphics, terminal dependent).  Return value
	  is the previous modes.  Default is no change.  For
	  example, cursor($m_rev|$m_blk) sets the window cursors
	  to blinking reverse video.

     eecchhoo(([[wwiinnddooww]],, [[<<ssttrriinngg--lliisstt>>]]))
	  Write the list of strings, <_s_t_r_i_n_g-_l_i_s_t>, to _w_i_n_d_o_w,
	  separated by spaces and terminated with a new line.
	  The strings are only displayed in the window, the
	  processes in the window are not involved (see _w_r_i_t_e
	  below).  No value is returned.  Default is the current
	  window.

     eessccaappee(([[eessccaappeecc]]))
	  Set the escape character to _e_s_c_a_p_e-_c_h_a_r.  Returns the
	  old escape character as a one character string.
	  Default is no change.  _E_s_c_a_p_e_c can be a string of a
	  single character, or in the form ^_X, meaning control-_X.

     ffoorreeggrroouunndd(([[wwiinnddooww]],, [[ffllaagg]]))
	  Move _w_i_n_d_o_w in or out of foreground.	_F_l_a_g can be one
	  of _o_n, _o_f_f, _y_e_s, _n_o, _t_r_u_e, or _f_a_l_s_e, with obvious mean-
	  ings, or it can be a numeric expression, in which case
	  a non-zero value is true.  Returns the old foreground
	  flag as a number.  Default for _w_i_n_d_o_w is the current
	  window, default for _f_l_a_g is no change.

     llaabbeell(([[wwiinnddooww]],, [[llaabbeell]]))
	  Set the label of _w_i_n_d_o_w to _l_a_b_e_l.  Returns the old
	  label as a string.  Default for _w_i_n_d_o_w is the current
	  window, default for _l_a_b_e_l is no change.  To turn off a



Printed 7/9/88		  May 12, 1986				8






WINDOW(1)	    UNIX Programmer's Manual		WINDOW(1)



	  label, set it to an empty string ("").

     lliisstt(())
	  No arguments.  List the identifiers and labels of all
	  windows.  No value is returned.

     nnlliinnee(([[nnlliinnee]]))
	  Set the default buffer size to _n_l_i_n_e.  Initially, it is
	  48 lines.  Returns the old default buffer size.
	  Default is no change.  Using a very large buffer can
	  slow the program down considerably.

     sseelleecctt(([[wwiinnddooww]]))
	  Make _w_i_n_d_o_w the current window.  The previous current
	  window is returned.  Default is no change.

     sshheellll(([[<<ssttrriinngg--lliisstt>>]]))
	  Set the default window shell program to <_s_t_r_i_n_g-_l_i_s_t>.
	  Returns the first string in the old shell setting.
	  Default is no change.  Initially, the default shell is
	  taken from the environment variable _S_H_E_L_L.

     ssoouurrccee((ffiilleennaammee))
	  Read and execute the long commands in _f_i_l_e_n_a_m_e.
	  Returns -1 if the file cannot be read, 0 otherwise.

     tteerrssee(([[ffllaagg]]))
	  Set terse mode to _f_l_a_g.  In terse mode, the command
	  window stays hidden even in command mode, and errors
	  are reported by sounding the terminal's bell.  _F_l_a_g can
	  take on the same values as in _f_o_r_e_g_r_o_u_n_d above.
	  Returns the old terse flag.  Default is no change.

     uunnaalliiaass((aalliiaass))
	  Undefine _a_l_i_a_s.  Returns -1 if _a_l_i_a_s does not exist, 0
	  otherwise.

     uunnsseett((vvaarriiaabbllee))
	  Undefine _v_a_r_i_a_b_l_e.  Returns -1 if _v_a_r_i_a_b_l_e does not
	  exist, 0 otherwise.

     vvaarriiaabblleess(())
	  No arguments.  List all variables.  No value is
	  returned.

     wwiinnddooww(([[rrooww]],, [[ccoolluummnn]],, [[nnrrooww]],, [[nnccooll]],, [[nnlliinnee]],, [[ffrraammee]],,
	  [[ppttyy]],, [[mmaappnnll]],, [[sshheellll]]))
	  Open a window with upper left corner at _r_o_w, _c_o_l_u_m_n and
	  size _n_r_o_w, _n_c_o_l.  If _n_l_i_n_e is specified, then that many
	  lines are allocated for the text buffer.  Otherwise,
	  the default buffer size is used.  Default values for
	  _r_o_w, _c_o_l_u_m_n, _n_r_o_w, and _n_c_o_l are, respectively, the



Printed 7/9/88		  May 12, 1986				9






WINDOW(1)	    UNIX Programmer's Manual		WINDOW(1)



	  upper, left-most, lower, or right-most extremes of the
	  screen.  _F_r_a_m_e, _p_t_y, and _m_a_p_n_l are flag values inter-
	  preted in the same way as the argument to _f_o_r_e_g_r_o_u_n_d
	  (see above); they mean, respectively, put a frame
	  around this window (default true), allocate pseudo-
	  terminal for this window rather than socketpair
	  (default true), and map new line characters in this
	  window to carriage return and line feed (default true
	  if socketpair is used, false otherwise).  _S_h_e_l_l is a
	  list of strings that will be used as the shell program
	  to place in the window (default is the program speci-
	  fied by _s_h_e_l_l, see below).  The created window's iden-
	  tifier is returned as a number.

     wwrriittee(([[wwiinnddooww]],, [[<<ssttrriinngg--lliisstt>>]]))
	  Send the list of strings, <_s_t_r_i_n_g-_l_i_s_t>, to _w_i_n_d_o_w,
	  separated by spaces but not terminated with a new line.
	  The strings are actually given to the window as input.
	  No value is returned.  Default is the current window.

PPRREEDDEEFFIINNEEDD VVAARRIIAABBLLEESS
     These variables are for information only.	Redefining them
     does not affect the internal operation of _w_i_n_d_o_w.

     bbaauudd The baud rate as a number between 50 and 38400.

     mmooddeess
	  The display modes (reverse video, underline, blinking,
	  graphics) supported by the physical terminal.  The
	  value of _m_o_d_e_s is the bitwise or of some of the one bit
	  values, _m__b_l_k, _m__g_r_p, _m__r_e_v, and _m__u_l (see below).
	  These values are useful in setting the window cursors'
	  modes (see _c_u_r_s_o_r_m_o_d_e_s above).

     mm__bbllkk
	  The blinking mode bit.

     mm__ggrrpp
	  The graphics mode bit (not very useful).

     mm__rreevv
	  The reverse video mode bit.

     mm__uull The underline mode bit.

     nnccooll The number of columns on the physical screen.

     nnrrooww The number of rows on the physical screen.

     tteerrmm The terminal type.  The standard name, found in the
	  second name field of the terminal's _T_E_R_M_C_A_P entry, is
	  used.



Printed 7/9/88		  May 12, 1986			       10






WINDOW(1)	    UNIX Programmer's Manual		WINDOW(1)



FFIILLEESS
     ~/.windowrc    startup command file.
     /dev/[pt]ty[pq]?pseudo-terminal devices.

DDIIAAGGNNOOSSTTIICCSS
     Should be self explanatory.

BBUUGGSS












































Printed 7/9/88		  May 12, 1986			       11






