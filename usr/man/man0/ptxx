.xx "" "get/set options associated with a descriptor" "." "getdopt, setdopt:" getdopt(2)
.xx "" "gettable: get NIC format host tables from a host" "." "" gettable(8)
.xx "" "" "@: arithmetic on shell variables." "" csh(1)
.xx "" "xor, not \- bitwise functions .sp 1 rshift, lshift" "\- bit shifting functions." "/routines .sp 1 and, or," bit(3f)
.xx "" "/set, clear, test routines .sp 1 and, or, xor, not" "\- bitwise functions .sp 1 rshift, lshift \- bit/" "" bit(3f)
.xx "" "\*(dB" "- debugger." "" dbx(1)
.xx "" "pdx" "- pascal debugger." "" pdx(1)
.xx "" "remote" "- remote host description file for tip .ad." "" remote(5)
.xx "" "random number generator .br initstate, setstate" "\- routines for changing generators." "/better" random(3)
.xx "" "/bic, setbit, bit: bit set, clear, test routines .sp" "1 and, or, xor, not \- bitwise functions .sp 1/" "" bit(3f)
.xx "" "/.sp 1 and, or, xor, not \- bitwise functions .sp" "1 rshift, lshift \- bit shifting functions." "" bit(3f)
.xx "" "bad144: read/write dec standard" "144 bad sector information." "" bad144(8)
.xx "" "imp:" "1822 network interface." "" imp(4v)
.xx "" "ps: Evans and Sutherland Picture System" "2 graphics device interface." "" ps(4v)
.xx "" "l3tol, ltol3: convert between" "3-byte integers and long integers." "" l3tol(3)
.xx "" "ec:" "3Com 10 Mb/s Ethernet interface." "" ec(4v)
.xx "" "diff3:" "3-way differential file comparison." "" diff3(1)
.xx "" "tk: paginator for the Tektronix" "4014." "" tk(1)
.xx "" "trman: translate version" "6 manual macros to version 7 macros." "" trman(1)
.xx "" "trman: translate version 6 manual macros to version" "7 macros." "" trman(1)
.xx "" "" "aardvark: yet another exploration game." "" aardvark(6)
.xx "" "" "abort: generate a fault." "" abort(3)
.xx "" "" "abort: terminate abruptly with memory image." "" abort(3f)
.xx "" "index, rindex, lnblnk, len: tell" "about character objects." "" index(3f)
.xx "" "mincore: find out" "about core resident pages." "" mincore(2)
.xx "" "getrusage: get information" "about resource utilization." "" getrusage(2)
.xx "" "fstab: static information" "about the filesystems." "" fstab(5)
.xx "" "learn: computer aided instruction" "about UNIX." "" learn(1)
.xx "" "vfontinfo: inspect and print out information" "about UNIX fonts." "" vfontinfo(1)
.xx "" "abort: terminate" "abruptly with memory image." "" abort(3f)
.xx "" "" "abs: integer absolute value." "" abs(3)
.xx "" "abs: integer" "absolute value." "" abs(3)
.xx "" "fabs, floor, ceil:" "absolute value, floor, ceiling functions." "" floor(3M)
.xx "" "" "ac: login accounting." "" ac(8)
.xx "" "" "acc: ACC LH/DH IMP interface." "" acc(4v)
.xx "" "acc:" "ACC LH/DH IMP interface." "" acc(4v)
.xx "" "accept:" "accept a connection on a socket." "" accept(2)
.xx "" "" "accept: accept a connection on a socket." "" accept(2)
.xx "" "" "access: determine accessability of a file." "" access(3f)
.xx "" "" "access: determine accessibility of file." "" access(2)
.xx "" "getgroups: get group" "access list." "" getgroups(2)
.xx "" "initgroups: initialize group" "access list." "" initgroups(3)
.xx "" "setgroups: set group" "access list." "" setgroups(2)
.xx "" "access: determine" "accessability of a file." "" access(3f)
.xx "" "access: determine" "accessibility of file." "" access(2)
.xx "" "ac: login" "accounting." "" ac(8)
.xx "" "sa, accton: system" "accounting." "" sa(8)
.xx "" "acct: execution" "accounting file." "" acct(5)
.xx "" "pac: printer/ploter" "accounting information." "" pac(8)
.xx "" "acct: turn" "accounting on or off." "" acct(2)
.xx "" "" "acct: execution accounting file." "" acct(5)
.xx "" "" "acct: turn accounting on or off." "" acct(2)
.xx "" "sa," "accton: system accounting." "" sa(8)
.xx "" "sin, cos, tan, asin," "acos, atan, atan2: trigonometric functions." "" sin(3M)
.xx "" "rdump: file system dump" "across the network." "" rdump(8)
.xx "" "rrestor: file system dump" "across the network." "" rrestor(8)
.xx "" "signal: change the" "action for a signal." "" signal(3f)
.xx "" "disktab: disk description file" ".ad." "" disktab(5)
.xx "" "phones: remote host phone number data base" ".ad." "" phones(5)
.xx "" "remote - remote host description file for tip" ".ad." "" remote(5)
.xx "" "ad: Data Translation" "A/D converter." "" ad(4v)
.xx "" "" "ad: Data Translation A/D converter." "" ad(4v)
.xx "" "fortune: print a random, hopefully interesting," "adage." "" fortune(6)
.xx "" "" "adb: debugger." "" adb(1)
.xx "" "vswapon:" "add a swap device for interleaved paging/swapping." "" vswapon(2)
.xx "paging/swapping." "swapon, swapoff:" "add/delete a swap device for interleaved" "" swapon(2)
.xx "" "adduser: procedure for" "adding new users." "" adduser(8)
.xx "" "swapon: specify" "additional device for paging and swapping." "" swapon(8)
.xx "" "inet_makeaddr, inet_lnaof, inet_netof: Internet" "address manipulation routines." "/inet_network," inet(3n)
.xx "" "loc: return the" "address of an object." "" loc(3f)
.xx "" "" "adduser: procedure for adding new users." "" adduser(8)
.xx "" "" "adventure: an exploration game." "" adventure(6)
.xx "" "madvise: give" "advice to the paging system." "" madvise(2)
.xx "" "flock: apply or remove an" "advisory lock on an open file." "" flock(2)
.xx "" "yes: be repetitively" "affirmative." "" yes(1)
.xx "" "basename: strip filename" "affixes." "" basename(1)
.xx "" "learn: computer" "aided instruction about UNIX." "" learn(1)
.xx "" "" "alarm: execute a subroutine after a specified time." "" alarm(3f)
.xx "" "" "alias: shell macros." "" csh(1)
.xx "" "unalias: remove" "aliases." "" csh(1)
.xx "" "" "aliases: aliases file for sendmail." "" aliases(5)
.xx "" "which: locate a program file including" "aliases and paths (\fIcsh\fR only)." "" which(1)
.xx "" "newaliases: rebuild the data base for the mail" "aliases file." "" newaliases(1)
.xx "" "aliases:" "aliases file for sendmail." "" aliases(5)
.xx "" "aliens: The" "alien invaders attack the earth." "" aliens(6)
.xx "" "" "aliens: The alien invaders attack the earth." "" aliens(6)
.xx "" "valloc:" "aligned memory allocator." "" valloc(3)
.xx "" "malloc, free, realloc, calloc: main memory" "allocator." "" malloc(3)
.xx "" "valloc: aligned memory" "allocator." "" valloc(3)
.xx "" "eyacc: modified yacc" "allowing much improved error recovery." "" eyacc(1)
.xx "" "limit:" "alter per-process resource limitations." "" csh(1)
.xx "" "renice:" "alter priority of running process by changing nice." "" renice(8)
.xx "" "else:" "alternative commands." "" csh(1)
.xx "" "lex: generator of lexical" "analysis programs." "" lex(1)
.xx "" "error:" "analyze and disperse compiler error messages." "" error(1)
.xx "" "style:" "analyze surface characteristics of a document." "" style(1)
.xx "" "" "analyze: Virtual UNIX postmortem crash analyzer." "" analyze(8)
.xx "" "analyze: Virtual UNIX postmortem crash" "analyzer." "" analyze(8)
.xx "" "setbit, bit: bit set, clear, test routines .sp 1" "and, or, xor, not \- bitwise functions .sp 1/" "/bic," bit(3f)
.xx "" "worms:" "animate worms on a display terminal." "" worms(6)
.xx "" "rain:" "animated raindrops display." "" rain(6)
.xx "" "bcd: convert to" "antique media." "" bcd(6)
.xx "" "" "a.out: assembler and link editor output." "" a.out(5)
.xx "" "apply:" "apply a command to a set of arguments." "" apply(1)
.xx "" "" "apply: apply a command to a set of arguments." "" apply(1)
.xx "" "flock:" "apply or remove an advisory lock on an open file." "" flock(2)
.xx "" "" "apropos: locate commands by keyword lookup." "" apropos(1)
.xx "" "" "ar: archive and library maintainer." "" ar(1)
.xx "" "" "ar: archive (library) file format." "" ar(5)
.xx "" "number: convert" "Arabic numerals to English." "" number(6)
.xx "" "bc:" "arbitrary-precision arithmetic language." "" bc(1)
.xx "graphics/" "plot: openpl, erase, label, line, circle," "arc, move, cont, point, linemod, space, closepl:" "" plot(3x)
.xx "" "tp: manipulate tape" "archive." "" tp(1)
.xx "" "ar:" "archive and library maintainer." "" ar(1)
.xx "" "tar: tape" "archive file format." "" tar(5)
.xx "" "ar:" "archive (library) file format." "" ar(5)
.xx "" "tar: tape" "archiver." "" tar(1)
.xx "" "arff, flcopy:" "archiver and copier for floppy." "" arff(8)
.xx "" "arcv: convert" "archives to new format." "" arcv(8)
.xx "" "ranlib: convert" "archives to random libraries." "" ranlib(1)
.xx "" "" "arcv: convert archives to new format." "" arcv(8)
.xx "" "w: who is on and what they" "are doing." "" w(1)
.xx "" "users: compact list of users who" "are on the system." "" users(1)
.xx "" "" "arff, flcopy: archiver and copier for floppy." "" arff(8)
.xx "" "glob: filename expand" "argument list." "" csh(1)
.xx "" "shift: manipulate" "argument list." "" csh(1)
.xx "" "varargs: variable" "argument list." "" varargs(3)
.xx "" "apply: apply a command to a set of" "arguments." "" apply(1)
.xx "" "echo: echo" "arguments." "" csh(1)
.xx "" "echo: echo" "arguments." "" echo(1)
.xx "" "expr: evaluate" "arguments as an expression." "" expr(1)
.xx "" "getarg, iargc: command" "arguments to Fortran." "" getarg(3f)
.xx "" "traper: trap" "arithmetic errors." "" traper(3f)
.xx "" "bc: arbitrary-precision" "arithmetic language." "" bc(1)
.xx "" "@:" "arithmetic on shell variables." "" csh(1)
.xx "" "" "arithmetic: provide drill in number facts." "" arithmetic(6)
.xx "" "biff: be notified if mail" "arrives and who it is from." "" biff(1)
.xx "" "expr: evaluate arguments" "as an expression." "" expr(1)
.xx "" "" "as: VAX-11 assembler." "" as(1)
.xx "" "gmtime, asctime, timezone: convert date and time to" "ASCII." "ctime, localtime," ctime(3)
.xx "" "ascii: map of" "ASCII character set." "" ascii(7)
.xx "" "" "ascii: map of ASCII character set." "" ascii(7)
.xx "" "fdate: return date and time in an" "ASCII string." "" fdate(3f)
.xx "" "atof, atoi, atol: convert" "ASCII to numbers." "" atof(3)
.xx "" "ctime, localtime, gmtime," "asctime, timezone: convert date and time to ASCII." "" ctime(3)
.xx "" "sin, cos, tan," "asin, acos, atan, atan2: trigonometric functions." "" sin(3M)
.xx "" "as: VAX-11" "assembler." "" as(1)
.xx "" "a.out:" "assembler and link editor output." "" a.out(5)
.xx "" "" "assert: program verification." "" assert(3x)
.xx "" "setbuf, setbuffer, setlinebuf:" "assign buffering to a stream." "" setbuf(3S)
.xx "" "getdopt, setdopt: get/set options" "associated with a descriptor ." "" getdopt(2)
.xx "" "shutdown: close down the system" "at a given time." "" shutdown(8)
.xx "" "at: execute commands" "at a later time." "" at(1)
.xx "" "" "at: execute commands at a later time." "" at(1)
.xx "" "nice, nohup: run a command" "at low priority (\fIsh\fR only)." "" nice(1)
.xx "" "line printer daemon, restart downed daemons" "at reboot time." "lpd, lpdrestart:" lpd(8)
.xx "" "sin, cos, tan, asin, acos," "atan, atan2: trigonometric functions." "" sin(3M)
.xx "" "sin, cos, tan, asin, acos, atan," "atan2: trigonometric functions." "" sin(3M)
.xx "" "" "atof, atoi, atol: convert ASCII to numbers." "" atof(3)
.xx "" "atof," "atoi, atol: convert ASCII to numbers." "" atof(3)
.xx "" "atof, atoi," "atol: convert ASCII to numbers." "" atof(3)
.xx "" "aliens: The alien invaders" "attack the earth." "" aliens(6)
.xx "" "dn: DN-11" "autocall unit interface." "" dn(4v)
.xx "code." "" "autoconf: diagnostics from the autoconfiguration" "" autoconf(4v)
.xx "" "autoconf: diagnostics from the" "autoconfiguration code." "" autoconf(4v)
.xx "" "rc: command script for" "auto-reboot and daemons." "" rc(8)
.xx "" "wait:" "await completion of process." "" wait(1)
.xx "" "sleep: sleep for" "awhile." "" sleep(3f)
.xx "" "" "awk: pattern scanning and processing language." "" awk(1)
.xx "" "" "backgammon: the game." "" backgammon(6)
.xx "" "bg: place job in" "background." "" csh(1)
.xx "" "wait: wait for" "background processes to complete." "" csh(1)
.xx "" "bad144: read/write dec standard 144" "bad sector information." "" bad144(8)
.xx "" "badsect: create files to contain" "bad sectors." "" badsect(8)
.xx "information." "" "bad144: read/write dec standard 144 bad sector" "" bad144(8)
.xx "" "" "badsect: create files to contain bad sectors." "" badsect(8)
.xx "" "banner: print large" "banner on printer." "" banner(6)
.xx "" "" "banner: print large banner on printer." "" banner(6)
.xx "" "hosts: host name data" "base." "" hosts(5)
.xx "" "networks: network name data" "base." "" networks(5)
.xx "" "printcap: printer capability data" "base." "" printcap(5)
.xx "" "protocols: protocol name data" "base." "" protocols(5)
.xx "" "services: service name data" "base." "" services(5)
.xx "" "termcap: terminal capability data" "base." "" termcap(5)
.xx "" "vgrindefs: vgrind's language definition data" "base." "" vgrindefs(5)
.xx "" "phones: remote host phone number data" "base .ad." "" phones(5)
.xx "" "newaliases: rebuild the data" "base for the mail aliases file." "" newaliases(1)
.xx "" "ttytype: data" "base of terminal types by port." "" ttytype(5)
.xx "" "fetch, store, delete, firstkey, nextkey: data" "base subroutines." "dbminit," dbm(3x)
.xx "" "vi: screen oriented (visual) display editor" "based on ex." "" vi(1)
.xx "" "" "basename: strip filename affixes." "" basename(1)
.xx "" "" "bc: arbitrary-precision arithmetic language." "" bc(1)
.xx "" "" "bcd: convert to antique media." "" bcd(6)
.xx "" "bcopy," "bcmp, bzero: byte string operations." "" bstring(3)
.xx "" "" "bcopy, bcmp, bzero: byte string operations." "" bstring(3)
.xx "" "biff:" "be notified if mail arrives and who it is from." "" biff(1)
.xx "" "vlp \(em Format Lisp programs to" "be printed with nroff, vtroff, or troff." "" vlp(1)
.xx "" "yes:" "be repetitively affirmative." "" yes(1)
.xx "" "cb: C program" "beautifier." "" cb(1)
.xx "" "uptime: show how long system has" "been up." "" uptime(1)
.xx "" "va:" "Benson-Varian interface." "" va(4v)
.xx "" "vfont: font formats for the" "Benson-Varian or Versatec." "" vfont(5)
.xx "" "j0, j1, jn, y0, y1, yn:" "bessel functions." "" j0(3M)
.xx "" "" "bessel functions: of two kinds for integer orders." "" bessel(3f)
.xx "setstate \- routines for changing/" "random, srandom:" "better random number generator .br initstate," "" random(3)
.xx "" "" "bg: place job in background." "" csh(1)
.xx "1 and, or, xor, not \- bitwise functions .sp/" "bis," "bic, setbit, bit: bit set, clear, test routines .sp" "" bit(3f)
.xx "from." "" "biff: be notified if mail arrives and who it is" "" biff(1)
.xx "" "comsat:" "biff server." "" comsat(8)
.xx "" "install: install" "binaries." "" install(8)
.xx "" "whereis: locate source," "binary, and or manual for program." "" whereis(1)
.xx "" "find the printable strings in a object, or other" "binary, file." "strings:" strings(1)
.xx "" "uuencode,uudecode: encode/decode a" "binary file for tranmission via mail." "" uuencode(1C)
.xx "" "fread, fwrite: buffered" "binary input/output." "" fread(3S)
.xx "" "bind:" "bind a name to a socket." "" bind(2)
.xx "" "" "bind: bind a name to a socket." "" bind(2)
.xx "" "" "binmail: send or receive mail among users." "" binmail(1)
.xx "routines .sp 1 and, or, xor, not \- bitwise/" "" "bis, bic, setbit, bit: bit set, clear, test" "" bit(3f)
.xx "xor, not \- bitwise functions/" "bis, bic, setbit," "bit: bit set, clear, test routines .sp 1 and, or," "" bit(3f)
.xx "not \- bitwise functions/" "bis, bic, setbit, bit:" "bit set, clear, test routines .sp 1 and, or, xor," "" bit(3f)
.xx "" "not \- bitwise functions .sp 1 rshift, lshift \-" "bit shifting functions." "/.sp 1 and, or, xor," bit(3f)
.xx "" "strip: remove symbols and relocation" "bits." "" strip(1)
.xx "" "clear, test routines .sp 1 and, or, xor, not \-" "bitwise functions .sp 1 rshift, lshift \- bit/" "/set," bit(3f)
.xx "communication." "" "bk: line discipline for machine-machine" "" bk(4)
.xx "" "sync: update the super" "block." "" sync(8)
.xx "" "update: periodically update the super" "block." "" update(8)
.xx "" "sum: sum and count" "blocks in a file." "" sum(1)
.xx "" "boggle: play the game of" "boggle." "" boggle(6)
.xx "" "" "boggle: play the game of boggle." "" boggle(6)
.xx "" "ching, fortune: the" "book of changes and other cookies." "" ching(6)
.xx "" "reboot: UNIX" "bootstrapping procedures." "" reboot(8)
.xx "" "mille: play Mille" "Bournes." "" mille(6)
.xx "" "random, srandom: better random number generator" ".br initstate, setstate \- routines for changing/" "" random(3)
.xx "" "switch: multi-way command" "branch." "" csh(1)
.xx "login,/" "sh, for, case, if, while, \fB:\fP, \fB.\fP," "break, continue, cd, eval, exec, exit, export," "" sh(1)
.xx "" "" "break: exit while/foreach loop." "" csh(1)
.xx "" "" "breaksw: exit from switch." "" csh(1)
.xx "" "fg:" "bring job into foreground." "" csh(1)
.xx "" "" "brk, sbrk: change data segment size." "" brk(2)
.xx "" "ik: Ikonas frame" "buffer, graphics device interface." "" ik(4v)
.xx "" "fread, fwrite:" "buffered binary input/output." "" fread(3S)
.xx "" "stdio: standard" "buffered input/output package." "" intro(3S)
.xx "" "stdio: standard" "buffered input/output package." "" stdio(3S)
.xx "" "setbuf, setbuffer, setlinebuf: assign" "buffering to a stream." "" setbuf(3S)
.xx "" "generate a dump of the operating systems profile" "buffers." "kgmon:" kgmon(8)
.xx "" "mknod:" "build special file." "" mknod(8)
.xx "" "config:" "Build system configuration files." "" config(8)
.xx "" "renice: alter priority of running process" "by changing nice." "" renice(8)
.xx "" "getdiskbyname: get disk description" "by its name." "" getdisk(3x)
.xx "" "apropos: locate commands" "by keyword lookup." "" apropos(1)
.xx "" "man: find manual information" "by keywords; print out the manual." "" man(1)
.xx "" "mkstr: create an error message file" "by massaging C source." "" mkstr(1)
.xx "" "ttytype: data base of terminal types" "by port." "" ttytype(5)
.xx "" "ntohs: convert values between host and network" "byte order." "htonl, htons, ntohl," byteorder(3n)
.xx "" "bcopy, bcmp, bzero:" "byte string operations." "" bstring(3)
.xx "" "swab: swap" "bytes." "" swab(3)
.xx "" "bcopy, bcmp," "bzero: byte string operations." "" bstring(3)
.xx "" "cc:" "C compiler." "" cc(1)
.xx "" "cb:" "C program beautifier." "" cb(1)
.xx "" "indent: indent and format a" "C program source." "" indent(1)
.xx "" "lint: a" "C program verifier." "" lint(1)
.xx "" "xstr: extract strings from" "C programs to implement shared strings." "" xstr(1)
.xx "" "mkstr: create an error message file by massaging" "C source." "" mkstr(1)
.xx "" "hypot," "cabs: Euclidean distance." "" hypot(3M)
.xx "" "" "cal: print calendar." "" cal(1)
.xx "" "diskpart:" "calculate default disk partition sizes." "" diskpart(8)
.xx "" "dc: desk" "calculator." "" dc(1)
.xx "" "cal: print" "calendar." "" cal(1)
.xx "" "" "calendar: reminder service." "" calendar(1)
.xx "" "syscall: indirect system" "call." "" syscall(2)
.xx "" "gprof: display" "call graph profile data." "" gprof(1)
.xx "" "getuid, getgid: get user or group ID of the" "caller." "" getuid(3f)
.xx "" "malloc, free, realloc," "calloc: main memory allocator." "" malloc(3)
.xx "" "intro: introduction to system" "calls and error numbers." "" intro(2)
.xx "" "printcap: printer" "capability data base." "" printcap(5)
.xx "" "termcap: terminal" "capability data base." "" termcap(5)
.xx "" "cribbage: the" "card game cribbage." "" cribbage(6)
.xx "cd, eval, exec, exit, export, login,/" "sh, for," "case, if, while, \fB:\fP, \fB.\fP, break, continue," "" sh(1)
.xx "" "" "case: selector in switch." "" csh(1)
.xx "" "tu: VAX-11/730 TU58 console" "cassette interface." "" tu(4v)
.xx "" "" "cat: catenate and print." "" cat(1)
.xx "" "catman: create the" "cat files for the manual." "" catman(8)
.xx "" "uncompact, ccat: compress and uncompress files, and" "cat them." "compact," compact(1)
.xx "" "signal:" "catch or ignore signals." "" signal(2)
.xx "" "sigsys:" "catch or ignore signals." "" sigsys(2)
.xx "" "default:" "catchall clause in switch." "" csh(1)
.xx "" "cat:" "catenate and print." "" cat(1)
.xx "" "" "catman: create the cat files for the manual." "" catman(8)
.xx "" "" "cb: C program beautifier." "" cb(1)
.xx "" "" "cc: C compiler." "" cc(1)
.xx "" "compact, uncompact," "ccat: compress and uncompress files, and cat them." "" compact(1)
.xx "" "" "cd: change directory." "" csh(1)
.xx "" "" "cd: change working directory." "" cd(1)
.xx "" "/case, if, while, \fB:\fP, \fB.\fP, break, continue," "cd, eval, exec, exit, export, login, newgrp, read,/" "" sh(1)
.xx "" "fabs, floor," "ceil: absolute value, floor, ceiling functions." "" floor(3M)
.xx "" "fabs, floor, ceil: absolute value, floor," "ceiling functions." "" floor(3M)
.xx "" "chdir:" "change current working directory." "" chdir(2)
.xx "" "brk, sbrk:" "change data segment size." "" brk(2)
.xx "" "chdir:" "change default directory." "" chdir(3f)
.xx "" "chsh:" "change default login shell." "" chsh(1)
.xx "" "cd:" "change directory." "" csh(1)
.xx "" "chdir:" "change directory." "" csh(1)
.xx "" "chfn:" "change full name of user." "" chfn(1)
.xx "" "chgrp:" "change group." "" chgrp(1)
.xx "" "passwd:" "change login password." "" passwd(1)
.xx "" "mprotect:" "change memory protection." "" mprotect(2)
.xx "" "chmod:" "change mode." "" chmod(1)
.xx "" "chmod:" "change mode of file." "" chmod(2)
.xx "" "umask:" "change or display file creation mask." "" csh(1)
.xx "" "chown:" "change owner." "" chown(8)
.xx "" "chown:" "change owner and group of a file." "" chown(2)
.xx "" "chroot:" "change root directory." "" chroot(2)
.xx "" "stk, sstk:" "change stack segment size." "" stk(2)
.xx "" "signal:" "change the action for a signal." "" signal(3f)
.xx "" "rename:" "change the name of a file." "" rename(2)
.xx "" "set:" "change value of shell variable." "" csh(1)
.xx "" "cd:" "change working directory." "" cd(1)
.xx "" "ching, fortune: the book of" "changes and other cookies." "" ching(6)
.xx "" "generator .br initstate, setstate \- routines for" "changing generators." "/srandom: better random number" random(3)
.xx "" "renice: alter priority of running process by" "changing nice." "" renice(8)
.xx "" "pipe: create an interprocess communication" "channel." "" pipe(2)
.xx "" "ungetc: push" "character back into input stream." "" ungetc(3S)
.xx "" "isspace, ispunct, isprint, iscntrl, isascii:" "character classification." "/isdigit, isalnum," ctype(3)
.xx "" "eqnchar: special" "character definitions for eqn." "" eqnchar(7)
.xx "" "getc, fgetc: get a" "character from a logical unit." "" getc(3f)
.xx "" "index, rindex, lnblnk, len: tell about" "character objects." "" index(3f)
.xx "" "getc, getchar, fgetc, getw: get" "character or word from stream." "" getc(3S)
.xx "" "putc, putchar, fputc, putw: put" "character or word on a stream." "" putc(3S)
.xx "" "ascii: map of ASCII" "character set." "" ascii(7)
.xx "" "putc, fputc: write a" "character to a fortran logical unit." "" putc(3f)
.xx "" "style: analyze surface" "characteristics of a document." "" style(1)
.xx "" "tr: translate" "characters." "" tr(1)
.xx "" "snake, snscore: display" "chase game." "" snake(6)
.xx "" "" "chase: Try to escape to killer robots." "" chase(6)
.xx "" "" "chdir: change current working directory." "" chdir(2)
.xx "" "" "chdir: change default directory." "" chdir(3f)
.xx "" "" "chdir: change directory." "" csh(1)
.xx "" "dcheck: file system directory consistency" "check." "" dcheck(8)
.xx "" "icheck: file system storage consistency" "check." "" icheck(8)
.xx "" "fsck: file system consistency" "check and interactive repair." "" fsck(8)
.xx "" "checknr:" "check nroff/troff files." "" checknr(1)
.xx "" "eqn, neqn," "checkeq: typeset mathematics." "" eqn(1)
.xx "" "fastboot: reboot the system without" "checking the disks." "" fastboot(8)
.xx "" "" "checknr: check nroff/troff files." "" checknr(1)
.xx "" "chess: the game of" "chess." "" chess(6)
.xx "" "" "chess: the game of chess." "" chess(6)
.xx "" "" "chfn: change full name of user." "" chfn(1)
.xx "" "" "chgrp: change group." "" chgrp(1)
.xx "cookies." "" "ching, fortune: the book of changes and other" "" ching(6)
.xx "" "" "chmod: change mode." "" chmod(1)
.xx "" "" "chmod: change mode of file." "" chmod(2)
.xx "" "" "chown: change owner." "" chown(8)
.xx "" "" "chown: change owner and group of a file." "" chown(2)
.xx "" "" "chroot: change root directory." "" chroot(2)
.xx "" "" "chsh: change default login shell." "" chsh(1)
.xx "closepl:/" "plot: openpl, erase, label, line," "circle, arc, move, cont, point, linemod, space," "" plot(3x)
.xx "" "ispunct, isprint, iscntrl, isascii: character" "classification." "/isdigit, isalnum, isspace," ctype(3)
.xx "" "default: catchall" "clause in switch." "" csh(1)
.xx "" "uuclean: uucp spool directory" "clean-up." "" uuclean(8)
.xx "" "" "clear: clear terminal screen." "" clear(1)
.xx "" "clri:" "clear i-node." "" clri(8)
.xx "" "clear:" "clear terminal screen." "" clear(1)
.xx "bitwise functions/" "bis, bic, setbit, bit: bit set," "clear, test routines .sp 1 and, or, xor, not \-" "" bit(3f)
.xx "" "feof, ferror," "clearerr, fileno: stream status inquiries." "" ferror(3S)
.xx "" "csh: a shell (command interpreter) with" "C-like syntax." "" csh(1)
.xx "" "cron:" "clock daemon." "" cron(8)
.xx "" "" "close: delete a descriptor." "" close(2)
.xx "" "shutdown:" "close down the system at a given time." "" shutdown(8)
.xx "" "fclose, fflush:" "close or flush a stream." "" fclose(3S)
.xx "" "opendir, readdir, telldir, seekdir, rewinddir," "closedir: directory operations." "" directory(3)
.xx "" "syslog, openlog," "closelog: control system log." "" syslog(3)
.xx "" "circle, arc, move, cont, point, linemod, space," "closepl: graphics interface." "/erase, label, line," plot(3x)
.xx "" "" "clri: clear i-node." "" clri(8)
.xx "" "" "cmp: compare two files." "" cmp(1)
.xx "" "autoconf: diagnostics from the autoconfiguration" "code." "" autoconf(4v)
.xx "" "pi: Pascal interpreter" "code translator." "" pi(1)
.xx "" "" "col: filter reverse line feeds." "" col(1)
.xx "" "" "colcrt: filter nroff output for CRT previewing." "" colcrt(1)
.xx "log." "dmesg:" "collect system diagnostic messages to form error" "" dmesg(8)
.xx "" "" "colrm: remove columns from a file." "" colrm(1)
.xx "" "colrm: remove" "columns from a file." "" colrm(1)
.xx "files." "" "comm: select or reject lines common to two sorted" "" comm(1)
.xx "" "exec: overlay shell with specified" "command." "" csh(1)
.xx "" "time: time" "command." "" csh(1)
.xx "" "routines for returning a stream to a remote" "command." "rcmd, rresvport, ruserok:" rcmd(3x)
.xx "" "rexec: return stream to a remote" "command." "" rexec(3x)
.xx "" "system: issue a shell" "command." "" system(3)
.xx "" "system: execute a unix" "command." "" system(3f)
.xx "" "test: condition" "command." "" test(1)
.xx "" "time: time a" "command." "" time(1)
.xx "" "getarg, iargc:" "command arguments to Fortran." "" getarg(3f)
.xx "" "nice, nohup: run a" "command at low priority (\fIsh\fR only)." "" nice(1)
.xx "" "switch: multi-way" "command branch." "" csh(1)
.xx "" "uux: unix to unix" "command execution." "" uux(1C)
.xx "" "netrm: remove a" "command from the network queue." "" netrm(1)
.xx "" "rehash: recompute" "command hash table." "" csh(1)
.xx "" "unhash: discard" "command hash table." "" csh(1)
.xx "" "hashstat: print" "command hashing statistics." "" csh(1)
.xx "" "nohup: run" "command immune to hangups." "" csh(1)
.xx "" "csh: a shell" "(command interpreter) with C-like syntax." "" csh(1)
.xx "" "whatis: describe what a" "command is." "" whatis(1)
.xx "" "readonly, set, shift, times, trap, umask, wait:" "command language." "/export, login, newgrp, read," sh(1)
.xx "" "net: execute a" "command on a remote machine." "" net(1)
.xx "" "repeat: execute" "command repeatedly." "" csh(1)
.xx "" "rc:" "command script for auto-reboot and daemons." "" rc(8)
.xx "" "onintr: process interrupts in" "command scripts." "" csh(1)
.xx "" "apply: apply a" "command to a set of arguments." "" apply(1)
.xx "" "goto:" "command transfer." "" csh(1)
.xx "" "else: alternative" "commands." "" csh(1)
.xx "" "intro: introduction to" "commands." "" intro(1)
.xx "" "introduction to system maintenance and operation" "commands." "intro:" intro(8)
.xx "" "at: execute" "commands at a later time." "" at(1)
.xx "" "apropos: locate" "commands by keyword lookup." "" apropos(1)
.xx "" "while: repeat" "commands conditionally." "" csh(1)
.xx "" "lastcomm: show last" "commands executed in reverse order." "" lastcomm(1)
.xx "" "source: read" "commands from file." "" csh(1)
.xx "" "comm: select or reject lines" "common to two sorted files." "" comm(1)
.xx "" "bk: line discipline for machine-machine" "communication." "" bk(4)
.xx "" "socket: create an endpoint for" "communication." "" socket(2)
.xx "" "pipe: create an interprocess" "communication channel." "" pipe(2)
.xx "" "dmc: DEC DMC-11/DMR-11 point-to-point" "communications device." "" dmc(4v)
.xx "" "dh/dm: DH-11/DM-11" "communications multiplexer." "" dh(4v)
.xx "" "dz: DZ-11" "communications multiplexer." "" dz(4v)
.xx "" "users:" "compact list of users who are on the system." "" users(1)
.xx "files, and cat them." "" "compact, uncompact, ccat: compress and uncompress" "" compact(1)
.xx "" "diff: differential file and directory" "comparator." "" diff(1)
.xx "" "cmp:" "compare two files." "" cmp(1)
.xx "" "diff3: 3-way differential file" "comparison." "" diff3(1)
.xx "" "uudiff: directory" "comparison between machines." "" uudiff(1C)
.xx "" "liszt:" "compile a Franz Lisp program." "" liszt(1)
.xx "" "cc: C" "compiler." "" cc(1)
.xx "" "f77: Fortran 77" "compiler." "" f77(1)
.xx "" "pc: Pascal" "compiler." "" pc(1)
.xx "" "error: analyze and disperse" "compiler error messages." "" error(1)
.xx "" "yacc: yet another" "compiler-compiler." "" yacc(1)
.xx "" "fp: Functional Programming language" "compiler/interpreter." "" fp(1)
.xx "" "wait: wait for background processes to" "complete." "" csh(1)
.xx "" "wait: await" "completion of process." "" wait(1)
.xx "" "compact, uncompact, ccat:" "compress and uncompress files, and cat them." "" compact(1)
.xx "" "learn:" "computer aided instruction about UNIX." "" learn(1)
.xx "" "hangman:" "Computer version of the game hangman." "" hangman(6)
.xx "" "" "comsat: biff server." "" comsat(8)
.xx "" "test:" "condition command." "" test(1)
.xx "" "endif: terminate" "conditional." "" csh(1)
.xx "" "if:" "conditional statement." "" csh(1)
.xx "" "while: repeat commands" "conditionally." "" csh(1)
.xx "" "" "config: Build system configuration files." "" config(8)
.xx "" "config: Build system" "configuration files." "" config(8)
.xx "" "" "connect: initiate a connection on a socket." "" connect(2)
.xx "" "tip:" "connect to a remote system." "" tip(1C)
.xx "" "socketpair: create a pair of" "connected sockets." "" socketpair(2)
.xx "" "shutdown: shut down part of a full-duplex" "connection." "" shutdown(2)
.xx "" "accept: accept a" "connection on a socket." "" accept(2)
.xx "" "connect: initiate a" "connection on a socket." "" connect(2)
.xx "" "listen: listen for" "connections on a socket." "" listen(2)
.xx "" "" "cons: VAX-11 console interface." "" cons(4v)
.xx "" "dcheck: file system directory" "consistency check." "" dcheck(8)
.xx "" "icheck: file system storage" "consistency check." "" icheck(8)
.xx "" "fsck: file system" "consistency check and interactive repair." "" fsck(8)
.xx "" "tu: VAX-11/730 TU58" "console cassette interface." "" tu(4v)
.xx "" "cons: VAX-11" "console interface." "" cons(4v)
.xx "" "show what versions of object modules were used to" "construct a file." "what:" what(1)
.xx "" "mkfs:" "construct a file system." "" mkfs(8)
.xx "" "newfs:" "construct a new file system." "" newfs(8)
.xx "" "mkproto:" "construct a pototype file system." "" mkproto(8)
.xx "" "deroff: remove nroff, troff, tbl and eqn" "constructs." "" deroff(1)
.xx "" "setrlimit: control maximum system resource" "consumption." "getrlimit," getrlimit(2)
.xx "" "/openpl, erase, label, line, circle, arc, move," "cont, point, linemod, space, closepl: graphics/" "" plot(3x)
.xx "" "badsect: create files to" "contain bad sectors." "" badsect(8)
.xx "" "ls: list" "contents of directory." "" ls(1)
.xx "" "netq: print" "contents of network queue." "" netq(1)
.xx "" "sh, for, case, if, while, \fB:\fP, \fB.\fP, break," "continue, cd, eval, exec, exit, export, login,/" "" sh(1)
.xx "" "" "continue: cycle in loop." "" csh(1)
.xx "" "ioctl:" "control device." "" ioctl(2)
.xx "" "intro: summary of job" "control facilities." "" intro(3j)
.xx "" "jobs: summary of job" "control facilities." "" jobs(3j)
.xx "" "init: process" "control initialization." "" init(8)
.xx "" "getrlimit, setrlimit:" "control maximum system resource consumption." "" getrlimit(2)
.xx "" "tcp: Internet Transmission" "Control Protocol." "" tcp(4p)
.xx "" "syslog, openlog, closelog:" "control system log." "" syslog(3)
.xx "" "vhangup: virtually ``hangup'' the current" "control terminal." "" vhangup(2)
.xx "" "uda: UDA-50 disk" "controller interface." "" uda(4v)
.xx "" "up: unibus storage module" "controller/drives." "" up(4v)
.xx "" "terminals:" "conventional names." "" term(7)
.xx "" "ecvt, fcvt, gcvt: output" "conversion." "" ecvt(3)
.xx "" "printf, fprintf, sprintf: formatted output" "conversion." "" printf(3S)
.xx "" "scanf, fscanf, sscanf: formatted input" "conversion." "" scanf(3S)
.xx "" "units:" "conversion program." "" units(1)
.xx "" "dd:" "convert and copy a file." "" dd(1)
.xx "" "number:" "convert Arabic numerals to English." "" number(6)
.xx "" "arcv:" "convert archives to new format." "" arcv(8)
.xx "" "ranlib:" "convert archives to random libraries." "" ranlib(1)
.xx "" "atof, atoi, atol:" "convert ASCII to numbers." "" atof(3)
.xx "" "l3tol, ltol3:" "convert between 3-byte integers and long integers." "" l3tol(3)
.xx "" "ctime, localtime, gmtime, asctime, timezone:" "convert date and time to ASCII." "" ctime(3)
.xx "" "htable:" "convert NIC standard format host tables." "" htable(8)
.xx "" "bcd:" "convert to antique media." "" bcd(6)
.xx "" "htonl, htons, ntohl, ntohs:" "convert values between host and network byte order." "" byteorder(3n)
.xx "" "ad: Data Translation A/D" "converter." "" ad(4v)
.xx "" "ching, fortune: the book of changes and other" "cookies." "" ching(6)
.xx "" "arff, flcopy: archiver and" "copier for floppy." "" arff(8)
.xx "" "cp:" "copy." "" cp(1)
.xx "" "rcp: remote file" "copy." "" rcp(1C)
.xx "" "uucp, uulog: unix to unix" "copy." "" uucp(1C)
.xx "" "dd: convert and" "copy a file." "" dd(1)
.xx "" "netcp: remote" "copy of files through the net." "" netcp(1)
.xx "" "fork: create a" "copy of this process." "" fork(3f)
.xx "" "savecore: save a" "core dump of the operating system." "" savecore(8)
.xx "" "" "core: format of memory image file." "" core(5)
.xx "" "gcore: get" "core images of running processes." "" gcore(1)
.xx "" "mincore: find out about" "core resident pages." "" mincore(2)
.xx "functions." "sin," "cos, tan, asin, acos, atan, atan2: trigonometric" "" sin(3M)
.xx "" "sinh," "cosh, tanh: hyperbolic functions." "" sinh(3M)
.xx "" "wc: word" "count." "" wc(1)
.xx "" "sum: sum and" "count blocks in a file." "" sum(1)
.xx "" "" "cp: copy." "" cp(1)
.xx "" "analyze: Virtual UNIX postmortem" "crash analyzer." "" analyze(8)
.xx "" "" "crash: what happens when the system crashes." "" crash(8)
.xx "" "crash: what happens when the system" "crashes." "" crash(8)
.xx "" "fork:" "create a copy of this process." "" fork(3f)
.xx "" "open: open a file for reading or writing, or" "create a new file." "" open(2)
.xx "" "fork:" "create a new process." "" fork(2)
.xx "" "socketpair:" "create a pair of connected sockets." "" socketpair(2)
.xx "" "ctags:" "create a tags file." "" ctags(1)
.xx "" "socket:" "create an endpoint for communication." "" socket(2)
.xx "" "mkstr:" "create an error message file by massaging C source." "" mkstr(1)
.xx "" "pipe:" "create an interprocess communication channel." "" pipe(2)
.xx "" "badsect:" "create files to contain bad sectors." "" badsect(8)
.xx "" "catman:" "create the cat files for the manual." "" catman(8)
.xx "" "umask: change or display file" "creation mask." "" csh(1)
.xx "" "umask: set file" "creation mode mask." "" umask(2)
.xx "" "cribbage: the card game" "cribbage." "" cribbage(6)
.xx "" "" "cribbage: the card game cribbage." "" cribbage(6)
.xx "" "" "cron: clock daemon." "" cron(8)
.xx "" "lxref: lisp" "cross reference program." "" lxref(1)
.xx "" "pxref: Pascal" "cross-reference program." "" pxref(1)
.xx "" "colcrt: filter nroff output for" "CRT previewing." "" colcrt(1)
.xx "" "more, page: file perusal filter for" "crt viewing." "" more(1)
.xx "" "" "crypt: encode/decode." "" crypt(1)
.xx "" "" "crypt, setkey, encrypt: DES encryption." "" crypt(3)
.xx "syntax." "" "csh: a shell (command interpreter) with C-like" "" csh(1)
.xx "" "" "css: DEC IMP-11A LH/DH IMP interface." "" css(4v)
.xx "" "" "ct: phototypesetter interface." "" ct(4v)
.xx "" "" "ctags: create a tags file." "" ctags(1)
.xx "convert date and time to ASCII." "" "ctime, localtime, gmtime, asctime, timezone:" "" ctime(3)
.xx "" "time," "ctime, ltime, gmtime: return system time." "" time(3f)
.xx "" "vhangup: virtually ``hangup'' the" "current control terminal." "" vhangup(2)
.xx "" "gethostid, sethostid: get/set unique identifier of" "current host." "" gethostid(2)
.xx "" "gethostname, sethostname: get/set name of" "current host." "" gethostname(2)
.xx "" "hostname: set or print name of" "current host system." "" hostname(1)
.xx "" "jobs: print" "current job list." "" csh(1)
.xx "" "whoami: print effective" "current user id." "" whoami(1)
.xx "" "chdir: change" "current working directory." "" chdir(2)
.xx "" "getwd: get" "current working directory pathname." "" getwd(3)
.xx "motion." "" "curses: screen functions with ``optimal'' cursor" "" curses(3x)
.xx "" "curses: screen functions with ``optimal''" "cursor motion." "" curses(3x)
.xx "" "spline: interpolate smooth" "curve." "" spline(1G)
.xx "" "continue:" "cycle in loop." "" csh(1)
.xx "" "cron: clock" "daemon." "" cron(8)
.xx "" "routed: network routing" "daemon." "" routed(8)
.xx "" "lpd, lpdrestart: line printer" "daemon, restart downed daemons at reboot time." "" lpd(8)
.xx "" "rc: command script for auto-reboot and" "daemons." "" rc(8)
.xx "" "lpdrestart: line printer daemon, restart downed" "daemons at reboot time." "lpd," lpd(8)
.xx "" "ftpd:" "DARPA Internet File Transfer Protocol server." "" ftpd(8)
.xx "" "telnetd:" "DARPA TELNET protocol server." "" telnetd(8)
.xx "" "tftp:" "DARPA Trivial File Transfer Protocol server." "" tftpd(8)
.xx "" "eval: re-evaluate shell" "data." "" csh(1)
.xx "" "gprof: display call graph profile" "data." "" gprof(1)
.xx "" "prof: display profile" "data." "" prof(1)
.xx "" "ttys: terminal initialization" "data." "" ttys(5)
.xx "" "hosts: host name" "data base." "" hosts(5)
.xx "" "networks: network name" "data base." "" networks(5)
.xx "" "printcap: printer capability" "data base." "" printcap(5)
.xx "" "protocols: protocol name" "data base." "" protocols(5)
.xx "" "services: service name" "data base." "" services(5)
.xx "" "termcap: terminal capability" "data base." "" termcap(5)
.xx "" "vgrindefs: vgrind's language definition" "data base." "" vgrindefs(5)
.xx "" "phones: remote host phone number" "data base .ad." "" phones(5)
.xx "" "newaliases: rebuild the" "data base for the mail aliases file." "" newaliases(1)
.xx "" "ttytype:" "data base of terminal types by port." "" ttytype(5)
.xx "" "dbminit, fetch, store, delete, firstkey, nextkey:" "data base subroutines." "" dbm(3x)
.xx "" "brk, sbrk: change" "data segment size." "" brk(2)
.xx "" "null:" "data sink." "" null(4)
.xx "" "ad:" "Data Translation A/D converter." "" ad(4v)
.xx "" "types: primitive system" "data types." "" types(5)
.xx "" "join: relational" "database operator." "" join(1)
.xx "" "udp: Internet User" "Datagram Protocol." "" udp(4p)
.xx "" "date: print and set the" "date." "" date(1)
.xx "" "gettimeofday, settimeofday: get/set" "date and time." "" gettimeofday(2)
.xx "" "fdate: return" "date and time in an ASCII string." "" fdate(3f)
.xx "" "localtime, gmtime, asctime, timezone: convert" "date and time to ASCII." "ctime," ctime(3)
.xx "" "touch: update" "date last modified of a file." "" touch(1)
.xx "" "idate, itime: return" "date or time in numerical form." "" idate(3f)
.xx "" "" "date: print and set the date." "" date(1)
.xx "" "" "\*(dB - debugger." "" dbx(1)
.xx "data base subroutines." "" "dbminit, fetch, store, delete, firstkey, nextkey:" "" dbm(3x)
.xx "" "" "dc: desk calculator." "" dc(1)
.xx "" "" "dcheck: file system directory consistency check." "" dcheck(8)
.xx "" "" "dd: convert and copy a file." "" dd(1)
.xx "" "dump," "ddate: incremental dump format." "" dump(5)
.xx "" "adb:" "debugger." "" adb(1)
.xx "" "\*(dB -" "debugger." "" dbx(1)
.xx "" "pdx - pascal" "debugger." "" pdx(1)
.xx "device." "dmc:" "DEC DMC-11/DMR-11 point-to-point communications" "" dmc(4v)
.xx "" "css:" "DEC IMP-11A LH/DH IMP interface." "" css(4v)
.xx "" "rx:" "DEC RX02 floppy disk interface." "" rx(4v)
.xx "" "bad144: read/write" "dec standard 144 bad sector information." "" bad144(8)
.xx "" "tp:" "DEC/mag tape formats." "" tp(5)
.xx "" "" "default: catchall clause in switch." "" csh(1)
.xx "" "chdir: change" "default directory." "" chdir(3f)
.xx "" "diskpart: calculate" "default disk partition sizes." "" diskpart(8)
.xx "" "chsh: change" "default login shell." "" chsh(1)
.xx "" "vgrindefs: vgrind's language" "definition data base." "" vgrindefs(5)
.xx "" "eqnchar: special character" "definitions for eqn." "" eqnchar(7)
.xx "" "close:" "delete a descriptor." "" close(2)
.xx "" "dbminit, fetch, store," "delete, firstkey, nextkey: data base subroutines." "" dbm(3x)
.xx "" "tail:" "deliver the last part of a file." "" tail(1)
.xx "" "mesg: permit or" "deny messages." "" mesg(1)
.xx "" "tset: terminal" "dependent initialization." "" tset(1)
.xx "constructs." "" "deroff: remove nroff, troff, tbl and eqn" "" deroff(1)
.xx "" "crypt, setkey, encrypt:" "DES encryption." "" crypt(3)
.xx "" "whatis:" "describe what a command is." "" whatis(1)
.xx "" "getdiskbyname: get disk" "description by its name." "" getdisk(3x)
.xx "" "disktab: disk" "description file .ad." "" disktab(5)
.xx "" "remote - remote host" "description file for tip .ad." "" remote(5)
.xx "" "close: delete a" "descriptor." "" close(2)
.xx "" "dup, dup2: duplicate a" "descriptor." "" dup(2)
.xx "" "getdopt, setdopt: get/set options associated with a" "descriptor ." "" getdopt(2)
.xx "" "getfsfile, setfsent, endfsent: get file system" "descriptor file entry." "getfsent, getfsspec," getfsent(3)
.xx "" "getdtablesize: get" "descriptor table size." "" getdtablesize(2)
.xx "" "dc:" "desk calculator." "" dc(1)
.xx "" "access:" "determine accessability of a file." "" access(3f)
.xx "" "access:" "determine accessibility of file." "" access(2)
.xx "" "file:" "determine file type." "" file(1)
.xx "" "DEC DMC-11/DMR-11 point-to-point communications" "device." "dmc:" dmc(4v)
.xx "" "drum: paging" "device." "" drum(4)
.xx "" "fold: fold long lines for finite width output" "device." "" fold(1)
.xx "" "ioctl: control" "device." "" ioctl(2)
.xx "" "swapon, swapoff: add/delete a swap" "device for interleaved paging/swapping." "" swapon(2)
.xx "" "vswapon: add a swap" "device for interleaved paging/swapping." "" vswapon(2)
.xx "" "swapon: specify additional" "device for paging and swapping." "" swapon(8)
.xx "" "ik: Ikonas frame buffer, graphics" "device interface." "" ik(4v)
.xx "" "ps: Evans and Sutherland Picture System 2 graphics" "device interface." "" ps(4v)
.xx "" "intro: introduction to VAX" "devices." "" intro(4v)
.xx "" "" "df: disk free." "" df(1)
.xx "" "flmin, flmax, dflmin," "dflmax, inmax: return extreme values." "" range(3f)
.xx "" "flmin, flmax," "dflmin, dflmax, inmax: return extreme values." "" range(3f)
.xx "" "dh/dm:" "DH-11/DM-11 communications multiplexer." "" dh(4v)
.xx "" "" "dh/dm: DH-11/DM-11 communications multiplexer." "" dh(4v)
.xx "" "dmesg: collect system" "diagnostic messages to form error log." "" dmesg(8)
.xx "" "autoconf:" "diagnostics from the autoconfiguration code." "" autoconf(4v)
.xx "" "ratfor: rational Fortran" "dialect." "" ratfor(1)
.xx "" "print wordy sentences; thesaurus for" "diction." "diction,explain:" diction(1)
.xx "" "print wordy sentences; thesaurus for" "diction." "diction,explain:" explain(1)
.xx "for diction." "" "diction,explain: print wordy sentences; thesaurus" "" diction(1)
.xx "for diction." "" "diction,explain: print wordy sentences; thesaurus" "" explain(1)
.xx "" "" "diff: differential file and directory comparator." "" diff(1)
.xx "" "" "diff3: 3-way differential file comparison." "" diff3(1)
.xx "" "diff:" "differential file and directory comparator." "" diff(1)
.xx "" "diff3: 3-way" "differential file comparison." "" diff3(1)
.xx "" "" "dir: format of directories." "" dir(5)
.xx "" "dir: format of" "directories." "" dir(5)
.xx "" "rm, rmdir: remove (unlink) files or" "directories." "" rm(1)
.xx "" "rmdir, rm: remove (unlink)" "directories or files." "" rmdir(1)
.xx "" "cd: change working" "directory." "" cd(1)
.xx "" "chdir: change current working" "directory." "" chdir(2)
.xx "" "chdir: change default" "directory." "" chdir(3f)
.xx "" "chroot: change root" "directory." "" chroot(2)
.xx "" "cd: change" "directory." "" csh(1)
.xx "" "chdir: change" "directory." "" csh(1)
.xx "" "ls: list contents of" "directory." "" ls(1)
.xx "" "mkdir: make a" "directory." "" mkdir(1)
.xx "" "scandir: scan a" "directory." "" scandir(3)
.xx "" "uuclean: uucp spool" "directory clean-up." "" uuclean(8)
.xx "" "diff: differential file and" "directory comparator." "" diff(1)
.xx "" "uudiff:" "directory comparison between machines." "" uudiff(1C)
.xx "" "dcheck: file system" "directory consistency check." "" dcheck(8)
.xx "" "unlink: remove" "directory entry." "" unlink(2)
.xx "" "unlink: remove a" "directory entry." "" unlink(3f)
.xx "" "mkdir: make a" "directory file." "" mkdir(2)
.xx "" "rmdir: remove a" "directory file." "" rmdir(2)
.xx "" "mklost+found: make a lost+found" "directory for fsck." "" mklost+found(8)
.xx "" "pwd: working" "directory name." "" pwd(1)
.xx "" "readdir, telldir, seekdir, rewinddir, closedir:" "directory operations." "opendir," directory(3)
.xx "" "getwd: get current working" "directory pathname." "" getwd(3)
.xx "" "popd: pop shell" "directory stack." "" csh(1)
.xx "" "pushd: push shell" "directory stack." "" csh(1)
.xx "" "unhash:" "discard command hash table." "" csh(1)
.xx "" "unset:" "discard shell variables." "" csh(1)
.xx "" "bk: line" "discipline for machine-machine communication." "" bk(4)
.xx "" "synchronize a file's in-core state with that on" "disk." "fsync:" fsync(2)
.xx "" "hk: RK6-11/RK06 and RK07 moving head" "disk." "" hk(4v)
.xx "" "uda: UDA-50" "disk controller interface." "" uda(4v)
.xx "" "getdiskbyname: get" "disk description by its name." "" getdisk(3x)
.xx "" "disktab:" "disk description file .ad." "" disktab(5)
.xx "" "nd: net" "disk driver." "" nd(4s)
.xx "" "df:" "disk free." "" df(1)
.xx "" "hp: MASSBUS" "disk interface." "" hp(4v)
.xx "" "rx: DEC RX02 floppy" "disk interface." "" rx(4v)
.xx "" "format: how to format" "disk packs." "" format(8)
.xx "" "diskpart: calculate default" "disk partition sizes." "" diskpart(8)
.xx "" "du: summarize" "disk usage." "" du(1)
.xx "" "" "diskpart: calculate default disk partition sizes." "" diskpart(8)
.xx "" "fastboot: reboot the system without checking the" "disks." "" fastboot(8)
.xx "" "" "disktab: disk description file .ad." "" disktab(5)
.xx "" "mount, umount: mount and" "dismount file system." "" mount(8)
.xx "" "error: analyze and" "disperse compiler error messages." "" error(1)
.xx "" "rain: animated raindrops" "display." "" rain(6)
.xx "" "gprof:" "display call graph profile data." "" gprof(1)
.xx "" "snake, snscore:" "display chase game." "" snake(6)
.xx "" "vi: screen oriented (visual)" "display editor based on ex." "" vi(1)
.xx "" "umask: change or" "display file creation mask." "" csh(1)
.xx "" "prof:" "display profile data." "" prof(1)
.xx "" "sysline:" "display system status on status line of a terminal." "" sysline(1)
.xx "" "worms: animate worms on a" "display terminal." "" worms(6)
.xx "" "hypot, cabs: Euclidean" "distance." "" hypot(3M)
.xx "communications device." "" "dmc: DEC DMC-11/DMR-11 point-to-point" "" dmc(4v)
.xx "" "dmc: DEC" "DMC-11/DMR-11 point-to-point communications device." "" dmc(4v)
.xx "error log." "" "dmesg: collect system diagnostic messages to form" "" dmesg(8)
.xx "" "" "dmf: DMF-32, terminal multiplexor." "" dmf(4v)
.xx "" "dmf:" "DMF-32, terminal multiplexor." "" dmf(4v)
.xx "" "" "dn: DN-11 autocall unit interface." "" dn(4v)
.xx "" "dn:" "DN-11 autocall unit interface." "" dn(4v)
.xx "" "" "doctor: interact with a psychoanalyst." "" doctor(6)
.xx "" "style: analyze surface characteristics of a" "document." "" style(1)
.xx "" "lookbib\- find literature references in" "documents." "" lookbib(1)
.xx "" "refer: find and insert literature references in" "documents." "" refer(1)
.xx "" "w: who is on and what they are" "doing." "" w(1)
.xx "" "rogue: Exploring The Dungeons of" "Doom." "" rogue(6)
.xx "" "shutdown: shut" "down part of a full-duplex connection." "" shutdown(2)
.xx "" "shutdown: close" "down the system at a given time." "" shutdown(8)
.xx "" "lpd, lpdrestart: line printer daemon, restart" "downed daemons at reboot time." "" lpd(8)
.xx "" "rand," "drand, irand: return random values." "" rand(3f)
.xx "" "graph:" "draw a graph." "" graph(1G)
.xx "" "arithmetic: provide" "drill in number facts." "" arithmetic(6)
.xx "" "ut: UNIBUS TU45 tri-density tape" "drive interface." "" ut(4v)
.xx "" "nd: net disk" "driver." "" nd(4s)
.xx "" "pty: pseudo terminal" "driver." "" pty(4)
.xx "" "" "drum: paging device." "" drum(4)
.xx "" "etime," "dtime: return elapsed execution time." "" etime(3f)
.xx "" "" "du: summarize disk usage." "" du(1)
.xx "" "dump: incremental file system" "dump." "" dump(8)
.xx "" "od: octal" "dump." "" od(1)
.xx "" "rdump: file system" "dump across the network." "" rdump(8)
.xx "" "rrestor: file system" "dump across the network." "" rrestor(8)
.xx "" "" "dump, ddate: incremental dump format." "" dump(5)
.xx "" "dumpfs:" "dump file system information." "" dumpfs(8)
.xx "" "dump, ddate: incremental" "dump format." "" dump(5)
.xx "" "" "dump: incremental file system dump." "" dump(8)
.xx "" "savecore: save a core" "dump of the operating system." "" savecore(8)
.xx "" "kgmon: generate a" "dump of the operating systems profile buffers." "" kgmon(8)
.xx "" "" "dumpfs: dump file system information." "" dumpfs(8)
.xx "" "zork: the game of" "dungeon." "" zork(6)
.xx "" "rogue: Exploring The" "Dungeons of Doom." "" rogue(6)
.xx "" "" "dup, dup2: duplicate a descriptor." "" dup(2)
.xx "" "dup," "dup2: duplicate a descriptor." "" dup(2)
.xx "" "dup, dup2:" "duplicate a descriptor." "" dup(2)
.xx "" "" "dz: DZ-11 communications multiplexer." "" dz(4v)
.xx "" "dz:" "DZ-11 communications multiplexer." "" dz(4v)
.xx "" "aliens: The alien invaders attack the" "earth." "" aliens(6)
.xx "" "" "ec: 3Com 10 Mb/s Ethernet interface." "" ec(4v)
.xx "" "echo:" "echo arguments." "" csh(1)
.xx "" "echo:" "echo arguments." "" echo(1)
.xx "" "" "echo: echo arguments." "" csh(1)
.xx "" "" "echo: echo arguments." "" echo(1)
.xx "" "" "ecvt, fcvt, gcvt: output conversion." "" ecvt(3)
.xx "" "" "ed: text editor." "" ed(1)
.xx "" "end, etext," "edata: last locations in program." "" end(3)
.xx "" "ex," "edit: text editor." "" ex(1)
.xx "" "vipw:" "edit the password file with vi." "" vipw(8)
.xx "" "ed: text" "editor." "" ed(1)
.xx "" "ex, edit: text" "editor." "" ex(1)
.xx "" "fed: font" "editor." "" fed(1)
.xx "" "ld: link" "editor." "" ld(1)
.xx "" "sed: stream" "editor." "" sed(1)
.xx "" "vi: screen oriented (visual) display" "editor based on ex." "" vi(1)
.xx "" "a.out: assembler and link" "editor output." "" a.out(5)
.xx "" "whoami: print" "effective current user id." "" whoami(1)
.xx "" "setregid: set real and" "effective group ID." "" setregid(2)
.xx "" "setreuid: set real and" "effective user ID's." "" setreuid(2)
.xx "" "vfork: spawn new process in a virtual memory" "efficient way." "" vfork(2)
.xx "" "" "efl: Extended Fortran Language." "" efl(1)
.xx "" "grep," "egrep, fgrep: search a file for a pattern." "" grep(1)
.xx "" "etime, dtime: return" "elapsed execution time." "" etime(3f)
.xx "" "soelim:" "eliminate \&.so's from nroff input." "" soelim(1)
.xx "" "" "else: alternative commands." "" csh(1)
.xx "vtroff, or troff." "vlp" "\(em Format Lisp programs to be printed with nroff," "" vlp(1)
.xx "" "" "en: Xerox 3 Mb/s Ethernet interface." "" en(4v)
.xx "" "uuencode: format of an" "encoded uuencode file." "" uuencode(5)
.xx "" "crypt:" "encode/decode." "" crypt(1)
.xx "mail." "uuencode,uudecode:" "encode/decode a binary file for tranmission via" "" uuencode(1C)
.xx "" "crypt, setkey," "encrypt: DES encryption." "" crypt(3)
.xx "" "crypt, setkey, encrypt: DES" "encryption." "" crypt(3)
.xx "" "makekey: generate" "encryption key." "" makekey(8)
.xx "" "" "end, etext, edata: last locations in program." "" end(3)
.xx "" "logout:" "end session." "" csh(1)
.xx "" "" "end: terminate loop." "" csh(1)
.xx "" "getfsent, getfsspec, getfsfile, setfsent," "endfsent: get file system descriptor file entry." "" getfsent(3)
.xx "" "getgrent, getgrgid, getgrnam, setgrent," "endgrent: get group file entry." "" getgrent(3)
.xx "" "gethostbyaddr, gethostbyname, sethostent," "endhostent: get network host entry." "gethostent," gethostent(3n)
.xx "" "" "endif: terminate conditional." "" csh(1)
.xx "" "getnetent, getnetbyaddr, getnetbyname, setnetent," "endnetent: get network entry." "" getnetent(3n)
.xx "" "socket: create an" "endpoint for communication." "" socket(2)
.xx "" "getprotobynumber, getprotobyname, setprotoent," "endprotoent: get protocol entry." "getprotoent," getprotoent(3n)
.xx "" "getpwent, getpwuid, getpwnam, setpwent," "endpwent: get password file entry." "" getpwent(3)
.xx "" "getservbyport, getservbyname, setservent," "endservent: get protocol entry." "getservent," getservent(3n)
.xx "" "" "endsw: terminate switch." "" csh(1)
.xx "" "number: convert Arabic numerals to" "English." "" number(6)
.xx "" "xsend, xget," "enroll: secret mail." "" xsend(1)
.xx "" "nlist: get" "entries from name list." "" nlist(3)
.xx "" "setfsent, endfsent: get file system descriptor file" "entry." "getfsent, getfsspec, getfsfile," getfsent(3)
.xx "" "getgrnam, setgrent, endgrent: get group file" "entry." "getgrent, getgrgid," getgrent(3)
.xx "" "sethostent, endhostent: get network host" "entry." "gethostent, gethostbyaddr, gethostbyname," gethostent(3n)
.xx "" "getnetbyname, setnetent, endnetent: get network" "entry." "getnetent, getnetbyaddr," getnetent(3n)
.xx "" "setprotoent, endprotoent: get protocol" "entry." "/getprotobynumber, getprotobyname," getprotoent(3n)
.xx "" "getpwnam, setpwent, endpwent: get password file" "entry." "getpwent, getpwuid," getpwent(3)
.xx "" "getservbyname, setservent, endservent: get protocol" "entry." "getservent, getservbyport," getservent(3n)
.xx "" "unlink: remove directory" "entry." "" unlink(2)
.xx "" "unlink: remove a directory" "entry." "" unlink(3f)
.xx "" "" "environ: user environment." "" environ(7)
.xx "" "setenv: set variable in" "environment." "" csh(1)
.xx "" "environ: user" "environment." "" environ(7)
.xx "" "printenv: print out the" "environment." "" printenv(1)
.xx "" "getenv: value for" "environment name." "" getenv(3)
.xx "" "unsetenv: remove" "environment variables." "" csh(1)
.xx "" "getenv: get value of" "environment variables." "" getenv(3f)
.xx "" "eqnchar: special character definitions for" "eqn." "" eqnchar(7)
.xx "" "deroff: remove nroff, troff, tbl and" "eqn constructs." "" deroff(1)
.xx "" "" "eqn, neqn, checkeq: typeset mathematics." "" eqn(1)
.xx "" "" "eqnchar: special character definitions for eqn." "" eqnchar(7)
.xx "linemod, space, closepl: graphics/" "plot: openpl," "erase, label, line, circle, arc, move, cont, point," "" plot(3x)
.xx "messages." "" "error: analyze and disperse compiler error" "" error(1)
.xx "" "dmesg: collect system diagnostic messages to form" "error log." "" dmesg(8)
.xx "" "mkstr: create an" "error message file by massaging C source." "" mkstr(1)
.xx "" "error: analyze and disperse compiler" "error messages." "" error(1)
.xx "" "perror, sys_errlist, sys_nerr: system" "error messages." "" perror(3)
.xx "" "perror, gerror, ierrno: get system" "error messages." "" perror(3f)
.xx "" "intro: introduction to system calls and" "error numbers." "" intro(2)
.xx "" "eyacc: modified yacc allowing much improved" "error recovery." "" eyacc(1)
.xx "" "spell, spellin, spellout: find spelling" "errors." "" spell(1)
.xx "" "traper: trap arithmetic" "errors." "" traper(3f)
.xx "" "chase: Try to" "escape to killer robots." "" chase(6)
.xx "" "end," "etext, edata: last locations in program." "" end(3)
.xx "" "ec: 3Com 10 Mb/s" "Ethernet interface." "" ec(4v)
.xx "" "en: Xerox 3 Mb/s" "Ethernet interface." "" en(4v)
.xx "" "il: Interlan 10 Mb/s" "Ethernet interface." "" il(4v)
.xx "" "" "etime, dtime: return elapsed execution time." "" etime(3f)
.xx "" "hypot, cabs:" "Euclidean distance." "" hypot(3M)
.xx "" "/if, while, \fB:\fP, \fB.\fP, break, continue, cd," "eval, exec, exit, export, login, newgrp, read,/" "" sh(1)
.xx "" "" "eval: re-evaluate shell data." "" csh(1)
.xx "" "expr:" "evaluate arguments as an expression." "" expr(1)
.xx "device interface." "ps:" "Evans and Sutherland Picture System 2 graphics" "" ps(4v)
.xx "" "history: print history" "event list." "" csh(1)
.xx "" "screen oriented (visual) display editor based on" "ex." "vi:" vi(1)
.xx "" "" "ex, edit: text editor." "" ex(1)
.xx "" "lpq: spool queue" "examination program." "" lpq(1)
.xx "" "/while, \fB:\fP, \fB.\fP, break, continue, cd, eval," "exec, exit, export, login, newgrp, read, readonly,/" "" sh(1)
.xx "" "" "exec: overlay shell with specified command." "" csh(1)
.xx "" "sticky:" "executable files with persistent text." "" sticky(8)
.xx "" "net:" "execute a command on a remote machine." "" net(1)
.xx "" "execve:" "execute a file." "" execve(2)
.xx "" "alarm:" "execute a subroutine after a specified time." "" alarm(3f)
.xx "" "system:" "execute a unix command." "" system(3f)
.xx "" "repeat:" "execute command repeatedly." "" csh(1)
.xx "" "at:" "execute commands at a later time." "" at(1)
.xx "" "lastcomm: show last commands" "executed in reverse order." "" lastcomm(1)
.xx "" "uux: unix to unix command" "execution." "" uux(1C)
.xx "" "acct:" "execution accounting file." "" acct(5)
.xx "" "sleep: suspend" "execution for an interval." "" sleep(1)
.xx "" "sleep: suspend" "execution for interval." "" sleep(3)
.xx "" "monitor, monstartup: prepare" "execution profile." "" monitor(3)
.xx "" "pxp: Pascal" "execution profiler." "" pxp(1)
.xx "" "rexecd: remote" "execution server." "" rexecd(8)
.xx "" "etime, dtime: return elapsed" "execution time." "" etime(3f)
.xx "" "profil:" "execution time profile." "" profil(2)
.xx "" "pix: Pascal interpreter and" "executor." "" pix(1)
.xx "" "" "execve: execute a file." "" execve(2)
.xx "" "link: make a link to an" "existing file." "" link(3f)
.xx "" "tunefs: tune up an" "existing file system." "" tunefs(8)
.xx "" "/\fB:\fP, \fB.\fP, break, continue, cd, eval, exec," "exit, export, login, newgrp, read, readonly, set,/" "" sh(1)
.xx "" "breaksw:" "exit from switch." "" csh(1)
.xx "" "" "exit: leave shell." "" csh(1)
.xx "" "" "_exit: terminate a process." "" exit(2)
.xx "" "" "exit: terminate process with status." "" exit(3f)
.xx "" "break:" "exit while/foreach loop." "" csh(1)
.xx "power, square root." "" "exp, log, log10, pow, sqrt: exponential, logarithm," "" exp(3M)
.xx "" "glob: filename" "expand argument list." "" csh(1)
.xx "" "expand, unexpand:" "expand tabs to spaces, and vice versa." "" expand(1)
.xx "versa." "" "expand, unexpand: expand tabs to spaces, and vice" "" expand(1)
.xx "" "aardvark: yet another" "exploration game." "" aardvark(6)
.xx "" "adventure: an" "exploration game." "" adventure(6)
.xx "" "rogue:" "Exploring The Dungeons of Doom." "" rogue(6)
.xx "" "frexp, ldexp, modf: split into mantissa and" "exponent." "" frexp(3)
.xx "" "exp, log, log10, pow, sqrt:" "exponential, logarithm, power, square root." "" exp(3M)
.xx "" "/\fB.\fP, break, continue, cd, eval, exec, exit," "export, login, newgrp, read, readonly, set, shift,/" "" sh(1)
.xx "" "" "expr: evaluate arguments as an expression." "" expr(1)
.xx "" "expr: evaluate arguments as an" "expression." "" expr(1)
.xx "" "re_comp, re_exec: regular" "expression handler." "" regex(3)
.xx "" "efl:" "Extended Fortran Language." "" efl(1)
.xx "strings." "xstr:" "extract strings from C programs to implement shared" "" xstr(1)
.xx "recovery." "" "eyacc: modified yacc allowing much improved error" "" eyacc(1)
.xx "" "" "f77: Fortran 77 compiler." "" f77(1)
.xx "functions." "" "fabs, floor, ceil: absolute value, floor, ceiling" "" floor(3M)
.xx "" "intro: summary of job control" "facilities." "" intro(3j)
.xx "" "net: introduction to networking" "facilities." "" intro(4n)
.xx "" "jobs: summary of job control" "facilities." "" jobs(3j)
.xx "" "arithmetic: provide drill in number" "facts." "" arithmetic(6)
.xx "" "pstat: print system" "facts." "" pstat(8)
.xx "" "true," "false: provide truth values." "" false(1)
.xx "" "true," "false: provide truth values." "" true(1)
.xx "" "inet: Internet protocol" "family." "" inet(4f)
.xx "" "pup: Xerox PUP-I protocol" "family." "" pup(4f)
.xx "disks." "" "fastboot: reboot the system without checking the" "" fastboot(8)
.xx "" "abort: generate a" "fault." "" abort(3)
.xx "export, login,/" "sh, for, case, if, while, \fB:\fP," "\fB.\fP, break, continue, cd, eval, exec, exit," "" sh(1)
.xx "exit, export, login,/" "sh, for, case, if, while," "\fB:\fP, \fB.\fP, break, continue, cd, eval, exec," "" sh(1)
.xx "" "" "fclose, fflush: close or flush a stream." "" fclose(3S)
.xx "" "ecvt," "fcvt, gcvt: output conversion." "" ecvt(3)
.xx "" "" "fdate: return date and time in an ASCII string." "" fdate(3f)
.xx "" "fopen, freopen," "fdopen: open a stream." "" fopen(3S)
.xx "" "" "fed: font editor." "" fed(1)
.xx "" "col: filter reverse line" "feeds." "" col(1)
.xx "inquiries." "" "feof, ferror, clearerr, fileno: stream status" "" ferror(3S)
.xx "" "feof," "ferror, clearerr, fileno: stream status inquiries." "" ferror(3S)
.xx "subroutines." "dbminit," "fetch, store, delete, firstkey, nextkey: data base" "" dbm(3x)
.xx "" "head: give first" "few lines." "" head(1)
.xx "" "netlog: print the last" "few lines of the network log file." "" netlog(1)
.xx "" "fclose," "fflush: close or flush a stream." "" fclose(3S)
.xx "" "" "fg: bring job into foreground." "" csh(1)
.xx "" "getc," "fgetc: get a character from a logical unit." "" getc(3f)
.xx "" "getc, getchar," "fgetc, getw: get character or word from stream." "" getc(3S)
.xx "" "gets," "fgets: get a string from a stream." "" gets(3S)
.xx "" "grep, egrep," "fgrep: search a file for a pattern." "" grep(1)
.xx "" "locate a program file including aliases and paths" "(\fIcsh\fR only)." "which:" which(1)
.xx "" "access: determine accessibility of" "file." "" access(2)
.xx "" "access: determine accessability of a" "file." "" access(3f)
.xx "" "acct: execution accounting" "file." "" acct(5)
.xx "" "chmod: change mode of" "file." "" chmod(2)
.xx "" "chown: change owner and group of a" "file." "" chown(2)
.xx "" "colrm: remove columns from a" "file." "" colrm(1)
.xx "" "core: format of memory image" "file." "" core(5)
.xx "" "source: read commands from" "file." "" csh(1)
.xx "" "ctags: create a tags" "file." "" ctags(1)
.xx "" "dd: convert and copy a" "file." "" dd(1)
.xx "" "execve: execute a" "file." "" execve(2)
.xx "" "flock: apply or remove an advisory lock on an open" "file." "" flock(2)
.xx "" "group: group" "file." "" group(5)
.xx "" "link: make a hard link to a" "file." "" link(2)
.xx "" "link: make a link to an existing" "file." "" link(3f)
.xx "" "mkdir: make a directory" "file." "" mkdir(2)
.xx "" "mknod: make a special" "file." "" mknod(2)
.xx "" "mknod: build special" "file." "" mknod(8)
.xx "" "netlog: print the last few lines of the network log" "file." "" netlog(1)
.xx "" "rebuild the data base for the mail aliases" "file." "newaliases:" newaliases(1)
.xx "" "open a file for reading or writing, or create a new" "file." "open:" open(2)
.xx "" "passwd: password" "file." "" passwd(5)
.xx "" "pr: print" "file." "" pr(1)
.xx "" "rename: change the name of a" "file." "" rename(2)
.xx "" "rev: reverse lines of a" "file." "" rev(1)
.xx "" "rmdir: remove a directory" "file." "" rmdir(2)
.xx "" "size: size of an object" "file." "" size(1)
.xx "" "the printable strings in a object, or other binary," "file." "strings: find" strings(1)
.xx "" "sum: sum and count blocks in a" "file." "" sum(1)
.xx "" "symlink: make symbolic link to a" "file." "" symlink(2)
.xx "" "tail: deliver the last part of a" "file." "" tail(1)
.xx "" "touch: update date last modified of a" "file." "" touch(1)
.xx "" "uniq: report repeated lines in a" "file." "" uniq(1)
.xx "" "uuencode: format of an encoded uuencode" "file." "" uuencode(5)
.xx "" "versions of object modules were used to construct a" "file." "what: show what" what(1)
.xx "" "write, writev: write on a" "file." "" write(2)
.xx "" "disktab: disk description" "file .ad." "" disktab(5)
.xx "" "diff: differential" "file and directory comparator." "" diff(1)
.xx "" "mkstr: create an error message" "file by massaging C source." "" mkstr(1)
.xx "" "diff3: 3-way differential" "file comparison." "" diff3(1)
.xx "" "rcp: remote" "file copy." "" rcp(1C)
.xx "" "umask: change or display" "file creation mask." "" csh(1)
.xx "" "umask: set" "file creation mode mask." "" umask(2)
.xx "" "" "file: determine file type." "" file(1)
.xx "" "setfsent, endfsent: get file system descriptor" "file entry." "getfsent, getfsspec, getfsfile," getfsent(3)
.xx "" "getgrgid, getgrnam, setgrent, endgrent: get group" "file entry." "getgrent," getgrent(3)
.xx "" "getpwnam, setpwent, endpwent: get password" "file entry." "getpwent, getpwuid," getpwent(3)
.xx "" "grep, egrep, fgrep: search a" "file for a pattern." "" grep(1)
.xx "" "open: open a" "file for reading or writing, or create a new file." "" open(2)
.xx "" "aliases: aliases" "file for sendmail." "" aliases(5)
.xx "" "remote - remote host description" "file for tip .ad." "" remote(5)
.xx "" "uuencode,uudecode: encode/decode a binary" "file for tranmission via mail." "" uuencode(1C)
.xx "" "ar: archive (library)" "file format." "" ar(5)
.xx "" "tar: tape archive" "file format." "" tar(5)
.xx "" "see: see what a" "file has in it." "" see(1)
.xx "" "which: locate a program" "file including aliases and paths (\fIcsh\fR only)." "" which(1)
.xx "" "split: split a" "file into pieces." "" split(1)
.xx "" "pmerge: pascal" "file merger." "" pmerge(1)
.xx "" "mktemp: make a unique" "file name." "" mktemp(3)
.xx "" "fseek, ftell: reposition a" "file on a logical unit." "" fseek(3f)
.xx "" "more, page:" "file perusal filter for crt viewing." "" more(1)
.xx "" "stat, lstat, fstat: get" "file status." "" stat(2)
.xx "" "stat, fstat: get" "file status." "" stat(3f)
.xx "" "mkfs: construct a" "file system." "" mkfs(8)
.xx "" "mkproto: construct a pototype" "file system." "" mkproto(8)
.xx "" "mount, unmount: mount or remove" "file system." "" mount(2)
.xx "" "mount, umount: mount and dismount" "file system." "" mount(8)
.xx "" "newfs: construct a new" "file system." "" newfs(8)
.xx "" "tunefs: tune up an existing" "file system." "" tunefs(8)
.xx "repair." "fsck:" "file system consistency check and interactive" "" fsck(8)
.xx "" "getfsspec, getfsfile, setfsent, endfsent: get" "file system descriptor file entry." "getfsent," getfsent(3)
.xx "" "dcheck:" "file system directory consistency check." "" dcheck(8)
.xx "" "dump: incremental" "file system dump." "" dump(8)
.xx "" "rdump:" "file system dump across the network." "" rdump(8)
.xx "" "rrestor:" "file system dump across the network." "" rrestor(8)
.xx "" "hier:" "file system hierarchy." "" hier(7)
.xx "" "dumpfs: dump" "file system information." "" dumpfs(8)
.xx "" "quot: summarize" "file system ownership." "" quot(8)
.xx "" "restor: incremental" "file system restore." "" restor(8)
.xx "" "icheck:" "file system storage consistency check." "" icheck(8)
.xx "" "mtab: mounted" "file system table." "" mtab(5)
.xx "" "fs, inode: format of" "file system volume." "" fs(5)
.xx "" "utimes: set" "file times." "" utimes(2)
.xx "" "uusend: send a" "file to a remote host." "" uusend(1C)
.xx "" "truncate: truncate a" "file to a specified length." "" truncate(2)
.xx "" "ftp:" "file transfer program." "" ftp(1C)
.xx "" "ftpd: DARPA Internet" "File Transfer Protocol server." "" ftpd(8)
.xx "" "tftp: DARPA Trivial" "File Transfer Protocol server." "" tftpd(8)
.xx "" "file: determine" "file type." "" file(1)
.xx "" "vipw: edit the password" "file with vi." "" vipw(8)
.xx "" "basename: strip" "filename affixes." "" basename(1)
.xx "" "glob:" "filename expand argument list." "" csh(1)
.xx "" "feof, ferror, clearerr," "fileno: stream status inquiries." "" ferror(3S)
.xx "" "checknr: check nroff/troff" "files." "" checknr(1)
.xx "" "cmp: compare two" "files." "" cmp(1)
.xx "" "comm: select or reject lines common to two sorted" "files." "" comm(1)
.xx "" "config: Build system configuration" "files." "" config(8)
.xx "" "find: find" "files." "" find(1)
.xx "" "MAKEDEV: make system special" "files." "" makedev(8)
.xx "" "mv: move or rename" "files." "" mv(1)
.xx "" "rmdir, rm: remove (unlink) directories or" "files." "" rmdir(1)
.xx "" "sort: sort or merge" "files." "" sort(1)
.xx "" "compact, uncompact, ccat: compress and uncompress" "files, and cat them." "" compact(1)
.xx "" "intro: introduction to special" "files and hardware support." "" intro(4)
.xx "" "catman: create the cat" "files for the manual." "" catman(8)
.xx "" "fsync: synchronize a" "file's in-core state with that on disk." "" fsync(2)
.xx "" "rm, rmdir: remove (unlink)" "files or directories." "" rm(1)
.xx "" "netcp: remote copy of" "files through the net." "" netcp(1)
.xx "" "badsect: create" "files to contain bad sectors." "" badsect(8)
.xx "" "sticky: executable" "files with persistent text." "" sticky(8)
.xx "" "fstab: static information about the" "filesystems." "" fstab(5)
.xx "" "more, page: file perusal" "filter for crt viewing." "" more(1)
.xx "" "colcrt:" "filter nroff output for CRT previewing." "" colcrt(1)
.xx "" "col:" "filter reverse line feeds." "" col(1)
.xx "" "plot: graphics" "filters." "" plot(1G)
.xx "" "refer:" "find and insert literature references in documents." "" refer(1)
.xx "" "find:" "find files." "" find(1)
.xx "" "" "find: find files." "" find(1)
.xx "" "look:" "find lines in a sorted list." "" look(1)
.xx "" "lookbib\-" "find literature references in documents." "" lookbib(1)
.xx "manual." "man:" "find manual information by keywords; print out the" "" man(1)
.xx "" "ttyname, isatty, ttyslot:" "find name of a terminal." "" ttyname(3)
.xx "" "ttynam, isatty:" "find name of a terminal port." "" ttynam(3f)
.xx "" "lorder:" "find ordering relation for an object library." "" lorder(1)
.xx "" "mincore:" "find out about core resident pages." "" mincore(2)
.xx "" "spell, spellin, spellout:" "find spelling errors." "" spell(1)
.xx "binary, file." "strings:" "find the printable strings in a object, or other" "" strings(1)
.xx "" "" "finger: user information lookup program." "" finger(1)
.xx "" "fold: fold long lines for" "finite width output device." "" fold(1)
.xx "" "head: give" "first few lines." "" head(1)
.xx "" "dbminit, fetch, store, delete," "firstkey, nextkey: data base subroutines." "" dbm(3x)
.xx "" "fish: play ``Go" "Fish''." "" fish(6)
.xx "" "" "fish: play ``Go Fish''." "" fish(6)
.xx "" "nice, nohup: run a command at low priority" "(\fIsh\fR only)." "" nice(1)
.xx "" "tee: pipe" "fitting." "" tee(1)
.xx "" "" "fl: floppy interface." "" fl(4v)
.xx "" "arff," "flcopy: archiver and copier for floppy." "" arff(8)
.xx "values." "flmin," "flmax, dflmin, dflmax, inmax: return extreme" "" range(3f)
.xx "values." "" "flmin, flmax, dflmin, dflmax, inmax: return extreme" "" range(3f)
.xx "" "trapov: trap and repair" "floating point overflow." "" trapov(3f)
.xx "file." "" "flock: apply or remove an advisory lock on an open" "" flock(2)
.xx "functions." "fabs," "floor, ceil: absolute value, floor, ceiling" "" floor(3M)
.xx "" "fabs, floor, ceil: absolute value," "floor, ceiling functions." "" floor(3M)
.xx "" "arff, flcopy: archiver and copier for" "floppy." "" arff(8)
.xx "" "rx: DEC RX02" "floppy disk interface." "" rx(4v)
.xx "" "fl:" "floppy interface." "" fl(4v)
.xx "" "fclose, fflush: close or" "flush a stream." "" fclose(3S)
.xx "" "" "flush: flush output to a logical unit." "" flush(3f)
.xx "" "flush:" "flush output to a logical unit." "" flush(3f)
.xx "" "" "fmt: simple text formatter." "" fmt(1)
.xx "device." "" "fold: fold long lines for finite width output" "" fold(1)
.xx "" "fold:" "fold long lines for finite width output device." "" fold(1)
.xx "" "vwidth: make troff width table for a" "font." "" vwidth(1)
.xx "" "fed:" "font editor." "" fed(1)
.xx "" "vfont:" "font formats for the Benson-Varian or Versatec." "" vfont(5)
.xx "" "inspect and print out information about UNIX" "fonts." "vfontinfo:" vfontinfo(1)
.xx "" "" "fopen, freopen, fdopen: open a stream." "" fopen(3S)
.xx "continue, cd, eval, exec, exit, export, login,/" "sh," "for, case, if, while, \fB:\fP, \fB.\fP, break," "" sh(1)
.xx "" "" "foreach: loop over list of names." "" csh(1)
.xx "" "fg: bring job into" "foreground." "" csh(1)
.xx "" "" "fork: create a copy of this process." "" fork(3f)
.xx "" "" "fork: create a new process." "" fork(2)
.xx "" "idate, itime: return date or time in numerical" "form." "" idate(3f)
.xx "" "dmesg: collect system diagnostic messages to" "form error log." "" dmesg(8)
.xx "" "ar: archive (library) file" "format." "" ar(5)
.xx "" "arcv: convert archives to new" "format." "" arcv(8)
.xx "" "dump, ddate: incremental dump" "format." "" dump(5)
.xx "" "tar: tape archive file" "format." "" tar(5)
.xx "" "indent: indent and" "format a C program source." "" indent(1)
.xx "" "format: how to" "format disk packs." "" format(8)
.xx "" "htable: convert NIC standard" "format host tables." "" htable(8)
.xx "" "gettable: get NIC" "format host tables from a host ." "" gettable(8)
.xx "" "" "format: how to format disk packs." "" format(8)
.xx "vtroff, or troff." "vlp \(em" "Format Lisp programs to be printed with nroff," "" vlp(1)
.xx "" "uuencode:" "format of an encoded uuencode file." "" uuencode(5)
.xx "" "dir:" "format of directories." "" dir(5)
.xx "" "fs, inode:" "format of file system volume." "" fs(5)
.xx "" "core:" "format of memory image file." "" core(5)
.xx "" "tbl:" "format tables for nroff or troff." "" tbl(1)
.xx "" "tp: DEC/mag tape" "formats." "" tp(5)
.xx "" "vfont: font" "formats for the Benson-Varian or Versatec." "" vfont(5)
.xx "" "scanf, fscanf, sscanf:" "formatted input conversion." "" scanf(3S)
.xx "" "printf, fprintf, sprintf:" "formatted output conversion." "" printf(3S)
.xx "" "fmt: simple text" "formatter." "" fmt(1)
.xx "" "troff, nroff: text" "formatting and typesetting." "" nroff(1)
.xx "" "troff, nroff: text" "formatting and typesetting." "" troff(1)
.xx "" "ms: macros for" "formatting manuscripts." "" ms(7)
.xx "" "me: macros for" "formatting papers." "" me(7)
.xx "" "getarg, iargc: command arguments to" "Fortran." "" getarg(3f)
.xx "" "f77:" "Fortran 77 compiler." "" f77(1)
.xx "" "ratfor: rational" "Fortran dialect." "" ratfor(1)
.xx "" "efl: Extended" "Fortran Language." "" efl(1)
.xx "" "intro: introduction to" "FORTRAN library functions." "" intro(3f)
.xx "" "putc, fputc: write a character to a" "fortran logical unit." "" putc(3f)
.xx "" "struct: structure" "Fortran programs." "" struct(1)
.xx "adage." "" "fortune: print a random, hopefully interesting," "" fortune(6)
.xx "" "ching," "fortune: the book of changes and other cookies." "" ching(6)
.xx "exit, export,/" "sh, for, case, if, while, \fB:" "\fP, \fB.\fP, break, continue, cd, eval, exec," "" sh(1)
.xx "compiler/interpreter." "" "fp: Functional Programming language" "" fp(1)
.xx "" "printf," "fprintf, sprintf: formatted output conversion." "" printf(3S)
.xx "" "putc, putchar," "fputc, putw: put character or word on a stream." "" putc(3S)
.xx "" "putc," "fputc: write a character to a fortran logical unit." "" putc(3f)
.xx "" "puts," "fputs: put a string on a stream." "" puts(3S)
.xx "" "ik: Ikonas" "frame buffer, graphics device interface." "" ik(4v)
.xx "" "liszt: compile a" "Franz Lisp program." "" liszt(1)
.xx "" "" "fread, fwrite: buffered binary input/output." "" fread(3S)
.xx "" "df: disk" "free." "" df(1)
.xx "" "malloc," "free, realloc, calloc: main memory allocator." "" malloc(3)
.xx "" "fopen," "freopen, fdopen: open a stream." "" fopen(3S)
.xx "exponent." "" "frexp, ldexp, modf: split into mantissa and" "" frexp(3)
.xx "" "biff: be notified if mail arrives and who it is" "from." "" biff(1)
.xx "" "from: who is my mail" "from?." "" from(1)
.xx "" "" "fs, inode: format of file system volume." "" fs(5)
.xx "" "scanf," "fscanf, sscanf: formatted input conversion." "" scanf(3S)
.xx "" "mklost+found: make a lost+found directory for" "fsck." "" mklost+found(8)
.xx "repair." "" "fsck: file system consistency check and interactive" "" fsck(8)
.xx "" "" "fseek, ftell: reposition a file on a logical unit." "" fseek(3f)
.xx "" "" "fseek, ftell, rewind: reposition a stream." "" fseek(3S)
.xx "" "" "fstab: static information about the filesystems." "" fstab(5)
.xx "" "stat, lstat," "fstat: get file status." "" stat(2)
.xx "" "stat," "fstat: get file status." "" stat(3f)
.xx "on disk." "" "fsync: synchronize a file's in-core state with that" "" fsync(2)
.xx "" "fseek," "ftell: reposition a file on a logical unit." "" fseek(3f)
.xx "" "fseek," "ftell, rewind: reposition a stream." "" fseek(3S)
.xx "" "" "ftp: file transfer program." "" ftp(1C)
.xx "" "" "ftpd: DARPA Internet File Transfer Protocol server." "" ftpd(8)
.xx "" "chfn: change" "full name of user." "" chfn(1)
.xx "" "shutdown: shut down part of a" "full-duplex connection." "" shutdown(2)
.xx "" "gamma: log gamma" "function." "" gamma(3M)
.xx "compiler/interpreter." "fp:" "Functional Programming language" "" fp(1)
.xx "" "functions .sp 1 rshift, lshift \- bit shifting" "functions." "/.sp 1 and, or, xor, not \- bitwise" bit(3f)
.xx "" "fabs, floor, ceil: absolute value, floor, ceiling" "functions." "" floor(3M)
.xx "" "intro: introduction to library" "functions." "" intro(3)
.xx "" "intro: introduction to FORTRAN library" "functions." "" intro(3f)
.xx "" "intro: introduction to mathematical library" "functions." "" intro(3M)
.xx "" "intro: introduction to network library" "functions." "" intro(3n)
.xx "" "j0, j1, jn, y0, y1, yn: bessel" "functions." "" j0(3M)
.xx "" "cos, tan, asin, acos, atan, atan2: trigonometric" "functions." "sin," sin(3M)
.xx "" "sinh, cosh, tanh: hyperbolic" "functions." "" sinh(3M)
.xx "" "bessel" "functions: of two kinds for integer orders." "" bessel(3f)
.xx "" "/test routines .sp 1 and, or, xor, not \- bitwise" "functions .sp 1 rshift, lshift \- bit shifting/" "" bit(3f)
.xx "" "curses: screen" "functions with ``optimal'' cursor motion." "" curses(3x)
.xx "" "fread," "fwrite: buffered binary input/output." "" fread(3S)
.xx "" "aardvark: yet another exploration" "game." "" aardvark(6)
.xx "" "adventure: an exploration" "game." "" adventure(6)
.xx "" "backgammon: the" "game." "" backgammon(6)
.xx "" "monop: Monopoly" "game." "" monop(6)
.xx "" "snake, snscore: display chase" "game." "" snake(6)
.xx "" "trek: trekkie" "game." "" trek(6)
.xx "" "worm: Play the growing worm" "game." "" worm(6)
.xx "" "cribbage: the card" "game cribbage." "" cribbage(6)
.xx "" "hangman: Computer version of the" "game hangman." "" hangman(6)
.xx "" "boggle: play the" "game of boggle." "" boggle(6)
.xx "" "chess: the" "game of chess." "" chess(6)
.xx "" "zork: the" "game of dungeon." "" zork(6)
.xx "" "wump: the" "game of hunt-the-wumpus." "" wump(6)
.xx "" "gamma: log" "gamma function." "" gamma(3M)
.xx "" "" "gamma: log gamma function." "" gamma(3M)
.xx "" "" "gcore: get core images of running processes." "" gcore(1)
.xx "" "ecvt, fcvt," "gcvt: output conversion." "" ecvt(3)
.xx "buffers." "kgmon:" "generate a dump of the operating systems profile" "" kgmon(8)
.xx "" "abort:" "generate a fault." "" abort(3)
.xx "" "makekey:" "generate encryption key." "" makekey(8)
.xx "" "ncheck:" "generate names from i-numbers." "" ncheck(8)
.xx "" "rand, srand: random number" "generator." "" rand(3)
.xx "changing/" "random, srandom: better random number" "generator .br initstate, setstate \- routines for" "" random(3)
.xx "" "lex:" "generator of lexical analysis programs." "" lex(1)
.xx "" ".br initstate, setstate \- routines for changing" "generators." "/better random number generator" random(3)
.xx "" "perror," "gerror, ierrno: get system error messages." "" perror(3f)
.xx "" "" "getarg, iargc: command arguments to Fortran." "" getarg(3f)
.xx "" "" "getc, fgetc: get a character from a logical unit." "" getc(3f)
.xx "from stream." "" "getc, getchar, fgetc, getw: get character or word" "" getc(3S)
.xx "stream." "getc," "getchar, fgetc, getw: get character or word from" "" getc(3S)
.xx "" "" "getdiskbyname: get disk description by its name." "" getdisk(3x)
.xx "descriptor ." "" "getdopt, setdopt: get/set options associated with a" "" getdopt(2)
.xx "" "" "getdtablesize: get descriptor table size." "" getdtablesize(2)
.xx "" "getgid," "getegid: get group identity." "" getgid(2)
.xx "" "" "getenv: get value of environment variables." "" getenv(3f)
.xx "" "" "getenv: value for environment name." "" getenv(3)
.xx "" "getuid," "geteuid: get user identity." "" getuid(2)
.xx "get file system descriptor file entry." "" "getfsent, getfsspec, getfsfile, setfsent, endfsent:" "" getfsent(3)
.xx "descriptor file entry." "getfsent, getfsspec," "getfsfile, setfsent, endfsent: get file system" "" getfsent(3)
.xx "system descriptor file entry." "getfsent," "getfsspec, getfsfile, setfsent, endfsent: get file" "" getfsent(3)
.xx "" "getuid," "getgid: get user or group ID of the caller." "" getuid(3f)
.xx "" "" "getgid, getegid: get group identity." "" getgid(2)
.xx "get group file entry." "" "getgrent, getgrgid, getgrnam, setgrent, endgrent:" "" getgrent(3)
.xx "file entry." "getgrent," "getgrgid, getgrnam, setgrent, endgrent: get group" "" getgrent(3)
.xx "" "getgrent, getgrgid," "getgrnam, setgrent, endgrent: get group file entry." "" getgrent(3)
.xx "" "" "getgroups: get group access list." "" getgroups(2)
.xx "endhostent: get network host entry." "gethostent," "gethostbyaddr, gethostbyname, sethostent," "" gethostent(3n)
.xx "host entry." "gethostent, gethostbyaddr," "gethostbyname, sethostent, endhostent: get network" "" gethostent(3n)
.xx "sethostent, endhostent: get network host entry." "" "gethostent, gethostbyaddr, gethostbyname," "" gethostent(3n)
.xx "current host." "" "gethostid, sethostid: get/set unique identifier of" "" gethostid(2)
.xx "host." "" "gethostname, sethostname: get/set name of current" "" gethostname(2)
.xx "timer." "" "getitimer, setitimer: get/set value of interval" "" getitimer(2)
.xx "" "" "getlog: get user's login name." "" getlog(3f)
.xx "" "" "getlogin: get login name." "" getlogin(3)
.xx "get network entry." "getnetent," "getnetbyaddr, getnetbyname, setnetent, endnetent:" "" getnetent(3n)
.xx "entry." "getnetent, getnetbyaddr," "getnetbyname, setnetent, endnetent: get network" "" getnetent(3n)
.xx "endnetent: get network entry." "" "getnetent, getnetbyaddr, getnetbyname, setnetent," "" getnetent(3n)
.xx "" "" "getpagesize: get system page size." "" getpagesize(2)
.xx "" "" "getpass: read a password." "" getpass(3)
.xx "" "" "getpgrp: get process group." "" getpgrp(2)
.xx "" "" "getpid: get process id." "" getpid(3f)
.xx "" "" "getpid: get process identification." "" getpid(2)
.xx "scheduling priority." "" "getpriority, setpriority: get/set program" "" getpriority(2)
.xx "protocol entry." "getprotoent, getprotobynumber," "getprotobyname, setprotoent, endprotoent: get" "" getprotoent(3n)
.xx "endprotoent: get protocol entry." "getprotoent," "getprotobynumber, getprotobyname, setprotoent," "" getprotoent(3n)
.xx "setprotoent, endprotoent: get protocol entry." "" "getprotoent, getprotobynumber, getprotobyname," "" getprotoent(3n)
.xx "" "" "getpw: get name from uid." "" getpw(3)
.xx "get password file entry." "" "getpwent, getpwuid, getpwnam, setpwent, endpwent:" "" getpwent(3)
.xx "entry." "getpwent, getpwuid," "getpwnam, setpwent, endpwent: get password file" "" getpwent(3)
.xx "password file entry." "getpwent," "getpwuid, getpwnam, setpwent, endpwent: get" "" getpwent(3)
.xx "resource consumption." "" "getrlimit, setrlimit: control maximum system" "" getrlimit(2)
.xx "utilization." "" "getrusage: get information about resource" "" getrusage(2)
.xx "" "" "gets, fgets: get a string from a stream." "" gets(3S)
.xx "entry." "getservent, getservbyport," "getservbyname, setservent, endservent: get protocol" "" getservent(3n)
.xx "endservent: get protocol entry." "getservent," "getservbyport, getservbyname, setservent," "" getservent(3n)
.xx "setservent, endservent: get protocol entry." "" "getservent, getservbyport, getservbyname," "" getservent(3n)
.xx "" "gettimeofday, settimeofday:" "get/set date and time." "" gettimeofday(2)
.xx "" "gethostname, sethostname:" "get/set name of current host." "" gethostname(2)
.xx "" "getdopt, setdopt:" "get/set options associated with a descriptor ." "" getdopt(2)
.xx "" "getpriority, setpriority:" "get/set program scheduling priority." "" getpriority(2)
.xx "" "gethostid, sethostid:" "get/set unique identifier of current host." "" gethostid(2)
.xx "" "getitimer, setitimer:" "get/set value of interval timer." "" getitimer(2)
.xx "sockets." "" "getsockopt, setsockopt: get and set options on" "" getsockopt(2)
.xx "" "" "gettable: get NIC format host tables from a host ." "" gettable(8)
.xx "" "" "gettimeofday, settimeofday: get/set date and time." "" gettimeofday(2)
.xx "" "" "getty: set terminal mode." "" getty(8)
.xx "" "" "getuid, geteuid: get user identity." "" getuid(2)
.xx "" "" "getuid, getgid: get user or group ID of the caller." "" getuid(3f)
.xx "" "getc, getchar, fgetc," "getw: get character or word from stream." "" getc(3S)
.xx "" "" "getwd: get current working directory pathname." "" getwd(3)
.xx "" "madvise:" "give advice to the paging system." "" madvise(2)
.xx "" "head:" "give first few lines." "" head(1)
.xx "" "shutdown: close down the system at a" "given time." "" shutdown(8)
.xx "" "" "glob: filename expand argument list." "" csh(1)
.xx "ASCII." "ctime, localtime," "gmtime, asctime, timezone: convert date and time to" "" ctime(3)
.xx "" "time, ctime, ltime," "gmtime: return system time." "" time(3f)
.xx "" "fish: play" "``Go Fish''." "" fish(6)
.xx "" "setjmp, longjmp: non-local" "goto." "" setjmp(3)
.xx "" "" "goto: command transfer." "" csh(1)
.xx "" "" "gprof: display call graph profile data." "" gprof(1)
.xx "" "graph: draw a" "graph." "" graph(1G)
.xx "" "" "graph: draw a graph." "" graph(1G)
.xx "" "gprof: display call" "graph profile data." "" gprof(1)
.xx "" "ik: Ikonas frame buffer," "graphics device interface." "" ik(4v)
.xx "" "ps: Evans and Sutherland Picture System 2" "graphics device interface." "" ps(4v)
.xx "" "plot:" "graphics filters." "" plot(1G)
.xx "" "arc, move, cont, point, linemod, space, closepl:" "graphics interface." "/erase, label, line, circle," plot(3x)
.xx "" "plot:" "graphics interface." "" plot(5)
.xx "" "" "grep, egrep, fgrep: search a file for a pattern." "" grep(1)
.xx "" "vgrind:" "grind nice listings of programs." "" vgrind(1)
.xx "" "chgrp: change" "group." "" chgrp(1)
.xx "" "getpgrp: get process" "group." "" getpgrp(2)
.xx "" "killpg: send signal to a process" "group." "" killpg(2)
.xx "" "setpgrp: set process" "group." "" setpgrp(2)
.xx "" "getgroups: get" "group access list." "" getgroups(2)
.xx "" "initgroups: initialize" "group access list." "" initgroups(3)
.xx "" "setgroups: set" "group access list." "" setgroups(2)
.xx "" "group:" "group file." "" group(5)
.xx "" "getgrgid, getgrnam, setgrent, endgrent: get" "group file entry." "getgrent," getgrent(3)
.xx "" "" "group: group file." "" group(5)
.xx "" "setregid: set real and effective" "group ID." "" setregid(2)
.xx "" "getuid, getgid: get user or" "group ID of the caller." "" getuid(3f)
.xx "" "getgid, getegid: get" "group identity." "" getgid(2)
.xx "" "groups: show" "group memberships." "" groups(1)
.xx "" "chown: change owner and" "group of a file." "" chown(2)
.xx "" "make: maintain program" "groups." "" make(1)
.xx "" "" "groups: show group memberships." "" groups(1)
.xx "" "worm: Play the" "growing worm game." "" worm(6)
.xx "" "stop:" "halt a job or process." "" csh(1)
.xx "" "reboot: reboot system or" "halt processor." "" reboot(2)
.xx "" "" "halt: stop the processor." "" halt(8)
.xx "" "re_comp, re_exec: regular expression" "handler." "" regex(3)
.xx "" "hangman: Computer version of the game" "hangman." "" hangman(6)
.xx "" "" "hangman: Computer version of the game hangman." "" hangman(6)
.xx "" "vhangup: virtually" "``hangup'' the current control terminal." "" vhangup(2)
.xx "" "nohup: run command immune to" "hangups." "" csh(1)
.xx "" "crash: what" "happens when the system crashes." "" crash(8)
.xx "" "link: make a" "hard link to a file." "" link(2)
.xx "" "intro: introduction to special files and" "hardware support." "" intro(4)
.xx "" "uptime: show how long system" "has been up." "" uptime(1)
.xx "" "see: see what a file" "has in it." "" see(1)
.xx "" "rehash: recompute command" "hash table." "" csh(1)
.xx "" "unhash: discard command" "hash table." "" csh(1)
.xx "" "hashstat: print command" "hashing statistics." "" csh(1)
.xx "" "" "hashstat: print command hashing statistics." "" csh(1)
.xx "" "leave: remind you when you" "have to leave." "" leave(1)
.xx "" "" "hier: file system hierarchy." "" hier(7)
.xx "" "hier: file system" "hierarchy." "" hier(7)
.xx "" "history: print" "history event list." "" csh(1)
.xx "" "" "history: print history event list." "" csh(1)
.xx "" "" "hk: RK6-11/RK06 and RK07 moving head disk." "" hk(4v)
.xx "" "fortune: print a random," "hopefully interesting, adage." "" fortune(6)
.xx "" "sethostid: get/set unique identifier of current" "host." "gethostid," gethostid(2)
.xx "" "gethostname, sethostname: get/set name of current" "host." "" gethostname(2)
.xx "" "uusend: send a file to a remote" "host." "" uusend(1C)
.xx "" "gettable: get NIC format host tables from a" "host ." "" gettable(8)
.xx "" "htonl, htons, ntohl, ntohs: convert values between" "host and network byte order." "" byteorder(3n)
.xx "" "remote - remote" "host description file for tip .ad." "" remote(5)
.xx "" "gethostbyname, sethostent, endhostent: get network" "host entry." "gethostent, gethostbyaddr," gethostent(3n)
.xx "" "hosts:" "host name data base." "" hosts(5)
.xx "" "phones: remote" "host phone number data base .ad." "" phones(5)
.xx "" "ruptime: show" "host status of local machines." "" ruptime(1)
.xx "" "hostname: set or print name of current" "host system." "" hostname(1)
.xx "" "htable: convert NIC standard format" "host tables." "" htable(8)
.xx "" "gettable: get NIC format" "host tables from a host ." "" gettable(8)
.xx "" "" "hostname: set or print name of current host system." "" hostname(1)
.xx "" "" "hosts: host name data base." "" hosts(5)
.xx "" "uptime: show" "how long system has been up." "" uptime(1)
.xx "" "format:" "how to format disk packs." "" format(8)
.xx "" "" "hp: MASSBUS disk interface." "" hp(4v)
.xx "interface." "" "ht: TM-03/TE-16,TU-45,TU-77 MASSBUS magtape" "" ht(4v)
.xx "" "" "htable: convert NIC standard format host tables." "" htable(8)
.xx "host and network byte order." "" "htonl, htons, ntohl, ntohs: convert values between" "" byteorder(3n)
.xx "and network byte order." "htonl," "htons, ntohl, ntohs: convert values between host" "" byteorder(3n)
.xx "" "wump: the game of" "hunt-the-wumpus." "" wump(6)
.xx "" "" "hy: Network Systems Hyperchannel Interface." "" hy(4v)
.xx "" "sinh, cosh, tanh:" "hyperbolic functions." "" sinh(3M)
.xx "" "hy: Network Systems" "Hyperchannel Interface." "" hy(4v)
.xx "" "" "hypot, cabs: Euclidean distance." "" hypot(3M)
.xx "" "getarg," "iargc: command arguments to Fortran." "" getarg(3f)
.xx "" "" "icheck: file system storage consistency check." "" icheck(8)
.xx "" "getpid: get process" "id." "" getpid(3f)
.xx "" "setregid: set real and effective group" "ID." "" setregid(2)
.xx "" "whoami: print effective current user" "id." "" whoami(1)
.xx "" "getuid, getgid: get user or group" "ID of the caller." "" getuid(3f)
.xx "" "su: substitute user" "id temporarily." "" su(1)
.xx "form." "" "idate, itime: return date or time in numerical" "" idate(3f)
.xx "" "getpid: get process" "identification." "" getpid(2)
.xx "" "gethostid, sethostid: get/set unique" "identifier of current host." "" gethostid(2)
.xx "" "getgid, getegid: get group" "identity." "" getgid(2)
.xx "" "getuid, geteuid: get user" "identity." "" getuid(2)
.xx "" "setreuid: set real and effective user" "ID's." "" setreuid(2)
.xx "" "perror, gerror," "ierrno: get system error messages." "" perror(3f)
.xx "" "" "if: conditional statement." "" csh(1)
.xx "" "biff: be notified" "if mail arrives and who it is from." "" biff(1)
.xx "eval, exec, exit, export, login,/" "sh, for, case," "if, while, \fB:\fP, \fB.\fP, break, continue, cd," "" sh(1)
.xx "" "signal: catch or" "ignore signals." "" signal(2)
.xx "" "sigsys: catch or" "ignore signals." "" sigsys(2)
.xx "" "" "ik: Ikonas frame buffer, graphics device interface." "" ik(4v)
.xx "" "ik:" "Ikonas frame buffer, graphics device interface." "" ik(4v)
.xx "" "" "il: Interlan 10 Mb/s Ethernet interface." "" il(4v)
.xx "" "abort: terminate abruptly with memory" "image." "" abort(3f)
.xx "" "core: format of memory" "image file." "" core(5)
.xx "" "gcore: get core" "images of running processes." "" gcore(1)
.xx "" "notify: request" "immediate notification." "" csh(1)
.xx "" "nohup: run command" "immune to hangups." "" csh(1)
.xx "" "" "imp: 1822 network interface." "" imp(4v)
.xx "" "" "imp: IMP raw socket interface." "" imp(4p)
.xx "" "acc: ACC LH/DH" "IMP interface." "" acc(4v)
.xx "" "css: DEC IMP-11A LH/DH" "IMP interface." "" css(4v)
.xx "" "implogd:" "IMP logger process." "" implogd(8)
.xx "" "imp:" "IMP raw socket interface." "" imp(4p)
.xx "" "css: DEC" "IMP-11A LH/DH IMP interface." "" css(4v)
.xx "" "xstr: extract strings from C programs to" "implement shared strings." "" xstr(1)
.xx "" "" "implogd: IMP logger process." "" implogd(8)
.xx "" "eyacc: modified yacc allowing much" "improved error recovery." "" eyacc(1)
.xx "" "which: locate a program file" "including aliases and paths (\fIcsh\fR only)." "" which(1)
.xx "" "fsync: synchronize a file's" "in-core state with that on disk." "" fsync(2)
.xx "" "dump, ddate:" "incremental dump format." "" dump(5)
.xx "" "dump:" "incremental file system dump." "" dump(8)
.xx "" "restor:" "incremental file system restore." "" restor(8)
.xx "" "indent:" "indent and format a C program source." "" indent(1)
.xx "" "" "indent: indent and format a C program source." "" indent(1)
.xx "" "tgetnum, tgetflag, tgetstr, tgoto, tputs: terminal" "independent operation routines." "tgetent," termcap(3x)
.xx "" "ptx: permuted" "index." "" ptx(1)
.xx "objects." "" "index, rindex, lnblnk, len: tell about character" "" index(3f)
.xx "" "strncat, strcmp, strncmp, strcpy, strncpy, strlen," "index, rindex: string operations." "strcat," string(3)
.xx "" "last:" "indicate last logins of users and teletypes." "" last(1)
.xx "" "syscall:" "indirect system call." "" syscall(2)
.xx "" "" "inet: Internet protocol family." "" inet(4f)
.xx "inet_netof: Internet address manipulation/" "" "inet_addr, inet_network, inet_makeaddr, inet_lnaof," "" inet(3n)
.xx "" "inet_addr, inet_network, inet_makeaddr," "inet_lnaof, inet_netof: Internet address/" "" inet(3n)
.xx "address manipulation/" "inet_addr, inet_network," "inet_makeaddr, inet_lnaof, inet_netof: Internet" "" inet(3n)
.xx "" "inet_addr, inet_network, inet_makeaddr, inet_lnaof," "inet_netof: Internet address manipulation routines." "" inet(3n)
.xx "inet_netof: Internet address/" "inet_addr," "inet_network, inet_makeaddr, inet_lnaof," "" inet(3n)
.xx "" "bad144: read/write dec standard 144 bad sector" "information." "" bad144(8)
.xx "" "dumpfs: dump file system" "information." "" dumpfs(8)
.xx "" "pac: printer/ploter accounting" "information." "" pac(8)
.xx "" "getrusage: get" "information about resource utilization." "" getrusage(2)
.xx "" "fstab: static" "information about the filesystems." "" fstab(5)
.xx "" "vfontinfo: inspect and print out" "information about UNIX fonts." "" vfontinfo(1)
.xx "" "man: find manual" "information by keywords; print out the manual." "" man(1)
.xx "" "finger: user" "information lookup program." "" finger(1)
.xx "" "miscellaneous: Miscellaneous useful" "information pages." "" intro(7)
.xx "" "" "init: process control initialization." "" init(8)
.xx "" "" "initgroups: initialize group access list." "" initgroups(3)
.xx "" "init: process control" "initialization." "" init(8)
.xx "" "tset: terminal dependent" "initialization." "" tset(1)
.xx "" "ttys: terminal" "initialization data." "" ttys(5)
.xx "" "initgroups:" "initialize group access list." "" initgroups(3)
.xx "" "connect:" "initiate a connection on a socket." "" connect(2)
.xx "" "popen, pclose:" "initiate I/O to/from a process." "" popen(3S)
.xx "" "random, srandom: better random number generator .br" "initstate, setstate \- routines for changing/" "" random(3)
.xx "" "flmin, flmax, dflmin, dflmax," "inmax: return extreme values." "" range(3f)
.xx "" "clri: clear" "i-node." "" clri(8)
.xx "" "fs," "inode: format of file system volume." "" fs(5)
.xx "" "read, readv: read" "input." "" read(2)
.xx "" "soelim: eliminate \&.so's from nroff" "input." "" soelim(1)
.xx "" "scanf, fscanf, sscanf: formatted" "input conversion." "" scanf(3S)
.xx "" "ungetc: push character back into" "input stream." "" ungetc(3S)
.xx "" "fread, fwrite: buffered binary" "input/output." "" fread(3S)
.xx "" "stdio: standard buffered" "input/output package." "" intro(3S)
.xx "" "stdio: standard buffered" "input/output package." "" stdio(3S)
.xx "" "feof, ferror, clearerr, fileno: stream status" "inquiries." "" ferror(3S)
.xx "" "refer: find and" "insert literature references in documents." "" refer(1)
.xx "" "vfontinfo:" "inspect and print out information about UNIX fonts." "" vfontinfo(1)
.xx "" "install:" "install binaries." "" install(8)
.xx "" "" "install: install binaries." "" install(8)
.xx "" "learn: computer aided" "instruction about UNIX." "" learn(1)
.xx "" "ltol3: convert between 3-byte integers and long" "integers." "l3tol," l3tol(3)
.xx "" "doctor:" "interact with a psychoanalyst." "" doctor(6)
.xx "" "fsck: file system consistency check and" "interactive repair." "" fsck(8)
.xx "" "fortune: print a random, hopefully" "interesting, adage." "" fortune(6)
.xx "" "acc: ACC LH/DH IMP" "interface." "" acc(4v)
.xx "" "cons: VAX-11 console" "interface." "" cons(4v)
.xx "" "css: DEC IMP-11A LH/DH IMP" "interface." "" css(4v)
.xx "" "ct: phototypesetter" "interface." "" ct(4v)
.xx "" "dn: DN-11 autocall unit" "interface." "" dn(4v)
.xx "" "ec: 3Com 10 Mb/s Ethernet" "interface." "" ec(4v)
.xx "" "en: Xerox 3 Mb/s Ethernet" "interface." "" en(4v)
.xx "" "fl: floppy" "interface." "" fl(4v)
.xx "" "hp: MASSBUS disk" "interface." "" hp(4v)
.xx "" "ht: TM-03/TE-16,TU-45,TU-77 MASSBUS magtape" "interface." "" ht(4v)
.xx "" "hy: Network Systems Hyperchannel" "Interface." "" hy(4v)
.xx "" "ik: Ikonas frame buffer, graphics device" "interface." "" ik(4v)
.xx "" "il: Interlan 10 Mb/s Ethernet" "interface." "" il(4v)
.xx "" "imp: IMP raw socket" "interface." "" imp(4p)
.xx "" "imp: 1822 network" "interface." "" imp(4v)
.xx "" "loop: software loopback network" "interface." "" lo(4)
.xx "" "mt: UNIX magtape" "interface." "" mt(4)
.xx "" "mt: TM78/TU-78 MASSBUS magtape" "interface." "" mt(4v)
.xx "" "cont, point, linemod, space, closepl: graphics" "interface." "/erase, label, line, circle, arc, move," plot(3x)
.xx "" "plot: graphics" "interface." "" plot(5)
.xx "" "and Sutherland Picture System 2 graphics device" "interface." "ps: Evans" ps(4v)
.xx "" "pup: raw PUP socket" "interface." "" pup(4p)
.xx "" "rx: DEC RX02 floppy disk" "interface." "" rx(4v)
.xx "" "tm: TM-11/TE-10 magtape" "interface." "" tm(4v)
.xx "" "ts: TS-11 magtape" "interface." "" ts(4v)
.xx "" "tty: general terminal" "interface." "" tty(4)
.xx "" "tu: VAX-11/730 TU58 console cassette" "interface." "" tu(4v)
.xx "" "uda: UDA-50 disk controller" "interface." "" uda(4v)
.xx "" "un: Ungermann-Bass" "interface." "" un(4v)
.xx "" "ut: UNIBUS TU45 tri-density tape drive" "interface." "" ut(4v)
.xx "" "va: Benson-Varian" "interface." "" va(4v)
.xx "" "vp: Versatec" "interface." "" vp(4v)
.xx "" "telnet: user" "interface to the TELNET protocol." "" telnet(1C)
.xx "" "il:" "Interlan 10 Mb/s Ethernet interface." "" il(4v)
.xx "" "swapon, swapoff: add/delete a swap device for" "interleaved paging/swapping." "" swapon(2)
.xx "" "vswapon: add a swap device for" "interleaved paging/swapping." "" vswapon(2)
.xx "" "sendmail: send mail over the" "internet." "" sendmail(8)
.xx "" "/inet_makeaddr, inet_lnaof, inet_netof:" "Internet address manipulation routines." "" inet(3n)
.xx "" "ftpd: DARPA" "Internet File Transfer Protocol server." "" ftpd(8)
.xx "" "ip:" "Internet Protocol." "" ip(4p)
.xx "" "inet:" "Internet protocol family." "" inet(4f)
.xx "" "tcp:" "Internet Transmission Control Protocol." "" tcp(4p)
.xx "" "udp:" "Internet User Datagram Protocol." "" udp(4p)
.xx "" "spline:" "interpolate smooth curve." "" spline(1G)
.xx "" "lisp: lisp" "interpreter." "" lisp(1)
.xx "" "pti: phototypesetter" "interpreter." "" pti(1)
.xx "" "px: Pascal" "interpreter." "" px(1)
.xx "" "pix: Pascal" "interpreter and executor." "" pix(1)
.xx "" "pi: Pascal" "interpreter code translator." "" pi(1)
.xx "" "csh: a shell (command" "interpreter) with C-like syntax." "" csh(1)
.xx "" "pipe: create an" "interprocess communication channel." "" pipe(2)
.xx "" "onintr: process" "interrupts in command scripts." "" csh(1)
.xx "" "sleep: suspend execution for an" "interval." "" sleep(1)
.xx "" "sleep: suspend execution for" "interval." "" sleep(3)
.xx "" "intro:" "introduction to commands." "" intro(1)
.xx "" "intro:" "introduction to FORTRAN library functions." "" intro(3f)
.xx "" "intro:" "introduction to library functions." "" intro(3)
.xx "" "intro:" "introduction to mathematical library functions." "" intro(3M)
.xx "" "intro:" "introduction to network library functions." "" intro(3n)
.xx "" "net:" "introduction to networking facilities." "" intro(4n)
.xx "" "intro:" "introduction to special files and hardware support." "" intro(4)
.xx "" "intro:" "introduction to system calls and error numbers." "" intro(2)
.xx "commands." "intro:" "introduction to system maintenance and operation" "" intro(8)
.xx "" "intro:" "introduction to VAX devices." "" intro(4v)
.xx "" "ncheck: generate names from" "i-numbers." "" ncheck(8)
.xx "" "aliens: The alien" "invaders attack the earth." "" aliens(6)
.xx "" "select: synchronous" "i/o multiplexing." "" select(2)
.xx "" "iostat: report" "I/O statistics." "" iostat(1)
.xx "" "popen, pclose: initiate" "I/O to/from a process." "" popen(3S)
.xx "" "" "ioctl: control device." "" ioctl(2)
.xx "" "" "iostat: report I/O statistics." "" iostat(1)
.xx "" "" "ip: Internet Protocol." "" ip(4p)
.xx "" "rand, drand," "irand: return random values." "" rand(3f)
.xx "" "whatis: describe what a command" "is." "" whatis(1)
.xx "isascii:/" "isalpha, isupper, islower, isdigit," "isalnum, isspace, ispunct, isprint, iscntrl," "" ctype(3)
.xx "isspace, ispunct, isprint, iscntrl, isascii:/" "" "isalpha, isupper, islower, isdigit, isalnum," "" ctype(3)
.xx "" "isalnum, isspace, ispunct, isprint, iscntrl," "isascii: character classification." "/isdigit," ctype(3)
.xx "" "ttynam," "isatty: find name of a terminal port." "" ttynam(3f)
.xx "" "ttyname," "isatty, ttyslot: find name of a terminal." "" ttyname(3)
.xx "" "/isdigit, isalnum, isspace, ispunct, isprint," "iscntrl, isascii: character classification." "" ctype(3)
.xx "iscntrl, isascii:/" "isalpha, isupper, islower," "isdigit, isalnum, isspace, ispunct, isprint," "" ctype(3)
.xx "isprint, iscntrl, isascii:/" "isalpha, isupper," "islower, isdigit, isalnum, isspace, ispunct," "" ctype(3)
.xx "" "islower, isdigit, isalnum, isspace, ispunct," "isprint, iscntrl, isascii: character/" "/isupper," ctype(3)
.xx "" "/isupper, islower, isdigit, isalnum, isspace," "ispunct, isprint, iscntrl, isascii: character/" "" ctype(3)
.xx "" "isalpha, isupper, islower, isdigit, isalnum," "isspace, ispunct, isprint, iscntrl, isascii:/" "" ctype(3)
.xx "" "system:" "issue a shell command." "" system(3)
.xx "ispunct, isprint, iscntrl, isascii:/" "isalpha," "isupper, islower, isdigit, isalnum, isspace," "" ctype(3)
.xx "" "see: see what a file has in" "it." "" see(1)
.xx "" "biff: be notified if mail arrives and who" "it is from." "" biff(1)
.xx "" "idate," "itime: return date or time in numerical form." "" idate(3f)
.xx "" "getdiskbyname: get disk description by" "its name." "" getdisk(3x)
.xx "" "suspend: suspend a shell, resuming" "its superior." "" csh(1)
.xx "" "" "j0, j1, jn, y0, y1, yn: bessel functions." "" j0(3M)
.xx "" "j0," "j1, jn, y0, y1, yn: bessel functions." "" j0(3M)
.xx "" "j0, j1," "jn, y0, y1, yn: bessel functions." "" j0(3M)
.xx "" "intro: summary of" "job control facilities." "" intro(3j)
.xx "" "jobs: summary of" "job control facilities." "" jobs(3j)
.xx "" "bg: place" "job in background." "" csh(1)
.xx "" "fg: bring" "job into foreground." "" csh(1)
.xx "" "jobs: print current" "job list." "" csh(1)
.xx "" "stop: halt a" "job or process." "" csh(1)
.xx "" "kill: kill" "jobs and processes." "" csh(1)
.xx "" "lprm: remove" "jobs from the line printer spooling queue." "" lprm(1)
.xx "" "" "jobs: print current job list." "" csh(1)
.xx "" "" "jobs: summary of job control facilities." "" jobs(3j)
.xx "" "" "join: relational database operator." "" join(1)
.xx "" "msgs: system messages and" "junk mail program." "" msgs(1)
.xx "" "makekey: generate encryption" "key." "" makekey(8)
.xx "" "apropos: locate commands by" "keyword lookup." "" apropos(1)
.xx "" "man: find manual information by" "keywords; print out the manual." "" man(1)
.xx "profile buffers." "" "kgmon: generate a dump of the operating systems" "" kgmon(8)
.xx "" "kill:" "kill jobs and processes." "" csh(1)
.xx "" "" "kill: kill jobs and processes." "" csh(1)
.xx "" "" "kill: send a signal to a process." "" kill(3f)
.xx "" "" "kill: send signal to a process." "" kill(2)
.xx "" "" "kill: terminate a process with extreme prejudice." "" kill(1)
.xx "" "chase: Try to escape to" "killer robots." "" chase(6)
.xx "" "" "killpg: send signal to a process group." "" killpg(2)
.xx "" "bessel functions: of two" "kinds for integer orders." "" bessel(3f)
.xx "" "mem," "kmem: main memory." "" mem(4)
.xx "" "quiz: test your" "knowledge." "" quiz(6)
.xx "long integers." "" "l3tol, ltol3: convert between 3-byte integers and" "" l3tol(3)
.xx "linemod, space, closepl:/" "plot: openpl, erase," "label, line, circle, arc, move, cont, point," "" plot(3x)
.xx "" "awk: pattern scanning and processing" "language." "" awk(1)
.xx "" "bc: arbitrary-precision arithmetic" "language." "" bc(1)
.xx "" "efl: Extended Fortran" "Language." "" efl(1)
.xx "" "set, shift, times, trap, umask, wait: command" "language." "/export, login, newgrp, read, readonly," sh(1)
.xx "" "fp: Functional Programming" "language compiler/interpreter." "" fp(1)
.xx "" "vgrindefs: vgrind's" "language definition data base." "" vgrindefs(5)
.xx "order." "" "lastcomm: show last commands executed in reverse" "" lastcomm(1)
.xx "" "" "ld: link editor." "" ld(1)
.xx "" "frexp," "ldexp, modf: split into mantissa and exponent." "" frexp(3)
.xx "" "" "learn: computer aided instruction about UNIX." "" learn(1)
.xx "" "leave: remind you when you have to" "leave." "" leave(1)
.xx "" "" "leave: remind you when you have to leave." "" leave(1)
.xx "" "exit:" "leave shell." "" csh(1)
.xx "" "index, rindex, lnblnk," "len: tell about character objects." "" index(3f)
.xx "" "truncate: truncate a file to a specified" "length." "" truncate(2)
.xx "" "" "lex: generator of lexical analysis programs." "" lex(1)
.xx "" "lex: generator of" "lexical analysis programs." "" lex(1)
.xx "" "acc: ACC" "LH/DH IMP interface." "" acc(4v)
.xx "" "css: DEC IMP-11A" "LH/DH IMP interface." "" css(4v)
.xx "" "ranlib: convert archives to random" "libraries." "" ranlib(1)
.xx "" "lorder: find ordering relation for an object" "library." "" lorder(1)
.xx "" "ar: archive" "(library) file format." "" ar(5)
.xx "" "intro: introduction to" "library functions." "" intro(3)
.xx "" "intro: introduction to FORTRAN" "library functions." "" intro(3f)
.xx "" "intro: introduction to mathematical" "library functions." "" intro(3M)
.xx "" "intro: introduction to network" "library functions." "" intro(3n)
.xx "" "ar: archive and" "library maintainer." "" ar(1)
.xx "" "" "limit: alter per-process resource limitations." "" csh(1)
.xx "" "limit: alter per-process resource" "limitations." "" csh(1)
.xx "" "unlimit: remove resource" "limitiations." "" csh(1)
.xx "space, closepl:/" "plot: openpl, erase, label," "line, circle, arc, move, cont, point, linemod," "" plot(3x)
.xx "" "bk:" "line discipline for machine-machine communication." "" bk(4)
.xx "" "col: filter reverse" "line feeds." "" col(1)
.xx "" "sysline: display system status on status" "line of a terminal." "" sysline(1)
.xx "" "lpr: off" "line print." "" lpr(1)
.xx "" "lp:" "line printer." "" lp(4v)
.xx "" "print: pr to the" "line printer." "" print(1)
.xx "reboot time." "lpd, lpdrestart:" "line printer daemon, restart downed daemons at" "" lpd(8)
.xx "" "lprm: remove jobs from the" "line printer spooling queue." "" lprm(1)
.xx "" "/erase, label, line, circle, arc, move, cont, point," "linemod, space, closepl: graphics interface." "" plot(3x)
.xx "" "netlpr: use a remote" "lineprinter through the net." "" netlpr(1)
.xx "" "head: give first few" "lines." "" head(1)
.xx "" "num: number" "lines." "" num(1)
.xx "" "comm: select or reject" "lines common to two sorted files." "" comm(1)
.xx "" "fold: fold long" "lines for finite width output device." "" fold(1)
.xx "" "uniq: report repeated" "lines in a file." "" uniq(1)
.xx "" "look: find" "lines in a sorted list." "" look(1)
.xx "" "rev: reverse" "lines of a file." "" rev(1)
.xx "" "netlog: print the last few" "lines of the network log file." "" netlog(1)
.xx "" "readlink: read value of a symbolic" "link." "" readlink(2)
.xx "" "ld:" "link editor." "" ld(1)
.xx "" "a.out: assembler and" "link editor output." "" a.out(5)
.xx "" "" "link: make a hard link to a file." "" link(2)
.xx "" "" "link: make a link to an existing file." "" link(3f)
.xx "" "link: make a hard" "link to a file." "" link(2)
.xx "" "symlink: make symbolic" "link to a file." "" symlink(2)
.xx "" "link: make a" "link to an existing file." "" link(3f)
.xx "" "ln: make" "links." "" ln(1)
.xx "" "" "lint: a C program verifier." "" lint(1)
.xx "" "lxref:" "lisp cross reference program." "" lxref(1)
.xx "" "lisp:" "lisp interpreter." "" lisp(1)
.xx "" "" "lisp: lisp interpreter." "" lisp(1)
.xx "" "liszt: compile a Franz" "Lisp program." "" liszt(1)
.xx "troff." "vlp \(em Format" "Lisp programs to be printed with nroff, vtroff, or" "" vlp(1)
.xx "" "glob: filename expand argument" "list." "" csh(1)
.xx "" "history: print history event" "list." "" csh(1)
.xx "" "jobs: print current job" "list." "" csh(1)
.xx "" "shift: manipulate argument" "list." "" csh(1)
.xx "" "getgroups: get group access" "list." "" getgroups(2)
.xx "" "initgroups: initialize group access" "list." "" initgroups(3)
.xx "" "look: find lines in a sorted" "list." "" look(1)
.xx "" "nlist: get entries from name" "list." "" nlist(3)
.xx "" "nm: print name" "list." "" nm(1)
.xx "" "setgroups: set group access" "list." "" setgroups(2)
.xx "" "symorder: rearrange name" "list." "" symorder(1)
.xx "" "varargs: variable argument" "list." "" varargs(3)
.xx "" "ls:" "list contents of directory." "" ls(1)
.xx "" "foreach: loop over" "list of names." "" csh(1)
.xx "" "users: compact" "list of users who are on the system." "" users(1)
.xx "" "listen:" "listen for connections on a socket." "" listen(2)
.xx "" "" "listen: listen for connections on a socket." "" listen(2)
.xx "" "vgrind: grind nice" "listings of programs." "" vgrind(1)
.xx "" "" "liszt: compile a Franz Lisp program." "" liszt(1)
.xx "" "lookbib\- find" "literature references in documents." "" lookbib(1)
.xx "" "refer: find and insert" "literature references in documents." "" refer(1)
.xx "" "" "ln: make links." "" ln(1)
.xx "" "index, rindex," "lnblnk, len: tell about character objects." "" index(3f)
.xx "" "" "loc: return the address of an object." "" loc(3f)
.xx "and time to ASCII." "ctime," "localtime, gmtime, asctime, timezone: convert date" "" ctime(3)
.xx "(\fIcsh\fR only)." "which:" "locate a program file including aliases and paths" "" which(1)
.xx "" "apropos:" "locate commands by keyword lookup." "" apropos(1)
.xx "" "whereis:" "locate source, binary, and or manual for program." "" whereis(1)
.xx "" "end, etext, edata: last" "locations in program." "" end(3)
.xx "" "flock: apply or remove an advisory" "lock on an open file." "" flock(2)
.xx "" "" "lock: reserve a terminal." "" lock(1)
.xx "" "collect system diagnostic messages to form error" "log." "dmesg:" dmesg(8)
.xx "" "syslog, openlog, closelog: control system" "log." "" syslog(3)
.xx "" "netlog: print the last few lines of the network" "log file." "" netlog(1)
.xx "" "gamma:" "log gamma function." "" gamma(3M)
.xx "power, square root." "exp," "log, log10, pow, sqrt: exponential, logarithm," "" exp(3M)
.xx "" "syslog:" "log systems messages." "" syslog(8)
.xx "square root." "exp, log," "log10, pow, sqrt: exponential, logarithm, power," "" exp(3M)
.xx "" "exp, log, log10, pow, sqrt: exponential," "logarithm, power, square root." "" exp(3M)
.xx "" "rwho: who's" "logged in on local machines." "" rwho(1)
.xx "" "implogd: IMP" "logger process." "" implogd(8)
.xx "" "flush: flush output to a" "logical unit." "" flush(3f)
.xx "" "fseek, ftell: reposition a file on a" "logical unit." "" fseek(3f)
.xx "" "getc, fgetc: get a character from a" "logical unit." "" getc(3f)
.xx "" "putc, fputc: write a character to a fortran" "logical unit." "" putc(3f)
.xx "" "rlogin: remote" "login." "" rlogin(1C)
.xx "" "ac:" "login accounting." "" ac(8)
.xx "" "" "login: login new user." "" csh(1)
.xx "" "getlog: get user's" "login name." "" getlog(3f)
.xx "" "getlogin: get" "login name." "" getlogin(3)
.xx "" "netlogin: provide" "login name and password for a remote machine." "" netlogin(1)
.xx "" "login:" "login new user." "" csh(1)
.xx "" "/break, continue, cd, eval, exec, exit, export," "login, newgrp, read, readonly, set, shift, times,/" "" sh(1)
.xx "" "passwd: change" "login password." "" passwd(1)
.xx "" "utmp, wtmp:" "login records." "" utmp(5)
.xx "" "rlogind: remote" "login server." "" rlogind(8)
.xx "" "chsh: change default" "login shell." "" chsh(1)
.xx "" "" "login: sign on." "" login(1)
.xx "" "last: indicate last" "logins of users and teletypes." "" last(1)
.xx "" "" "logout: end session." "" csh(1)
.xx "" "setjmp," "longjmp: non-local goto." "" setjmp(3)
.xx "" "" "look: find lines in a sorted list." "" look(1)
.xx "" "" "lookbib\- find literature references in documents." "" lookbib(1)
.xx "" "apropos: locate commands by keyword" "lookup." "" apropos(1)
.xx "" "finger: user information" "lookup program." "" finger(1)
.xx "" "break: exit while/foreach" "loop." "" csh(1)
.xx "" "continue: cycle in" "loop." "" csh(1)
.xx "" "end: terminate" "loop." "" csh(1)
.xx "" "foreach:" "loop over list of names." "" csh(1)
.xx "" "" "loop: software loopback network interface." "" lo(4)
.xx "" "loop: software" "loopback network interface." "" lo(4)
.xx "library." "" "lorder: find ordering relation for an object" "" lorder(1)
.xx "" "mklost+found: make a" "lost+found directory for fsck." "" mklost+found(8)
.xx "" "" "lp: line printer." "" lp(4v)
.xx "downed daemons at reboot time." "" "lpd, lpdrestart: line printer daemon, restart" "" lpd(8)
.xx "daemons at reboot time." "lpd," "lpdrestart: line printer daemon, restart downed" "" lpd(8)
.xx "" "" "lpq: spool queue examination program." "" lpq(1)
.xx "" "" "lpr: off line print." "" lpr(1)
.xx "queue." "" "lprm: remove jobs from the line printer spooling" "" lprm(1)
.xx "" "" "ls: list contents of directory." "" ls(1)
.xx "" "" "lseek: move read/write pointer." "" lseek(2)
.xx "" "or, xor, not \- bitwise functions .sp 1 rshift," "lshift \- bit shifting functions." "/.sp 1 and," bit(3f)
.xx "" "stat," "lstat, fstat: get file status." "" stat(2)
.xx "" "time, ctime," "ltime, gmtime: return system time." "" time(3f)
.xx "integers." "l3tol," "ltol3: convert between 3-byte integers and long" "" l3tol(3)
.xx "" "" "lxref: lisp cross reference program." "" lxref(1)
.xx "" "" "m4: macro processor." "" m4(1)
.xx "" "net: execute a command on a remote" "machine." "" net(1)
.xx "" "provide login name and password for a remote" "machine." "netlogin:" netlogin(1)
.xx "" "netmail: read mail on a remote" "machine over the network." "" netmail(1)
.xx "" "bk: line discipline for" "machine-machine communication." "" bk(4)
.xx "" "ruptime: show host status of local" "machines." "" ruptime(1)
.xx "" "rwho: who's logged in on local" "machines." "" rwho(1)
.xx "" "uudiff: directory comparison between" "machines." "" uudiff(1C)
.xx "" "m4:" "macro processor." "" m4(1)
.xx "" "alias: shell" "macros." "" csh(1)
.xx "" "translate version 6 manual macros to version 7" "macros." "trman:" trman(1)
.xx "" "ms:" "macros for formatting manuscripts." "" ms(7)
.xx "" "me:" "macros for formatting papers." "" me(7)
.xx "" "man:" "macros to typeset manual." "" man(7)
.xx "" "trman: translate version 6 manual" "macros to version 7 macros." "" trman(1)
.xx "" "" "madvise: give advice to the paging system." "" madvise(2)
.xx "" "mt:" "magnetic tape manipulating program." "" mt(1)
.xx "" "ht: TM-03/TE-16,TU-45,TU-77 MASSBUS" "magtape interface." "" ht(4v)
.xx "" "mt: UNIX" "magtape interface." "" mt(4)
.xx "" "mt: TM78/TU-78 MASSBUS" "magtape interface." "" mt(4v)
.xx "" "tm: TM-11/TE-10" "magtape interface." "" tm(4v)
.xx "" "ts: TS-11" "magtape interface." "" ts(4v)
.xx "" "rmt: remote" "magtape protocol module." "" rmt(8)
.xx "" "mail: send and receive" "mail." "" mail(1)
.xx "" "encode/decode a binary file for tranmission via" "mail." "uuencode,uudecode:" uuencode(1C)
.xx "" "xsend, xget, enroll: secret" "mail." "" xsend(1)
.xx "" "newaliases: rebuild the data base for the" "mail aliases file." "" newaliases(1)
.xx "" "binmail: send or receive" "mail among users." "" binmail(1)
.xx "" "biff: be notified if" "mail arrives and who it is from." "" biff(1)
.xx "" "from: who is my" "mail from?." "" from(1)
.xx "" "prmail: print out" "mail in the post office." "" prmail(1)
.xx "" "netmail: read" "mail on a remote machine over the network." "" netmail(1)
.xx "" "sendmail: send" "mail over the internet." "" sendmail(8)
.xx "" "msgs: system messages and junk" "mail program." "" msgs(1)
.xx "" "" "mail: send and receive mail." "" mail(1)
.xx "" "mem, kmem:" "main memory." "" mem(4)
.xx "" "malloc, free, realloc, calloc:" "main memory allocator." "" malloc(3)
.xx "" "make:" "maintain program groups." "" make(1)
.xx "" "ar: archive and library" "maintainer." "" ar(1)
.xx "" "intro: introduction to system" "maintenance and operation commands." "" intro(8)
.xx "" "mkdir:" "make a directory." "" mkdir(1)
.xx "" "mkdir:" "make a directory file." "" mkdir(2)
.xx "" "link:" "make a hard link to a file." "" link(2)
.xx "" "link:" "make a link to an existing file." "" link(3f)
.xx "" "mklost+found:" "make a lost+found directory for fsck." "" mklost+found(8)
.xx "" "mknod:" "make a special file." "" mknod(2)
.xx "" "mktemp:" "make a unique file name." "" mktemp(3)
.xx "" "ln:" "make links." "" ln(1)
.xx "" "" "make: maintain program groups." "" make(1)
.xx "" "symlink:" "make symbolic link to a file." "" symlink(2)
.xx "" "MAKEDEV:" "make system special files." "" makedev(8)
.xx "" "vwidth:" "make troff width table for a font." "" vwidth(1)
.xx "" "script:" "make typescript of terminal session." "" script(1)
.xx "" "" "MAKEDEV: make system special files." "" makedev(8)
.xx "" "" "makekey: generate encryption key." "" makekey(8)
.xx "allocator." "" "malloc, free, realloc, calloc: main memory" "" malloc(3)
.xx "the manual." "" "man: find manual information by keywords; print out" "" man(1)
.xx "" "" "man: macros to typeset manual." "" man(7)
.xx "" "signal, sighold, sigignore, sigrelse, sigpause:" "manage signals." "sigset," signal(3j)
.xx "" "signal, sighold, sigignore, sigrelse, sigpause:" "manage signals." "sigset," sigset(3j)
.xx "" "shift:" "manipulate argument list." "" csh(1)
.xx "" "tp:" "manipulate tape archive." "" tp(1)
.xx "" "route: manually" "manipulate the routing tables." "" route(8)
.xx "" "mt: magnetic tape" "manipulating program." "" mt(1)
.xx "" "inet_lnaof, inet_netof: Internet address" "manipulation routines." "/inet_makeaddr," inet(3n)
.xx "" "frexp, ldexp, modf: split into" "mantissa and exponent." "" frexp(3)
.xx "" "catman: create the cat files for the" "manual." "" catman(8)
.xx "" "find manual information by keywords; print out the" "manual." "man:" man(1)
.xx "" "man: macros to typeset" "manual." "" man(7)
.xx "" "whereis: locate source, binary, and or" "manual for program." "" whereis(1)
.xx "manual." "man: find" "manual information by keywords; print out the" "" man(1)
.xx "" "trman: translate version 6" "manual macros to version 7 macros." "" trman(1)
.xx "" "route:" "manually manipulate the routing tables." "" route(8)
.xx "" "ms: macros for formatting" "manuscripts." "" ms(7)
.xx "" "umask: change or display file creation" "mask." "" csh(1)
.xx "" "umask: set file creation mode" "mask." "" umask(2)
.xx "" "mkstr: create an error message file by" "massaging C source." "" mkstr(1)
.xx "" "hp:" "MASSBUS disk interface." "" hp(4v)
.xx "" "ht: TM-03/TE-16,TU-45,TU-77" "MASSBUS magtape interface." "" ht(4v)
.xx "" "mt: TM78/TU-78" "MASSBUS magtape interface." "" mt(4v)
.xx "" "intro: introduction to" "mathematical library functions." "" intro(3M)
.xx "" "eqn, neqn, checkeq: typeset" "mathematics." "" eqn(1)
.xx "" "getrlimit, setrlimit: control" "maximum system resource consumption." "" getrlimit(2)
.xx "" "ec: 3Com 10" "Mb/s Ethernet interface." "" ec(4v)
.xx "" "en: Xerox 3" "Mb/s Ethernet interface." "" en(4v)
.xx "" "il: Interlan 10" "Mb/s Ethernet interface." "" il(4v)
.xx "" "" "me: macros for formatting papers." "" me(7)
.xx "" "bcd: convert to antique" "media." "" bcd(6)
.xx "" "vv: Proteon proNET 10" "Megabit ring." "" vv(4v)
.xx "" "" "mem, kmem: main memory." "" mem(4)
.xx "" "groups: show group" "memberships." "" groups(1)
.xx "" "mem, kmem: main" "memory." "" mem(4)
.xx "" "map: map pages of" "memory." "" mmap(2)
.xx "" "mremap: remap pages of" "memory." "" mremap(2)
.xx "" "munmap: unmap pages of" "memory." "" munmap(2)
.xx "" "malloc, free, realloc, calloc: main" "memory allocator." "" malloc(3)
.xx "" "valloc: aligned" "memory allocator." "" valloc(3)
.xx "" "vfork: spawn new process in a virtual" "memory efficient way." "" vfork(2)
.xx "" "abort: terminate abruptly with" "memory image." "" abort(3f)
.xx "" "core: format of" "memory image file." "" core(5)
.xx "" "mprotect: change" "memory protection." "" mprotect(2)
.xx "" "vmstat: report virtual" "memory statistics." "" vmstat(1)
.xx "" "sort: sort or" "merge files." "" sort(1)
.xx "" "pmerge: pascal file" "merger." "" pmerge(1)
.xx "" "" "mesg: permit or deny messages." "" mesg(1)
.xx "" "mkstr: create an error" "message file by massaging C source." "" mkstr(1)
.xx "" "recv, recvfrom, recvmsg: receive a" "message from a socket." "" recv(2)
.xx "" "send, sendto, sendmsg: send a" "message from a socket." "" send(2)
.xx "" "error: analyze and disperse compiler error" "messages." "" error(1)
.xx "" "mesg: permit or deny" "messages." "" mesg(1)
.xx "" "perror, sys_errlist, sys_nerr: system error" "messages." "" perror(3)
.xx "" "perror, gerror, ierrno: get system error" "messages." "" perror(3f)
.xx "" "psignal, sys_siglist: system signal" "messages." "" psignal(3)
.xx "" "syslog: log systems" "messages." "" syslog(8)
.xx "" "msgs: system" "messages and junk mail program." "" msgs(1)
.xx "" "dmesg: collect system diagnostic" "messages to form error log." "" dmesg(8)
.xx "" "mille: play" "Mille Bournes." "" mille(6)
.xx "" "" "mille: play Mille Bournes." "" mille(6)
.xx "" "" "mincore: find out about core resident pages." "" mincore(2)
.xx "pages." "" "miscellaneous: Miscellaneous useful information" "" intro(7)
.xx "" "miscellaneous:" "Miscellaneous useful information pages." "" intro(7)
.xx "" "" "mkdir: make a directory." "" mkdir(1)
.xx "" "" "mkdir: make a directory file." "" mkdir(2)
.xx "" "" "mkfs: construct a file system." "" mkfs(8)
.xx "" "" "mklost+found: make a lost+found directory for fsck." "" mklost+found(8)
.xx "" "" "mknod: build special file." "" mknod(8)
.xx "" "" "mknod: make a special file." "" mknod(2)
.xx "" "" "mkproto: construct a pototype file system." "" mkproto(8)
.xx "source." "" "mkstr: create an error message file by massaging C" "" mkstr(1)
.xx "" "" "mktemp: make a unique file name." "" mktemp(3)
.xx "" "chmod: change" "mode." "" chmod(1)
.xx "" "getty: set terminal" "mode." "" getty(8)
.xx "" "umask: set file creation" "mode mask." "" umask(2)
.xx "" "chmod: change" "mode of file." "" chmod(2)
.xx "" "frexp, ldexp," "modf: split into mantissa and exponent." "" frexp(3)
.xx "" "touch: update date last" "modified of a file." "" touch(1)
.xx "recovery." "eyacc:" "modified yacc allowing much improved error" "" eyacc(1)
.xx "" "rmt: remote magtape protocol" "module." "" rmt(8)
.xx "" "up: unibus storage" "module controller/drives." "" up(4v)
.xx "" "what: show what versions of object" "modules were used to construct a file." "" what(1)
.xx "" "" "monitor, monstartup: prepare execution profile." "" monitor(3)
.xx "" "" "monop: Monopoly game." "" monop(6)
.xx "" "monop:" "Monopoly game." "" monop(6)
.xx "" "monitor," "monstartup: prepare execution profile." "" monitor(3)
.xx "" "" "more, page: file perusal filter for crt viewing." "" more(1)
.xx "" "curses: screen functions with ``optimal'' cursor" "motion." "" curses(3x)
.xx "" "mount, umount:" "mount and dismount file system." "" mount(8)
.xx "" "mount, unmount:" "mount or remove file system." "" mount(2)
.xx "" "" "mount, umount: mount and dismount file system." "" mount(8)
.xx "" "" "mount, unmount: mount or remove file system." "" mount(2)
.xx "" "mtab:" "mounted file system table." "" mtab(5)
.xx "" "plot: openpl, erase, label, line, circle, arc," "move, cont, point, linemod, space, closepl:/" "" plot(3x)
.xx "" "mv:" "move or rename files." "" mv(1)
.xx "" "lseek:" "move read/write pointer." "" lseek(2)
.xx "" "hk: RK6-11/RK06 and RK07" "moving head disk." "" hk(4v)
.xx "" "" "mprotect: change memory protection." "" mprotect(2)
.xx "" "" "mremap: remap pages of memory." "" mremap(2)
.xx "" "" "ms: macros for formatting manuscripts." "" ms(7)
.xx "" "" "msgs: system messages and junk mail program." "" msgs(1)
.xx "" "" "mt: magnetic tape manipulating program." "" mt(1)
.xx "" "" "mt: TM78/TU-78 MASSBUS magtape interface." "" mt(4v)
.xx "" "" "mt: UNIX magtape interface." "" mt(4)
.xx "" "" "mtab: mounted file system table." "" mtab(5)
.xx "" "eyacc: modified yacc allowing" "much improved error recovery." "" eyacc(1)
.xx "" "dh/dm: DH-11/DM-11 communications" "multiplexer." "" dh(4v)
.xx "" "dz: DZ-11 communications" "multiplexer." "" dz(4v)
.xx "" "select: synchronous i/o" "multiplexing." "" select(2)
.xx "" "dmf: DMF-32, terminal" "multiplexor." "" dmf(4v)
.xx "" "switch:" "multi-way command branch." "" csh(1)
.xx "" "" "munmap: unmap pages of memory." "" munmap(2)
.xx "" "" "mv: move or rename files." "" mv(1)
.xx "" "from: who is" "my mail from?." "" from(1)
.xx "" "getdiskbyname: get disk description by its" "name." "" getdisk(3x)
.xx "" "getenv: value for environment" "name." "" getenv(3)
.xx "" "getlog: get user's login" "name." "" getlog(3f)
.xx "" "getlogin: get login" "name." "" getlogin(3)
.xx "" "mktemp: make a unique file" "name." "" mktemp(3)
.xx "" "pwd: working directory" "name." "" pwd(1)
.xx "" "tty: get terminal" "name." "" tty(1)
.xx "" "netlogin: provide login" "name and password for a remote machine." "" netlogin(1)
.xx "" "hosts: host" "name data base." "" hosts(5)
.xx "" "networks: network" "name data base." "" networks(5)
.xx "" "protocols: protocol" "name data base." "" protocols(5)
.xx "" "services: service" "name data base." "" services(5)
.xx "" "getpw: get" "name from uid." "" getpw(3)
.xx "" "nlist: get entries from" "name list." "" nlist(3)
.xx "" "nm: print" "name list." "" nm(1)
.xx "" "symorder: rearrange" "name list." "" symorder(1)
.xx "" "rename: change the" "name of a file." "" rename(2)
.xx "" "ttyname, isatty, ttyslot: find" "name of a terminal." "" ttyname(3)
.xx "" "ttynam, isatty: find" "name of a terminal port." "" ttynam(3f)
.xx "" "gethostname, sethostname: get/set" "name of current host." "" gethostname(2)
.xx "" "hostname: set or print" "name of current host system." "" hostname(1)
.xx "" "chfn: change full" "name of user." "" chfn(1)
.xx "" "bind: bind a" "name to a socket." "" bind(2)
.xx "" "foreach: loop over list of" "names." "" csh(1)
.xx "" "terminals: conventional" "names." "" term(7)
.xx "" "ncheck: generate" "names from i-numbers." "" ncheck(8)
.xx "" "" "ncheck: generate names from i-numbers." "" ncheck(8)
.xx "" "" "nd: net disk driver." "" nd(4s)
.xx "" "eqn," "neqn, checkeq: typeset mathematics." "" eqn(1)
.xx "" "netcp: remote copy of files through the" "net." "" netcp(1)
.xx "" "netlpr: use a remote lineprinter through the" "net." "" netlpr(1)
.xx "" "nd:" "net disk driver." "" nd(4s)
.xx "" "" "net: execute a command on a remote machine." "" net(1)
.xx "" "" "net: introduction to networking facilities." "" intro(4n)
.xx "" "" "netcp: remote copy of files through the net." "" netcp(1)
.xx "file." "" "netlog: print the last few lines of the network log" "" netlog(1)
.xx "remote machine." "" "netlogin: provide login name and password for a" "" netlogin(1)
.xx "" "" "netlpr: use a remote lineprinter through the net." "" netlpr(1)
.xx "network." "" "netmail: read mail on a remote machine over the" "" netmail(1)
.xx "" "" "netq: print contents of network queue." "" netq(1)
.xx "" "" "netrm: remove a command from the network queue." "" netrm(1)
.xx "" "" "netstat: network statistics program." "" netstat(1)
.xx "network." "" "nettroff: troff to the phototypesetter over the" "" nettroff(1)
.xx "" "netmail: read mail on a remote machine over the" "network." "" netmail(1)
.xx "" "nettroff: troff to the phototypesetter over the" "network." "" nettroff(1)
.xx "" "rdump: file system dump across the" "network." "" rdump(8)
.xx "" "rrestor: file system dump across the" "network." "" rrestor(8)
.xx "" "ntohl, ntohs: convert values between host and" "network byte order." "htonl, htons," byteorder(3n)
.xx "" "getnetbyname, setnetent, endnetent: get" "network entry." "getnetent, getnetbyaddr," getnetent(3n)
.xx "" "gethostbyname, sethostent, endhostent: get" "network host entry." "gethostent, gethostbyaddr," gethostent(3n)
.xx "" "imp: 1822" "network interface." "" imp(4v)
.xx "" "loop: software loopback" "network interface." "" lo(4)
.xx "" "intro: introduction to" "network library functions." "" intro(3n)
.xx "" "netlog: print the last few lines of the" "network log file." "" netlog(1)
.xx "" "networks:" "network name data base." "" networks(5)
.xx "" "netq: print contents of" "network queue." "" netq(1)
.xx "" "netrm: remove a command from the" "network queue." "" netrm(1)
.xx "" "routed:" "network routing daemon." "" routed(8)
.xx "" "netstat:" "network statistics program." "" netstat(1)
.xx "" "hy:" "Network Systems Hyperchannel Interface." "" hy(4v)
.xx "" "net: introduction to" "networking facilities." "" intro(4n)
.xx "" "" "networks: network name data base." "" networks(5)
.xx "" "open a file for reading or writing, or create a" "new file." "open:" open(2)
.xx "" "newfs: construct a" "new file system." "" newfs(8)
.xx "" "arcv: convert archives to" "new format." "" arcv(8)
.xx "" "fork: create a" "new process." "" fork(2)
.xx "" "vfork: spawn" "new process in a virtual memory efficient way." "" vfork(2)
.xx "" "login: login" "new user." "" csh(1)
.xx "" "adduser: procedure for adding" "new users." "" adduser(8)
.xx "aliases file." "" "newaliases: rebuild the data base for the mail" "" newaliases(1)
.xx "" "" "newfs: construct a new file system." "" newfs(8)
.xx "" "/continue, cd, eval, exec, exit, export, login," "newgrp, read, readonly, set, shift, times, trap,/" "" sh(1)
.xx "" "dbminit, fetch, store, delete, firstkey," "nextkey: data base subroutines." "" dbm(3x)
.xx "" "gettable: get" "NIC format host tables from a host ." "" gettable(8)
.xx "" "htable: convert" "NIC standard format host tables." "" htable(8)
.xx "" "alter priority of running process by changing" "nice." "renice:" renice(8)
.xx "" "vgrind: grind" "nice listings of programs." "" vgrind(1)
.xx "(\fIsh\fR only)." "" "nice, nohup: run a command at low priority" "" nice(1)
.xx "" "" "nice: run low priority process." "" csh(1)
.xx "" "" "nlist: get entries from name list." "" nlist(3)
.xx "" "" "nm: print name list." "" nm(1)
.xx "only)." "nice," "nohup: run a command at low priority (\fIsh\fR" "" nice(1)
.xx "" "" "nohup: run command immune to hangups." "" csh(1)
.xx "" "setjmp, longjmp:" "non-local goto." "" setjmp(3)
.xx "" "/bit set, clear, test routines .sp 1 and, or, xor," "not \- bitwise functions .sp 1 rshift, lshift \-/" "" bit(3f)
.xx "" "notify: request immediate" "notification." "" csh(1)
.xx "" "biff: be" "notified if mail arrives and who it is from." "" biff(1)
.xx "" "" "notify: request immediate notification." "" csh(1)
.xx "" "soelim: eliminate \&.so's from" "nroff input." "" soelim(1)
.xx "" "tbl: format tables for" "nroff or troff." "" tbl(1)
.xx "" "colcrt: filter" "nroff output for CRT previewing." "" colcrt(1)
.xx "" "troff," "nroff: text formatting and typesetting." "" nroff(1)
.xx "" "troff," "nroff: text formatting and typesetting." "" troff(1)
.xx "" "deroff: remove" "nroff, troff, tbl and eqn constructs." "" deroff(1)
.xx "" "vlp \(em Format Lisp programs to be printed with" "nroff, vtroff, or troff." "" vlp(1)
.xx "" "checknr: check" "nroff/troff files." "" checknr(1)
.xx "network byte order." "htonl, htons," "ntohl, ntohs: convert values between host and" "" byteorder(3n)
.xx "order." "htonl, htons, ntohl," "ntohs: convert values between host and network byte" "" byteorder(3n)
.xx "" "" "null: data sink." "" null(4)
.xx "" "" "num: number lines." "" num(1)
.xx "" "" "number: convert Arabic numerals to English." "" number(6)
.xx "" "phones: remote host phone" "number data base .ad." "" phones(5)
.xx "" "arithmetic: provide drill in" "number facts." "" arithmetic(6)
.xx "" "rand, srand: random" "number generator." "" rand(3)
.xx "routines for/" "random, srandom: better random" "number generator .br initstate, setstate \-" "" random(3)
.xx "" "num:" "number lines." "" num(1)
.xx "" "atof, atoi, atol: convert ASCII to" "numbers." "" atof(3)
.xx "" "intro: introduction to system calls and error" "numbers." "" intro(2)
.xx "" "number: convert Arabic" "numerals to English." "" number(6)
.xx "" "idate, itime: return date or time in" "numerical form." "" idate(3f)
.xx "" "loc: return the address of an" "object." "" loc(3f)
.xx "" "size: size of an" "object file." "" size(1)
.xx "" "lorder: find ordering relation for an" "object library." "" lorder(1)
.xx "" "what: show what versions of" "object modules were used to construct a file." "" what(1)
.xx "" "strings: find the printable strings in a" "object, or other binary, file." "" strings(1)
.xx "" "index, rindex, lnblnk, len: tell about character" "objects." "" index(3f)
.xx "" "od:" "octal dump." "" od(1)
.xx "" "" "od: octal dump." "" od(1)
.xx "" "acct: turn accounting on or" "off." "" acct(2)
.xx "" "prmail: print out mail in the post" "office." "" prmail(1)
.xx "" "login: sign" "on." "" login(1)
.xx "" "" "onintr: process interrupts in command scripts." "" csh(1)
.xx "" "nohup: run a command at low priority (\fIsh\fR" "only)." "nice," nice(1)
.xx "" "program file including aliases and paths (\fIcsh\fR" "only)." "which: locate a" which(1)
.xx "file." "open:" "open a file for reading or writing, or create a new" "" open(2)
.xx "" "fopen, freopen, fdopen:" "open a stream." "" fopen(3S)
.xx "" "flock: apply or remove an advisory lock on an" "open file." "" flock(2)
.xx "a new file." "" "open: open a file for reading or writing, or create" "" open(2)
.xx "closedir: directory operations." "" "opendir, readdir, telldir, seekdir, rewinddir," "" directory(3)
.xx "" "syslog," "openlog, closelog: control system log." "" syslog(3)
.xx "cont, point, linemod, space, closepl:/" "plot:" "openpl, erase, label, line, circle, arc, move," "" plot(3x)
.xx "" "savecore: save a core dump of the" "operating system." "" savecore(8)
.xx "" "kgmon: generate a dump of the" "operating systems profile buffers." "" kgmon(8)
.xx "" "intro: introduction to system maintenance and" "operation commands." "" intro(8)
.xx "" "tgetstr, tgoto, tputs: terminal independent" "operation routines." "tgetent, tgetnum, tgetflag," termcap(3x)
.xx "" "bcopy, bcmp, bzero: byte string" "operations." "" bstring(3)
.xx "" "telldir, seekdir, rewinddir, closedir: directory" "operations." "opendir, readdir," directory(3)
.xx "" "strcpy, strncpy, strlen, index, rindex: string" "operations." "strcat, strncat, strcmp, strncmp," string(3)
.xx "" "join: relational database" "operator." "" join(1)
.xx "" "curses: screen functions with" "``optimal'' cursor motion." "" curses(3x)
.xx "" "stty: set terminal" "options." "" stty(1)
.xx "" "getdopt, setdopt: get/set" "options associated with a descriptor ." "" getdopt(2)
.xx "" "getsockopt, setsockopt: get and set" "options on sockets." "" getsockopt(2)
.xx "" "/bit: bit set, clear, test routines .sp 1 and," "or, xor, not \- bitwise functions .sp 1 rshift,/" "" bit(3f)
.xx "" "ntohs: convert values between host and network byte" "order." "htonl, htons, ntohl," byteorder(3n)
.xx "" "lastcomm: show last commands executed in reverse" "order." "" lastcomm(1)
.xx "" "lorder: find" "ordering relation for an object library." "" lorder(1)
.xx "" "bessel functions: of two kinds for integer" "orders." "" bessel(3f)
.xx "" "vi: screen" "oriented (visual) display editor based on ex." "" vi(1)
.xx "" "a.out: assembler and link editor" "output." "" a.out(5)
.xx "" "ecvt, fcvt, gcvt:" "output conversion." "" ecvt(3)
.xx "" "printf, fprintf, sprintf: formatted" "output conversion." "" printf(3S)
.xx "" "fold: fold long lines for finite width" "output device." "" fold(1)
.xx "" "colcrt: filter nroff" "output for CRT previewing." "" colcrt(1)
.xx "" "flush: flush" "output to a logical unit." "" flush(3f)
.xx "" "foreach: loop" "over list of names." "" csh(1)
.xx "" "sendmail: send mail" "over the internet." "" sendmail(8)
.xx "" "netmail: read mail on a remote machine" "over the network." "" netmail(1)
.xx "" "nettroff: troff to the phototypesetter" "over the network." "" nettroff(1)
.xx "" "trapov: trap and repair floating point" "overflow." "" trapov(3f)
.xx "" "exec:" "overlay shell with specified command." "" csh(1)
.xx "" "chown: change" "owner." "" chown(8)
.xx "" "chown: change" "owner and group of a file." "" chown(2)
.xx "" "quot: summarize file system" "ownership." "" quot(8)
.xx "" "" "pac: printer/ploter accounting information." "" pac(8)
.xx "" "stdio: standard buffered input/output" "package." "" intro(3S)
.xx "" "stdio: standard buffered input/output" "package." "" stdio(3S)
.xx "" "format: how to format disk" "packs." "" format(8)
.xx "" "more," "page: file perusal filter for crt viewing." "" more(1)
.xx "" "getpagesize: get system" "page size." "" getpagesize(2)
.xx "" "miscellaneous: Miscellaneous useful information" "pages." "" intro(7)
.xx "" "mincore: find out about core resident" "pages." "" mincore(2)
.xx "" "map: map" "pages of memory." "" mmap(2)
.xx "" "mremap: remap" "pages of memory." "" mremap(2)
.xx "" "munmap: unmap" "pages of memory." "" munmap(2)
.xx "" "tk:" "paginator for the Tektronix 4014." "" tk(1)
.xx "" "swapon: specify additional device for" "paging and swapping." "" swapon(8)
.xx "" "drum:" "paging device." "" drum(4)
.xx "" "madvise: give advice to the" "paging system." "" madvise(2)
.xx "" "swapoff: add/delete a swap device for interleaved" "paging/swapping." "swapon," swapon(2)
.xx "" "vswapon: add a swap device for interleaved" "paging/swapping." "" vswapon(2)
.xx "" "socketpair: create a" "pair of connected sockets." "" socketpair(2)
.xx "" "me: macros for formatting" "papers." "" me(7)
.xx "" "diskpart: calculate default disk" "partition sizes." "" diskpart(8)
.xx "" "pc:" "Pascal compiler." "" pc(1)
.xx "" "pxref:" "Pascal cross-reference program." "" pxref(1)
.xx "" "pdx -" "pascal debugger." "" pdx(1)
.xx "" "pxp:" "Pascal execution profiler." "" pxp(1)
.xx "" "pmerge:" "pascal file merger." "" pmerge(1)
.xx "" "px:" "Pascal interpreter." "" px(1)
.xx "" "pix:" "Pascal interpreter and executor." "" pix(1)
.xx "" "pi:" "Pascal interpreter code translator." "" pi(1)
.xx "" "" "passwd: change login password." "" passwd(1)
.xx "" "" "passwd: password file." "" passwd(5)
.xx "" "getpass: read a" "password." "" getpass(3)
.xx "" "passwd: change login" "password." "" passwd(1)
.xx "" "passwd:" "password file." "" passwd(5)
.xx "" "getpwuid, getpwnam, setpwent, endpwent: get" "password file entry." "getpwent," getpwent(3)
.xx "" "vipw: edit the" "password file with vi." "" vipw(8)
.xx "" "netlogin: provide login name and" "password for a remote machine." "" netlogin(1)
.xx "" "getwd: get current working directory" "pathname." "" getwd(3)
.xx "" "which: locate a program file including aliases and" "paths (\fIcsh\fR only)." "" which(1)
.xx "" "grep, egrep, fgrep: search a file for a" "pattern." "" grep(1)
.xx "" "awk:" "pattern scanning and processing language." "" awk(1)
.xx "" "" "pause: stop until signal." "" pause(2)
.xx "" "" "pc: Pascal compiler." "" pc(1)
.xx "" "popen," "pclose: initiate I/O to/from a process." "" popen(3S)
.xx "" "" "pdx - pascal debugger." "" pdx(1)
.xx "" "mesg:" "permit or deny messages." "" mesg(1)
.xx "" "ptx:" "permuted index." "" ptx(1)
.xx "" "limit: alter" "per-process resource limitations." "" csh(1)
.xx "" "" "perror, gerror, ierrno: get system error messages." "" perror(3f)
.xx "messages." "" "perror, sys_errlist, sys_nerr: system error" "" perror(3)
.xx "" "sticky: executable files with" "persistent text." "" sticky(8)
.xx "" "more, page: file" "perusal filter for crt viewing." "" more(1)
.xx "" "phones: remote host" "phone number data base .ad." "" phones(5)
.xx "" "" "phones: remote host phone number data base .ad." "" phones(5)
.xx "" "ct:" "phototypesetter interface." "" ct(4v)
.xx "" "pti:" "phototypesetter interpreter." "" pti(1)
.xx "" "nettroff: troff to the" "phototypesetter over the network." "" nettroff(1)
.xx "" "tc:" "photypesetter simulator." "" tc(1)
.xx "" "" "pi: Pascal interpreter code translator." "" pi(1)
.xx "" "ps: Evans and Sutherland" "Picture System 2 graphics device interface." "" ps(4v)
.xx "" "split: split a file into" "pieces." "" split(1)
.xx "" "" "pipe: create an interprocess communication channel." "" pipe(2)
.xx "" "tee:" "pipe fitting." "" tee(1)
.xx "" "" "pix: Pascal interpreter and executor." "" pix(1)
.xx "" "bg:" "place job in background." "" csh(1)
.xx "" "fish:" "play ``Go Fish''." "" fish(6)
.xx "" "mille:" "play Mille Bournes." "" mille(6)
.xx "" "boggle:" "play the game of boggle." "" boggle(6)
.xx "" "worm:" "Play the growing worm game." "" worm(6)
.xx "" "" "plot: graphics filters." "" plot(1G)
.xx "" "" "plot: graphics interface." "" plot(5)
.xx "move, cont, point, linemod, space, closepl:/" "" "plot: openpl, erase, label, line, circle, arc," "" plot(3x)
.xx "" "vtroff: troff to a raster" "plotter." "" vtroff(1)
.xx "" "" "pmerge: pascal file merger." "" pmerge(1)
.xx "" "/erase, label, line, circle, arc, move, cont," "point, linemod, space, closepl: graphics interface." "" plot(3x)
.xx "" "trapov: trap and repair floating" "point overflow." "" trapov(3f)
.xx "" "lseek: move read/write" "pointer." "" lseek(2)
.xx "" "dmc: DEC DMC-11/DMR-11" "point-to-point communications device." "" dmc(4v)
.xx "" "popd:" "pop shell directory stack." "" csh(1)
.xx "" "" "popd: pop shell directory stack." "" csh(1)
.xx "" "" "popen, pclose: initiate I/O to/from a process." "" popen(3S)
.xx "" "ttynam, isatty: find name of a terminal" "port." "" ttynam(3f)
.xx "" "ttytype: data base of terminal types by" "port." "" ttytype(5)
.xx "" "prmail: print out mail in the" "post office." "" prmail(1)
.xx "" "analyze: Virtual UNIX" "postmortem crash analyzer." "" analyze(8)
.xx "" "mkproto: construct a" "pototype file system." "" mkproto(8)
.xx "root." "exp, log, log10," "pow, sqrt: exponential, logarithm, power, square" "" exp(3M)
.xx "" "exp, log, log10, pow, sqrt: exponential, logarithm," "power, square root." "" exp(3M)
.xx "" "" "pr: print file." "" pr(1)
.xx "" "print:" "pr to the line printer." "" print(1)
.xx "" "kill: terminate a process with extreme" "prejudice." "" kill(1)
.xx "" "monitor, monstartup:" "prepare execution profile." "" monitor(3)
.xx "" "colcrt: filter nroff output for CRT" "previewing." "" colcrt(1)
.xx "" "types:" "primitive system data types." "" types(5)
.xx "" "cat: catenate and" "print." "" cat(1)
.xx "" "lpr: off line" "print." "" lpr(1)
.xx "" "fortune:" "print a random, hopefully interesting, adage." "" fortune(6)
.xx "" "date:" "print and set the date." "" date(1)
.xx "" "cal:" "print calendar." "" cal(1)
.xx "" "hashstat:" "print command hashing statistics." "" csh(1)
.xx "" "netq:" "print contents of network queue." "" netq(1)
.xx "" "jobs:" "print current job list." "" csh(1)
.xx "" "whoami:" "print effective current user id." "" whoami(1)
.xx "" "pr:" "print file." "" pr(1)
.xx "" "history:" "print history event list." "" csh(1)
.xx "" "banner:" "print large banner on printer." "" banner(6)
.xx "" "nm:" "print name list." "" nm(1)
.xx "" "hostname: set or" "print name of current host system." "" hostname(1)
.xx "" "vfontinfo: inspect and" "print out information about UNIX fonts." "" vfontinfo(1)
.xx "" "prmail:" "print out mail in the post office." "" prmail(1)
.xx "" "printenv:" "print out the environment." "" printenv(1)
.xx "" "man: find manual information by keywords;" "print out the manual." "" man(1)
.xx "" "" "print: pr to the line printer." "" print(1)
.xx "" "pstat:" "print system facts." "" pstat(8)
.xx "" "netlog:" "print the last few lines of the network log file." "" netlog(1)
.xx "" "diction,explain:" "print wordy sentences; thesaurus for diction." "" diction(1)
.xx "" "diction,explain:" "print wordy sentences; thesaurus for diction." "" explain(1)
.xx "file." "strings: find the" "printable strings in a object, or other binary," "" strings(1)
.xx "" "" "printcap: printer capability data base." "" printcap(5)
.xx "" "vlp \(em Format Lisp programs to be" "printed with nroff, vtroff, or troff." "" vlp(1)
.xx "" "" "printenv: print out the environment." "" printenv(1)
.xx "" "banner: print large banner on" "printer." "" banner(6)
.xx "" "lp: line" "printer." "" lp(4v)
.xx "" "print: pr to the line" "printer." "" print(1)
.xx "" "printcap:" "printer capability data base." "" printcap(5)
.xx "time." "lpd, lpdrestart: line" "printer daemon, restart downed daemons at reboot" "" lpd(8)
.xx "" "lprm: remove jobs from the line" "printer spooling queue." "" lprm(1)
.xx "" "pac:" "printer/ploter accounting information." "" pac(8)
.xx "" "vpr, vprm, vpq, vprint: raster" "printer/plotter spooler." "" vpr(1)
.xx "conversion." "" "printf, fprintf, sprintf: formatted output" "" printf(3S)
.xx "" "setpriority: get/set program scheduling" "priority." "getpriority," getpriority(2)
.xx "" "nice, nohup: run a command at low" "priority (\fIsh\fR only)." "" nice(1)
.xx "" "renice: alter" "priority of running process by changing nice." "" renice(8)
.xx "" "nice: run low" "priority process." "" csh(1)
.xx "" "" "prmail: print out mail in the post office." "" prmail(1)
.xx "" "adduser:" "procedure for adding new users." "" adduser(8)
.xx "" "reboot: UNIX bootstrapping" "procedures." "" reboot(8)
.xx "" "nice: run low priority" "process." "" csh(1)
.xx "" "stop: halt a job or" "process." "" csh(1)
.xx "" "_exit: terminate a" "process." "" exit(2)
.xx "" "fork: create a new" "process." "" fork(2)
.xx "" "fork: create a copy of this" "process." "" fork(3f)
.xx "" "implogd: IMP logger" "process." "" implogd(8)
.xx "" "kill: send signal to a" "process." "" kill(2)
.xx "" "kill: send a signal to a" "process." "" kill(3f)
.xx "" "popen, pclose: initiate I/O to/from a" "process." "" popen(3S)
.xx "" "wait: await completion of" "process." "" wait(1)
.xx "" "renice: alter priority of running" "process by changing nice." "" renice(8)
.xx "" "init:" "process control initialization." "" init(8)
.xx "" "getpgrp: get" "process group." "" getpgrp(2)
.xx "" "killpg: send signal to a" "process group." "" killpg(2)
.xx "" "setpgrp: set" "process group." "" setpgrp(2)
.xx "" "getpid: get" "process id." "" getpid(3f)
.xx "" "getpid: get" "process identification." "" getpid(2)
.xx "" "vfork: spawn new" "process in a virtual memory efficient way." "" vfork(2)
.xx "" "onintr:" "process interrupts in command scripts." "" csh(1)
.xx "" "ps:" "process status." "" ps(1)
.xx "" "wait: wait for" "process to terminate." "" wait(2)
.xx "" "wait3: wait for" "process to terminate." "" wait3(2)
.xx "" "wait: wait for a" "process to terminate." "" wait(3f)
.xx "" "ptrace:" "process trace." "" ptrace(2)
.xx "" "kill: terminate a" "process with extreme prejudice." "" kill(1)
.xx "" "exit: terminate" "process with status." "" exit(3f)
.xx "" "kill: kill jobs and" "processes." "" csh(1)
.xx "" "gcore: get core images of running" "processes." "" gcore(1)
.xx "" "wait: wait for background" "processes to complete." "" csh(1)
.xx "" "awk: pattern scanning and" "processing language." "" awk(1)
.xx "" "halt: stop the" "processor." "" halt(8)
.xx "" "m4: macro" "processor." "" m4(1)
.xx "" "reboot: reboot system or halt" "processor." "" reboot(2)
.xx "" "" "prof: display profile data." "" prof(1)
.xx "" "" "profil: execution time profile." "" profil(2)
.xx "" "monitor, monstartup: prepare execution" "profile." "" monitor(3)
.xx "" "profil: execution time" "profile." "" profil(2)
.xx "" "kgmon: generate a dump of the operating systems" "profile buffers." "" kgmon(8)
.xx "" "gprof: display call graph" "profile data." "" gprof(1)
.xx "" "prof: display" "profile data." "" prof(1)
.xx "" "pxp: Pascal execution" "profiler." "" pxp(1)
.xx "" "end, etext, edata: last locations in" "program." "" end(3)
.xx "" "finger: user information lookup" "program." "" finger(1)
.xx "" "ftp: file transfer" "program." "" ftp(1C)
.xx "" "liszt: compile a Franz Lisp" "program." "" liszt(1)
.xx "" "lpq: spool queue examination" "program." "" lpq(1)
.xx "" "lxref: lisp cross reference" "program." "" lxref(1)
.xx "" "msgs: system messages and junk mail" "program." "" msgs(1)
.xx "" "mt: magnetic tape manipulating" "program." "" mt(1)
.xx "" "netstat: network statistics" "program." "" netstat(1)
.xx "" "pxref: Pascal cross-reference" "program." "" pxref(1)
.xx "" "units: conversion" "program." "" units(1)
.xx "" "whereis: locate source, binary, and or manual for" "program." "" whereis(1)
.xx "" "cb: C" "program beautifier." "" cb(1)
.xx "only)." "which: locate a" "program file including aliases and paths (\fIcsh\fR" "" which(1)
.xx "" "make: maintain" "program groups." "" make(1)
.xx "" "getpriority, setpriority: get/set" "program scheduling priority." "" getpriority(2)
.xx "" "indent: indent and format a C" "program source." "" indent(1)
.xx "" "assert:" "program verification." "" assert(3x)
.xx "" "lint: a C" "program verifier." "" lint(1)
.xx "" "fp: Functional" "Programming language compiler/interpreter." "" fp(1)
.xx "" "lex: generator of lexical analysis" "programs." "" lex(1)
.xx "" "struct: structure Fortran" "programs." "" struct(1)
.xx "" "vgrind: grind nice listings of" "programs." "" vgrind(1)
.xx "troff." "vlp \(em Format Lisp" "programs to be printed with nroff, vtroff, or" "" vlp(1)
.xx "" "xstr: extract strings from C" "programs to implement shared strings." "" xstr(1)
.xx "" "vv: Proteon" "proNET 10 Megabit ring." "" vv(4v)
.xx "" "mprotect: change memory" "protection." "" mprotect(2)
.xx "" "vv:" "Proteon proNET 10 Megabit ring." "" vv(4v)
.xx "" "ip: Internet" "Protocol." "" ip(4p)
.xx "" "tcp: Internet Transmission Control" "Protocol." "" tcp(4p)
.xx "" "telnet: user interface to the TELNET" "protocol." "" telnet(1C)
.xx "" "udp: Internet User Datagram" "Protocol." "" udp(4p)
.xx "" "getprotobyname, setprotoent, endprotoent: get" "protocol entry." "getprotoent, getprotobynumber," getprotoent(3n)
.xx "" "getservbyname, setservent, endservent: get" "protocol entry." "getservent, getservbyport," getservent(3n)
.xx "" "inet: Internet" "protocol family." "" inet(4f)
.xx "" "pup: Xerox PUP-I" "protocol family." "" pup(4f)
.xx "" "rmt: remote magtape" "protocol module." "" rmt(8)
.xx "" "protocols:" "protocol name data base." "" protocols(5)
.xx "" "ftpd: DARPA Internet File Transfer" "Protocol server." "" ftpd(8)
.xx "" "telnetd: DARPA TELNET" "protocol server." "" telnetd(8)
.xx "" "tftp: DARPA Trivial File Transfer" "Protocol server." "" tftpd(8)
.xx "" "trpt: transliterate" "protocol trace." "" trpt(8)
.xx "" "" "protocols: protocol name data base." "" protocols(5)
.xx "" "arithmetic:" "provide drill in number facts." "" arithmetic(6)
.xx "machine." "netlogin:" "provide login name and password for a remote" "" netlogin(1)
.xx "" "true, false:" "provide truth values." "" false(1)
.xx "" "true, false:" "provide truth values." "" true(1)
.xx "device interface." "" "ps: Evans and Sutherland Picture System 2 graphics" "" ps(4v)
.xx "" "" "ps: process status." "" ps(1)
.xx "" "pty:" "pseudo terminal driver." "" pty(4)
.xx "" "" "psignal, sys_siglist: system signal messages." "" psignal(3)
.xx "" "" "pstat: print system facts." "" pstat(8)
.xx "" "doctor: interact with a" "psychoanalyst." "" doctor(6)
.xx "" "" "pti: phototypesetter interpreter." "" pti(1)
.xx "" "" "ptrace: process trace." "" ptrace(2)
.xx "" "" "ptx: permuted index." "" ptx(1)
.xx "" "" "pty: pseudo terminal driver." "" pty(4)
.xx "" "" "pup: raw PUP socket interface." "" pup(4p)
.xx "" "pup: raw" "PUP socket interface." "" pup(4p)
.xx "" "" "pup: Xerox PUP-I protocol family." "" pup(4f)
.xx "" "pup: Xerox" "PUP-I protocol family." "" pup(4f)
.xx "" "ungetc:" "push character back into input stream." "" ungetc(3S)
.xx "" "pushd:" "push shell directory stack." "" csh(1)
.xx "" "" "pushd: push shell directory stack." "" csh(1)
.xx "" "puts, fputs:" "put a string on a stream." "" puts(3S)
.xx "" "putc, putchar, fputc, putw:" "put character or word on a stream." "" putc(3S)
.xx "unit." "" "putc, fputc: write a character to a fortran logical" "" putc(3f)
.xx "on a stream." "" "putc, putchar, fputc, putw: put character or word" "" putc(3S)
.xx "stream." "putc," "putchar, fputc, putw: put character or word on a" "" putc(3S)
.xx "" "" "puts, fputs: put a string on a stream." "" puts(3S)
.xx "" "putc, putchar, fputc," "putw: put character or word on a stream." "" putc(3S)
.xx "" "" "pwd: working directory name." "" pwd(1)
.xx "" "" "px: Pascal interpreter." "" px(1)
.xx "" "" "pxp: Pascal execution profiler." "" pxp(1)
.xx "" "" "pxref: Pascal cross-reference program." "" pxref(1)
.xx "" "" "qsort: quick sort." "" qsort(3f)
.xx "" "" "qsort: quicker sort." "" qsort(3)
.xx "" "lprm: remove jobs from the line printer spooling" "queue." "" lprm(1)
.xx "" "netq: print contents of network" "queue." "" netq(1)
.xx "" "netrm: remove a command from the network" "queue." "" netrm(1)
.xx "" "lpq: spool" "queue examination program." "" lpq(1)
.xx "" "qsort:" "quick sort." "" qsort(3f)
.xx "" "qsort:" "quicker sort." "" qsort(3)
.xx "" "" "quiz: test your knowledge." "" quiz(6)
.xx "" "" "quot: summarize file system ownership." "" quot(8)
.xx "" "" "rain: animated raindrops display." "" rain(6)
.xx "" "rain: animated" "raindrops display." "" rain(6)
.xx "" "" "rand, drand, irand: return random values." "" rand(3f)
.xx "" "" "rand, srand: random number generator." "" rand(3)
.xx "" "fortune: print a" "random, hopefully interesting, adage." "" fortune(6)
.xx "" "ranlib: convert archives to" "random libraries." "" ranlib(1)
.xx "" "rand, srand:" "random number generator." "" rand(3)
.xx "routines for changing/" "random, srandom: better" "random number generator .br initstate, setstate \-" "" random(3)
.xx "initstate, setstate \- routines for changing/" "" "random, srandom: better random number generator .br" "" random(3)
.xx "" "rand, drand, irand: return" "random values." "" rand(3f)
.xx "" "" "ranlib: convert archives to random libraries." "" ranlib(1)
.xx "" "vtroff: troff to a" "raster plotter." "" vtroff(1)
.xx "" "vpr, vprm, vpq, vprint:" "raster printer/plotter spooler." "" vpr(1)
.xx "" "" "ratfor: rational Fortran dialect." "" ratfor(1)
.xx "" "ratfor:" "rational Fortran dialect." "" ratfor(1)
.xx "" "pup:" "raw PUP socket interface." "" pup(4p)
.xx "" "imp: IMP" "raw socket interface." "" imp(4p)
.xx "" "" "rc: command script for auto-reboot and daemons." "" rc(8)
.xx "stream to a remote command." "" "rcmd, rresvport, ruserok: routines for returning a" "" rcmd(3x)
.xx "" "" "rcp: remote file copy." "" rcp(1C)
.xx "" "" "rdump: file system dump across the network." "" rdump(8)
.xx "" "getpass:" "read a password." "" getpass(3)
.xx "" "source:" "read commands from file." "" csh(1)
.xx "" "read, readv:" "read input." "" read(2)
.xx "" "netmail:" "read mail on a remote machine over the network." "" netmail(1)
.xx "wait:/" "/cd, eval, exec, exit, export, login, newgrp," "read, readonly, set, shift, times, trap, umask," "" sh(1)
.xx "" "" "read, readv: read input." "" read(2)
.xx "" "readlink:" "read value of a symbolic link." "" readlink(2)
.xx "directory operations." "opendir," "readdir, telldir, seekdir, rewinddir, closedir:" "" directory(3)
.xx "" "open: open a file for" "reading or writing, or create a new file." "" open(2)
.xx "" "" "readlink: read value of a symbolic link." "" readlink(2)
.xx "" "/cd, eval, exec, exit, export, login, newgrp, read," "readonly, set, shift, times, trap, umask, wait:/" "" sh(1)
.xx "" "read," "readv: read input." "" read(2)
.xx "" "bad144:" "read/write dec standard 144 bad sector information." "" bad144(8)
.xx "" "lseek: move" "read/write pointer." "" lseek(2)
.xx "" "setregid: set" "real and effective group ID." "" setregid(2)
.xx "" "setreuid: set" "real and effective user ID's." "" setreuid(2)
.xx "" "malloc, free," "realloc, calloc: main memory allocator." "" malloc(3)
.xx "" "symorder:" "rearrange name list." "" symorder(1)
.xx "" "" "reboot: reboot system or halt processor." "" reboot(2)
.xx "" "reboot:" "reboot system or halt processor." "" reboot(2)
.xx "" "fastboot:" "reboot the system without checking the disks." "" fastboot(8)
.xx "" "line printer daemon, restart downed daemons at" "reboot time." "lpd, lpdrestart:" lpd(8)
.xx "" "" "reboot: UNIX bootstrapping procedures." "" reboot(8)
.xx "" "newaliases:" "rebuild the data base for the mail aliases file." "" newaliases(1)
.xx "" "recv, recvfrom, recvmsg:" "receive a message from a socket." "" recv(2)
.xx "" "mail: send and" "receive mail." "" mail(1)
.xx "" "binmail: send or" "receive mail among users." "" binmail(1)
.xx "" "" "re_comp, re_exec: regular expression handler." "" regex(3)
.xx "" "rehash:" "recompute command hash table." "" csh(1)
.xx "" "utmp, wtmp: login" "records." "" utmp(5)
.xx "" "eyacc: modified yacc allowing much improved error" "recovery." "" eyacc(1)
.xx "socket." "" "recv, recvfrom, recvmsg: receive a message from a" "" recv(2)
.xx "" "recv," "recvfrom, recvmsg: receive a message from a socket." "" recv(2)
.xx "" "recv, recvfrom," "recvmsg: receive a message from a socket." "" recv(2)
.xx "" "eval:" "re-evaluate shell data." "" csh(1)
.xx "" "re_comp," "re_exec: regular expression handler." "" regex(3)
.xx "documents." "" "refer: find and insert literature references in" "" refer(1)
.xx "" "lxref: lisp cross" "reference program." "" lxref(1)
.xx "" "lookbib\- find literature" "references in documents." "" lookbib(1)
.xx "" "refer: find and insert literature" "references in documents." "" refer(1)
.xx "" "re_comp, re_exec:" "regular expression handler." "" regex(3)
.xx "" "" "rehash: recompute command hash table." "" csh(1)
.xx "" "comm: select or" "reject lines common to two sorted files." "" comm(1)
.xx "" "lorder: find ordering" "relation for an object library." "" lorder(1)
.xx "" "join:" "relational database operator." "" join(1)
.xx "" "strip: remove symbols and" "relocation bits." "" strip(1)
.xx "" "mremap:" "remap pages of memory." "" mremap(2)
.xx "" "leave:" "remind you when you have to leave." "" leave(1)
.xx "" "calendar:" "reminder service." "" calendar(1)
.xx "" "" "remote - remote host description file for tip .ad." "" remote(5)
.xx "" "ruserok: routines for returning a stream to a" "remote command." "rcmd, rresvport," rcmd(3x)
.xx "" "rexec: return stream to a" "remote command." "" rexec(3x)
.xx "" "netcp:" "remote copy of files through the net." "" netcp(1)
.xx "" "rexecd:" "remote execution server." "" rexecd(8)
.xx "" "rcp:" "remote file copy." "" rcp(1C)
.xx "" "uusend: send a file to a" "remote host." "" uusend(1C)
.xx "" "remote -" "remote host description file for tip .ad." "" remote(5)
.xx "" "phones:" "remote host phone number data base .ad." "" phones(5)
.xx "" "netlpr: use a" "remote lineprinter through the net." "" netlpr(1)
.xx "" "rlogin:" "remote login." "" rlogin(1C)
.xx "" "rlogind:" "remote login server." "" rlogind(8)
.xx "" "net: execute a command on a" "remote machine." "" net(1)
.xx "" "netlogin: provide login name and password for a" "remote machine." "" netlogin(1)
.xx "" "netmail: read mail on a" "remote machine over the network." "" netmail(1)
.xx "" "rmt:" "remote magtape protocol module." "" rmt(8)
.xx "" "rsh:" "remote shell." "" rsh(1C)
.xx "" "rshd:" "remote shell server." "" rshd(8)
.xx "" "tip: connect to a" "remote system." "" tip(1C)
.xx "" "netrm:" "remove a command from the network queue." "" netrm(1)
.xx "" "unlink:" "remove a directory entry." "" unlink(3f)
.xx "" "rmdir:" "remove a directory file." "" rmdir(2)
.xx "" "unalias:" "remove aliases." "" csh(1)
.xx "" "flock: apply or" "remove an advisory lock on an open file." "" flock(2)
.xx "" "colrm:" "remove columns from a file." "" colrm(1)
.xx "" "unlink:" "remove directory entry." "" unlink(2)
.xx "" "unsetenv:" "remove environment variables." "" csh(1)
.xx "" "mount, unmount: mount or" "remove file system." "" mount(2)
.xx "" "lprm:" "remove jobs from the line printer spooling queue." "" lprm(1)
.xx "" "deroff:" "remove nroff, troff, tbl and eqn constructs." "" deroff(1)
.xx "" "unlimit:" "remove resource limitiations." "" csh(1)
.xx "" "strip:" "remove symbols and relocation bits." "" strip(1)
.xx "" "rmdir, rm:" "remove (unlink) directories or files." "" rmdir(1)
.xx "" "rm, rmdir:" "remove (unlink) files or directories." "" rm(1)
.xx "" "" "rename: change the name of a file." "" rename(2)
.xx "" "mv: move or" "rename files." "" mv(1)
.xx "changing nice." "" "renice: alter priority of running process by" "" renice(8)
.xx "" "fsck: file system consistency check and interactive" "repair." "" fsck(8)
.xx "" "trapov: trap and" "repair floating point overflow." "" trapov(3f)
.xx "" "while:" "repeat commands conditionally." "" csh(1)
.xx "" "" "repeat: execute command repeatedly." "" csh(1)
.xx "" "uniq: report" "repeated lines in a file." "" uniq(1)
.xx "" "repeat: execute command" "repeatedly." "" csh(1)
.xx "" "yes: be" "repetitively affirmative." "" yes(1)
.xx "" "iostat:" "report I/O statistics." "" iostat(1)
.xx "" "uniq:" "report repeated lines in a file." "" uniq(1)
.xx "" "vmstat:" "report virtual memory statistics." "" vmstat(1)
.xx "" "fseek, ftell:" "reposition a file on a logical unit." "" fseek(3f)
.xx "" "fseek, ftell, rewind:" "reposition a stream." "" fseek(3S)
.xx "" "notify:" "request immediate notification." "" csh(1)
.xx "" "lock:" "reserve a terminal." "" lock(1)
.xx "" "" "reset: reset the teletype bits to a sensible state." "" reset(1)
.xx "" "reset:" "reset the teletype bits to a sensible state." "" reset(1)
.xx "" "mincore: find out about core" "resident pages." "" mincore(2)
.xx "" "getrlimit, setrlimit: control maximum system" "resource consumption." "" getrlimit(2)
.xx "" "limit: alter per-process" "resource limitations." "" csh(1)
.xx "" "unlimit: remove" "resource limitiations." "" csh(1)
.xx "" "getrusage: get information about" "resource utilization." "" getrusage(2)
.xx "" "lpd, lpdrestart: line printer daemon," "restart downed daemons at reboot time." "" lpd(8)
.xx "" "" "restor: incremental file system restore." "" restor(8)
.xx "" "restor: incremental file system" "restore." "" restor(8)
.xx "" "suspend: suspend a shell," "resuming its superior." "" csh(1)
.xx "" "fdate:" "return date and time in an ASCII string." "" fdate(3f)
.xx "" "idate, itime:" "return date or time in numerical form." "" idate(3f)
.xx "" "etime, dtime:" "return elapsed execution time." "" etime(3f)
.xx "" "flmin, flmax, dflmin, dflmax, inmax:" "return extreme values." "" range(3f)
.xx "" "rand, drand, irand:" "return random values." "" rand(3f)
.xx "" "rexec:" "return stream to a remote command." "" rexec(3x)
.xx "" "time, ctime, ltime, gmtime:" "return system time." "" time(3f)
.xx "" "loc:" "return the address of an object." "" loc(3f)
.xx "" "rcmd, rresvport, ruserok: routines for" "returning a stream to a remote command." "" rcmd(3x)
.xx "" "" "rev: reverse lines of a file." "" rev(1)
.xx "" "col: filter" "reverse line feeds." "" col(1)
.xx "" "rev:" "reverse lines of a file." "" rev(1)
.xx "" "lastcomm: show last commands executed in" "reverse order." "" lastcomm(1)
.xx "" "fseek, ftell," "rewind: reposition a stream." "" fseek(3S)
.xx "" "opendir, readdir, telldir, seekdir," "rewinddir, closedir: directory operations." "" directory(3)
.xx "" "" "rexec: return stream to a remote command." "" rexec(3x)
.xx "" "" "rexecd: remote execution server." "" rexecd(8)
.xx "" "index," "rindex, lnblnk, len: tell about character objects." "" index(3f)
.xx "" "strcmp, strncmp, strcpy, strncpy, strlen, index," "rindex: string operations." "strcat, strncat," string(3)
.xx "" "vv: Proteon proNET 10 Megabit" "ring." "" vv(4v)
.xx "" "hk: RK6-11/RK06 and" "RK07 moving head disk." "" hk(4v)
.xx "" "hk:" "RK6-11/RK06 and RK07 moving head disk." "" hk(4v)
.xx "" "" "rlogin: remote login." "" rlogin(1C)
.xx "" "" "rlogind: remote login server." "" rlogind(8)
.xx "" "rmdir," "rm: remove (unlink) directories or files." "" rmdir(1)
.xx "" "" "rm, rmdir: remove (unlink) files or directories." "" rm(1)
.xx "" "" "rmdir: remove a directory file." "" rmdir(2)
.xx "" "rm," "rmdir: remove (unlink) files or directories." "" rm(1)
.xx "" "" "rmdir, rm: remove (unlink) directories or files." "" rmdir(1)
.xx "" "" "rmt: remote magtape protocol module." "" rmt(8)
.xx "" "chase: Try to escape to killer" "robots." "" chase(6)
.xx "" "" "rogue: Exploring The Dungeons of Doom." "" rogue(6)
.xx "" "pow, sqrt: exponential, logarithm, power, square" "root." "exp, log, log10," exp(3M)
.xx "" "chroot: change" "root directory." "" chroot(2)
.xx "" "" "route: manually manipulate the routing tables." "" route(8)
.xx "" "" "routed: network routing daemon." "" routed(8)
.xx "" "inet_netof: Internet address manipulation" "routines." "/inet_network, inet_makeaddr, inet_lnaof," inet(3n)
.xx "" "tgoto, tputs: terminal independent operation" "routines." "tgetent, tgetnum, tgetflag, tgetstr," termcap(3x)
.xx "" "random number generator .br initstate, setstate \-" "routines for changing generators." "/srandom: better" random(3)
.xx "command." "rcmd, rresvport, ruserok:" "routines for returning a stream to a remote" "" rcmd(3x)
.xx "" "bis, bic, setbit, bit: bit set, clear, test" "routines .sp 1 and, or, xor, not \- bitwise/" "" bit(3f)
.xx "" "routed: network" "routing daemon." "" routed(8)
.xx "" "route: manually manipulate the" "routing tables." "" route(8)
.xx "" "" "rrestor: file system dump across the network." "" rrestor(8)
.xx "to a remote command." "rcmd," "rresvport, ruserok: routines for returning a stream" "" rcmd(3x)
.xx "" "" "rsh: remote shell." "" rsh(1C)
.xx "" "" "rshd: remote shell server." "" rshd(8)
.xx "" ".sp 1 and, or, xor, not \- bitwise functions .sp 1" "rshift, lshift \- bit shifting functions." "/routines" bit(3f)
.xx "" "nice, nohup:" "run a command at low priority (\fIsh\fR only)." "" nice(1)
.xx "" "nohup:" "run command immune to hangups." "" csh(1)
.xx "" "nice:" "run low priority process." "" csh(1)
.xx "" "renice: alter priority of" "running process by changing nice." "" renice(8)
.xx "" "gcore: get core images of" "running processes." "" gcore(1)
.xx "" "" "ruptime: show host status of local machines." "" ruptime(1)
.xx "remote command." "rcmd, rresvport," "ruserok: routines for returning a stream to a" "" rcmd(3x)
.xx "" "" "rwho: who's logged in on local machines." "" rwho(1)
.xx "" "" "rwhod: system status server." "" rwhod(8)
.xx "" "" "rx: DEC RX02 floppy disk interface." "" rx(4v)
.xx "" "rx: DEC" "RX02 floppy disk interface." "" rx(4v)
.xx "" "" "sa, accton: system accounting." "" sa(8)
.xx "" "savecore:" "save a core dump of the operating system." "" savecore(8)
.xx "" "" "savecore: save a core dump of the operating system." "" savecore(8)
.xx "" "brk," "sbrk: change data segment size." "" brk(2)
.xx "" "scandir:" "scan a directory." "" scandir(3)
.xx "" "" "scandir: scan a directory." "" scandir(3)
.xx "" "" "scanf, fscanf, sscanf: formatted input conversion." "" scanf(3S)
.xx "" "awk: pattern" "scanning and processing language." "" awk(1)
.xx "" "getpriority, setpriority: get/set program" "scheduling priority." "" getpriority(2)
.xx "" "clear: clear terminal" "screen." "" clear(1)
.xx "" "curses:" "screen functions with ``optimal'' cursor motion." "" curses(3x)
.xx "ex." "vi:" "screen oriented (visual) display editor based on" "" vi(1)
.xx "" "rc: command" "script for auto-reboot and daemons." "" rc(8)
.xx "" "" "script: make typescript of terminal session." "" script(1)
.xx "" "onintr: process interrupts in command" "scripts." "" csh(1)
.xx "" "grep, egrep, fgrep:" "search a file for a pattern." "" grep(1)
.xx "" "xsend, xget, enroll:" "secret mail." "" xsend(1)
.xx "" "bad144: read/write dec standard 144 bad" "sector information." "" bad144(8)
.xx "" "badsect: create files to contain bad" "sectors." "" badsect(8)
.xx "" "" "sed: stream editor." "" sed(1)
.xx "" "" "see: see what a file has in it." "" see(1)
.xx "" "see:" "see what a file has in it." "" see(1)
.xx "" "opendir, readdir, telldir," "seekdir, rewinddir, closedir: directory operations." "" directory(3)
.xx "" "brk, sbrk: change data" "segment size." "" brk(2)
.xx "" "stk, sstk: change stack" "segment size." "" stk(2)
.xx "" "comm:" "select or reject lines common to two sorted files." "" comm(1)
.xx "" "" "select: synchronous i/o multiplexing." "" select(2)
.xx "" "case:" "selector in switch." "" csh(1)
.xx "" "uusend:" "send a file to a remote host." "" uusend(1C)
.xx "" "send, sendto, sendmsg:" "send a message from a socket." "" send(2)
.xx "" "kill:" "send a signal to a process." "" kill(3f)
.xx "" "mail:" "send and receive mail." "" mail(1)
.xx "" "sendmail:" "send mail over the internet." "" sendmail(8)
.xx "" "binmail:" "send or receive mail among users." "" binmail(1)
.xx "socket." "" "send, sendto, sendmsg: send a message from a" "" send(2)
.xx "" "kill:" "send signal to a process." "" kill(2)
.xx "" "killpg:" "send signal to a process group." "" killpg(2)
.xx "" "aliases: aliases file for" "sendmail." "" aliases(5)
.xx "" "" "sendmail: send mail over the internet." "" sendmail(8)
.xx "" "send, sendto," "sendmsg: send a message from a socket." "" send(2)
.xx "" "send," "sendto, sendmsg: send a message from a socket." "" send(2)
.xx "" "reset: reset the teletype bits to a" "sensible state." "" reset(1)
.xx "" "diction,explain: print wordy" "sentences; thesaurus for diction." "" diction(1)
.xx "" "diction,explain: print wordy" "sentences; thesaurus for diction." "" explain(1)
.xx "" "comsat: biff" "server." "" comsat(8)
.xx "" "ftpd: DARPA Internet File Transfer Protocol" "server." "" ftpd(8)
.xx "" "rexecd: remote execution" "server." "" rexecd(8)
.xx "" "rlogind: remote login" "server." "" rlogind(8)
.xx "" "rshd: remote shell" "server." "" rshd(8)
.xx "" "rwhod: system status" "server." "" rwhod(8)
.xx "" "telnetd: DARPA TELNET protocol" "server." "" telnetd(8)
.xx "" "tftp: DARPA Trivial File Transfer Protocol" "server." "" tftpd(8)
.xx "" "calendar: reminder" "service." "" calendar(1)
.xx "" "" "services: service name data base." "" services(5)
.xx "" "logout: end" "session." "" csh(1)
.xx "" "script: make typescript of terminal" "session." "" script(1)
.xx "" "ascii: map of ASCII character" "set." "" ascii(7)
.xx "" "" "set: change value of shell variable." "" csh(1)
.xx "\- bitwise functions/" "bis, bic, setbit, bit: bit" "set, clear, test routines .sp 1 and, or, xor, not" "" bit(3f)
.xx "" "umask:" "set file creation mode mask." "" umask(2)
.xx "" "utimes:" "set file times." "" utimes(2)
.xx "" "setgroups:" "set group access list." "" setgroups(2)
.xx "" "apply: apply a command to a" "set of arguments." "" apply(1)
.xx "" "getsockopt, setsockopt: get and" "set options on sockets." "" getsockopt(2)
.xx "" "hostname:" "set or print name of current host system." "" hostname(1)
.xx "" "setpgrp:" "set process group." "" setpgrp(2)
.xx "" "setregid:" "set real and effective group ID." "" setregid(2)
.xx "" "setreuid:" "set real and effective user ID's." "" setreuid(2)
.xx "" "/exec, exit, export, login, newgrp, read, readonly," "set, shift, times, trap, umask, wait: command/" "" sh(1)
.xx "" "getty:" "set terminal mode." "" getty(8)
.xx "" "stty:" "set terminal options." "" stty(1)
.xx "" "tabs:" "set terminal tabs." "" tabs(1)
.xx "" "date: print and" "set the date." "" date(1)
.xx "" "setenv:" "set variable in environment." "" csh(1)
.xx "and, or, xor, not \- bitwise functions/" "bis, bic," "setbit, bit: bit set, clear, test routines .sp 1" "" bit(3f)
.xx "a stream." "" "setbuf, setbuffer, setlinebuf: assign buffering to" "" setbuf(3S)
.xx "stream." "setbuf," "setbuffer, setlinebuf: assign buffering to a" "" setbuf(3S)
.xx "descriptor ." "getdopt," "setdopt: get/set options associated with a" "" getdopt(2)
.xx "" "" "setenv: set variable in environment." "" csh(1)
.xx "entry." "getfsent, getfsspec, getfsfile," "setfsent, endfsent: get file system descriptor file" "" getfsent(3)
.xx "" "getgrent, getgrgid, getgrnam," "setgrent, endgrent: get group file entry." "" getgrent(3)
.xx "" "" "setgroups: set group access list." "" setgroups(2)
.xx "" "gethostent, gethostbyaddr, gethostbyname," "sethostent, endhostent: get network host entry." "" gethostent(3n)
.xx "host." "gethostid," "sethostid: get/set unique identifier of current" "" gethostid(2)
.xx "" "gethostname," "sethostname: get/set name of current host." "" gethostname(2)
.xx "" "getitimer," "setitimer: get/set value of interval timer." "" getitimer(2)
.xx "" "" "setjmp, longjmp: non-local goto." "" setjmp(3)
.xx "" "crypt," "setkey, encrypt: DES encryption." "" crypt(3)
.xx "" "setbuf, setbuffer," "setlinebuf: assign buffering to a stream." "" setbuf(3S)
.xx "" "getnetent, getnetbyaddr, getnetbyname," "setnetent, endnetent: get network entry." "" getnetent(3n)
.xx "" "" "setpgrp: set process group." "" setpgrp(2)
.xx "" "getpriority," "setpriority: get/set program scheduling priority." "" getpriority(2)
.xx "" "getprotoent, getprotobynumber, getprotobyname," "setprotoent, endprotoent: get protocol entry." "" getprotoent(3n)
.xx "" "getpwent, getpwuid, getpwnam," "setpwent, endpwent: get password file entry." "" getpwent(3)
.xx "" "" "setregid: set real and effective group ID." "" setregid(2)
.xx "" "" "setreuid: set real and effective user ID's." "" setreuid(2)
.xx "consumption." "getrlimit," "setrlimit: control maximum system resource" "" getrlimit(2)
.xx "" "getservent, getservbyport, getservbyname," "setservent, endservent: get protocol entry." "" getservent(3n)
.xx "" "getsockopt," "setsockopt: get and set options on sockets." "" getsockopt(2)
.xx "" "/better random number generator .br initstate," "setstate \- routines for changing generators." "" random(3)
.xx "" "gettimeofday," "settimeofday: get/set date and time." "" gettimeofday(2)
.xx "continue, cd, eval, exec, exit, export, login,/" "" "sh, for, case, if, while, \fB:\fP, \fB.\fP, break," "" sh(1)
.xx "" "xstr: extract strings from C programs to implement" "shared strings." "" xstr(1)
.xx "" "chsh: change default login" "shell." "" chsh(1)
.xx "" "exit: leave" "shell." "" csh(1)
.xx "" "rsh: remote" "shell." "" rsh(1C)
.xx "" "system: issue a" "shell command." "" system(3)
.xx "" "csh: a" "shell (command interpreter) with C-like syntax." "" csh(1)
.xx "" "eval: re-evaluate" "shell data." "" csh(1)
.xx "" "popd: pop" "shell directory stack." "" csh(1)
.xx "" "pushd: push" "shell directory stack." "" csh(1)
.xx "" "alias:" "shell macros." "" csh(1)
.xx "" "suspend: suspend a" "shell, resuming its superior." "" csh(1)
.xx "" "rshd: remote" "shell server." "" rshd(8)
.xx "" "set: change value of" "shell variable." "" csh(1)
.xx "" "@: arithmetic on" "shell variables." "" csh(1)
.xx "" "unset: discard" "shell variables." "" csh(1)
.xx "" "exec: overlay" "shell with specified command." "" csh(1)
.xx "" "" "shift: manipulate argument list." "" csh(1)
.xx "" "/exit, export, login, newgrp, read, readonly, set," "shift, times, trap, umask, wait: command language." "" sh(1)
.xx "" "\- bitwise functions .sp 1 rshift, lshift \- bit" "shifting functions." "/.sp 1 and, or, xor, not" bit(3f)
.xx "" "groups:" "show group memberships." "" groups(1)
.xx "" "ruptime:" "show host status of local machines." "" ruptime(1)
.xx "" "uptime:" "show how long system has been up." "" uptime(1)
.xx "" "lastcomm:" "show last commands executed in reverse order." "" lastcomm(1)
.xx "construct a file." "what:" "show what versions of object modules were used to" "" what(1)
.xx "" "shutdown:" "shut down part of a full-duplex connection." "" shutdown(2)
.xx "" "" "shutdown: close down the system at a given time." "" shutdown(8)
.xx "connection." "" "shutdown: shut down part of a full-duplex" "" shutdown(2)
.xx "signals." "sigset, signal," "sighold, sigignore, sigrelse, sigpause: manage" "" signal(3j)
.xx "signals." "sigset, signal," "sighold, sigignore, sigrelse, sigpause: manage" "" sigset(3j)
.xx "" "sigset, signal, sighold," "sigignore, sigrelse, sigpause: manage signals." "" signal(3j)
.xx "" "sigset, signal, sighold," "sigignore, sigrelse, sigpause: manage signals." "" sigset(3j)
.xx "" "login:" "sign on." "" login(1)
.xx "" "pause: stop until" "signal." "" pause(2)
.xx "" "signal: change the action for a" "signal." "" signal(3f)
.xx "" "" "signal: catch or ignore signals." "" signal(2)
.xx "" "" "signal: change the action for a signal." "" signal(3f)
.xx "" "psignal, sys_siglist: system" "signal messages." "" psignal(3)
.xx "manage signals." "sigset," "signal, sighold, sigignore, sigrelse, sigpause:" "" signal(3j)
.xx "manage signals." "sigset," "signal, sighold, sigignore, sigrelse, sigpause:" "" sigset(3j)
.xx "" "kill: send" "signal to a process." "" kill(2)
.xx "" "kill: send a" "signal to a process." "" kill(3f)
.xx "" "killpg: send" "signal to a process group." "" killpg(2)
.xx "" "signal: catch or ignore" "signals." "" signal(2)
.xx "" "sighold, sigignore, sigrelse, sigpause: manage" "signals." "sigset, signal," signal(3j)
.xx "" "sighold, sigignore, sigrelse, sigpause: manage" "signals." "sigset, signal," sigset(3j)
.xx "" "sigsys: catch or ignore" "signals." "" sigsys(2)
.xx "" "sigset, signal, sighold, sigignore, sigrelse," "sigpause: manage signals." "" signal(3j)
.xx "" "sigset, signal, sighold, sigignore, sigrelse," "sigpause: manage signals." "" sigset(3j)
.xx "" "sigset, signal, sighold, sigignore," "sigrelse, sigpause: manage signals." "" signal(3j)
.xx "" "sigset, signal, sighold, sigignore," "sigrelse, sigpause: manage signals." "" sigset(3j)
.xx "sigpause: manage signals." "" "sigset, signal, sighold, sigignore, sigrelse," "" signal(3j)
.xx "sigpause: manage signals." "" "sigset, signal, sighold, sigignore, sigrelse," "" sigset(3j)
.xx "" "" "sigsys: catch or ignore signals." "" sigsys(2)
.xx "" "tc: photypesetter" "simulator." "" tc(1)
.xx "trigonometric functions." "" "sin, cos, tan, asin, acos, atan, atan2:" "" sin(3M)
.xx "" "" "sinh, cosh, tanh: hyperbolic functions." "" sinh(3M)
.xx "" "null: data" "sink." "" null(4)
.xx "" "brk, sbrk: change data segment" "size." "" brk(2)
.xx "" "getdtablesize: get descriptor table" "size." "" getdtablesize(2)
.xx "" "getpagesize: get system page" "size." "" getpagesize(2)
.xx "" "stk, sstk: change stack segment" "size." "" stk(2)
.xx "" "size:" "size of an object file." "" size(1)
.xx "" "" "size: size of an object file." "" size(1)
.xx "" "diskpart: calculate default disk partition" "sizes." "" diskpart(8)
.xx "" "sleep:" "sleep for awhile." "" sleep(3f)
.xx "" "" "sleep: sleep for awhile." "" sleep(3f)
.xx "" "" "sleep: suspend execution for an interval." "" sleep(1)
.xx "" "" "sleep: suspend execution for interval." "" sleep(3)
.xx "" "spline: interpolate" "smooth curve." "" spline(1G)
.xx "" "" "snake, snscore: display chase game." "" snake(6)
.xx "" "snake," "snscore: display chase game." "" snake(6)
.xx "" "accept: accept a connection on a" "socket." "" accept(2)
.xx "" "bind: bind a name to a" "socket." "" bind(2)
.xx "" "connect: initiate a connection on a" "socket." "" connect(2)
.xx "" "listen: listen for connections on a" "socket." "" listen(2)
.xx "" "recv, recvfrom, recvmsg: receive a message from a" "socket." "" recv(2)
.xx "" "send, sendto, sendmsg: send a message from a" "socket." "" send(2)
.xx "" "" "socket: create an endpoint for communication." "" socket(2)
.xx "" "imp: IMP raw" "socket interface." "" imp(4p)
.xx "" "pup: raw PUP" "socket interface." "" pup(4p)
.xx "" "" "socketpair: create a pair of connected sockets." "" socketpair(2)
.xx "" "getsockopt, setsockopt: get and set options on" "sockets." "" getsockopt(2)
.xx "" "socketpair: create a pair of connected" "sockets." "" socketpair(2)
.xx "" "" "soelim: eliminate \&.so's from nroff input." "" soelim(1)
.xx "" "loop:" "software loopback network interface." "" lo(4)
.xx "" "qsort: quicker" "sort." "" qsort(3)
.xx "" "qsort: quick" "sort." "" qsort(3f)
.xx "" "tsort: topological" "sort." "" tsort(1)
.xx "" "sort:" "sort or merge files." "" sort(1)
.xx "" "" "sort: sort or merge files." "" sort(1)
.xx "" "comm: select or reject lines common to two" "sorted files." "" comm(1)
.xx "" "look: find lines in a" "sorted list." "" look(1)
.xx "" "soelim: eliminate" "\&.so's from nroff input." "" soelim(1)
.xx "" "indent: indent and format a C program" "source." "" indent(1)
.xx "" "mkstr: create an error message file by massaging C" "source." "" mkstr(1)
.xx "" "whereis: locate" "source, binary, and or manual for program." "" whereis(1)
.xx "" "" "source: read commands from file." "" csh(1)
.xx "" "/bic, setbit, bit: bit set, clear, test routines" ".sp 1 and, or, xor, not \- bitwise functions .sp 1/" "" bit(3f)
.xx "" "/.sp 1 and, or, xor, not \- bitwise functions" ".sp 1 rshift, lshift \- bit shifting functions." "" bit(3f)
.xx "" "line, circle, arc, move, cont, point, linemod," "space, closepl: graphics interface." "/erase, label," plot(3x)
.xx "" "expand, unexpand: expand tabs to" "spaces, and vice versa." "" expand(1)
.xx "way." "vfork:" "spawn new process in a virtual memory efficient" "" vfork(2)
.xx "" "exec: overlay shell with" "specified command." "" csh(1)
.xx "" "truncate: truncate a file to a" "specified length." "" truncate(2)
.xx "" "alarm: execute a subroutine after a" "specified time." "" alarm(3f)
.xx "" "swapon:" "specify additional device for paging and swapping." "" swapon(8)
.xx "" "" "spell, spellin, spellout: find spelling errors." "" spell(1)
.xx "" "spell," "spellin, spellout: find spelling errors." "" spell(1)
.xx "" "spell, spellin, spellout: find" "spelling errors." "" spell(1)
.xx "" "spell, spellin," "spellout: find spelling errors." "" spell(1)
.xx "" "" "spline: interpolate smooth curve." "" spline(1G)
.xx "" "split:" "split a file into pieces." "" split(1)
.xx "" "frexp, ldexp, modf:" "split into mantissa and exponent." "" frexp(3)
.xx "" "" "split: split a file into pieces." "" split(1)
.xx "" "uuclean: uucp" "spool directory clean-up." "" uuclean(8)
.xx "" "lpq:" "spool queue examination program." "" lpq(1)
.xx "" "vpr, vprm, vpq, vprint: raster printer/plotter" "spooler." "" vpr(1)
.xx "" "lprm: remove jobs from the line printer" "spooling queue." "" lprm(1)
.xx "" "printf, fprintf," "sprintf: formatted output conversion." "" printf(3S)
.xx "" "exp, log, log10, pow," "sqrt: exponential, logarithm, power, square root." "" exp(3M)
.xx "" "log10, pow, sqrt: exponential, logarithm, power," "square root." "exp, log," exp(3M)
.xx "" "rand," "srand: random number generator." "" rand(3)
.xx "initstate, setstate \- routines for/" "random," "srandom: better random number generator .br" "" random(3)
.xx "" "scanf, fscanf," "sscanf: formatted input conversion." "" scanf(3S)
.xx "" "stk," "sstk: change stack segment size." "" stk(2)
.xx "" "" "stab: symbol table types." "" stab(5)
.xx "" "popd: pop shell directory" "stack." "" csh(1)
.xx "" "pushd: push shell directory" "stack." "" csh(1)
.xx "" "stk, sstk: change" "stack segment size." "" stk(2)
.xx "" "bad144: read/write dec" "standard 144 bad sector information." "" bad144(8)
.xx "" "stdio:" "standard buffered input/output package." "" intro(3S)
.xx "" "stdio:" "standard buffered input/output package." "" stdio(3S)
.xx "" "htable: convert NIC" "standard format host tables." "" htable(8)
.xx "" "" "stat, fstat: get file status." "" stat(3f)
.xx "" "" "stat, lstat, fstat: get file status." "" stat(2)
.xx "" "reset: reset the teletype bits to a sensible" "state." "" reset(1)
.xx "" "fsync: synchronize a file's in-core" "state with that on disk." "" fsync(2)
.xx "" "if: conditional" "statement." "" csh(1)
.xx "" "fstab:" "static information about the filesystems." "" fstab(5)
.xx "" "hashstat: print command hashing" "statistics." "" csh(1)
.xx "" "iostat: report I/O" "statistics." "" iostat(1)
.xx "" "vmstat: report virtual memory" "statistics." "" vmstat(1)
.xx "" "netstat: network" "statistics program." "" netstat(1)
.xx "" "exit: terminate process with" "status." "" exit(3f)
.xx "" "ps: process" "status." "" ps(1)
.xx "" "stat, lstat, fstat: get file" "status." "" stat(2)
.xx "" "stat, fstat: get file" "status." "" stat(3f)
.xx "" "feof, ferror, clearerr, fileno: stream" "status inquiries." "" ferror(3S)
.xx "" "sysline: display system status on" "status line of a terminal." "" sysline(1)
.xx "" "ruptime: show host" "status of local machines." "" ruptime(1)
.xx "" "sysline: display system" "status on status line of a terminal." "" sysline(1)
.xx "" "rwhod: system" "status server." "" rwhod(8)
.xx "" "" "stdio: standard buffered input/output package." "" intro(3S)
.xx "" "" "stdio: standard buffered input/output package." "" stdio(3S)
.xx "" "" "sticky: executable files with persistent text." "" sticky(8)
.xx "" "" "stk, sstk: change stack segment size." "" stk(2)
.xx "" "" "stop: halt a job or process." "" csh(1)
.xx "" "halt:" "stop the processor." "" halt(8)
.xx "" "pause:" "stop until signal." "" pause(2)
.xx "" "icheck: file system" "storage consistency check." "" icheck(8)
.xx "" "up: unibus" "storage module controller/drives." "" up(4v)
.xx "subroutines." "dbminit, fetch," "store, delete, firstkey, nextkey: data base" "" dbm(3x)
.xx "strlen, index, rindex: string operations." "" "strcat, strncat, strcmp, strncmp, strcpy, strncpy," "" string(3)
.xx "rindex: string operations." "strcat, strncat," "strcmp, strncmp, strcpy, strncpy, strlen, index," "" string(3)
.xx "operations." "strcat, strncat, strcmp, strncmp," "strcpy, strncpy, strlen, index, rindex: string" "" string(3)
.xx "" "fclose, fflush: close or flush a" "stream." "" fclose(3S)
.xx "" "fopen, freopen, fdopen: open a" "stream." "" fopen(3S)
.xx "" "fseek, ftell, rewind: reposition a" "stream." "" fseek(3S)
.xx "" "getchar, fgetc, getw: get character or word from" "stream." "getc," getc(3S)
.xx "" "gets, fgets: get a string from a" "stream." "" gets(3S)
.xx "" "putchar, fputc, putw: put character or word on a" "stream." "putc," putc(3S)
.xx "" "puts, fputs: put a string on a" "stream." "" puts(3S)
.xx "" "setbuffer, setlinebuf: assign buffering to a" "stream." "setbuf," setbuf(3S)
.xx "" "ungetc: push character back into input" "stream." "" ungetc(3S)
.xx "" "sed:" "stream editor." "" sed(1)
.xx "" "feof, ferror, clearerr, fileno:" "stream status inquiries." "" ferror(3S)
.xx "" "rcmd, rresvport, ruserok: routines for returning a" "stream to a remote command." "" rcmd(3x)
.xx "" "rexec: return" "stream to a remote command." "" rexec(3x)
.xx "" "fdate: return date and time in an ASCII" "string." "" fdate(3f)
.xx "" "gets, fgets: get a" "string from a stream." "" gets(3S)
.xx "" "puts, fputs: put a" "string on a stream." "" puts(3S)
.xx "" "bcopy, bcmp, bzero: byte" "string operations." "" bstring(3)
.xx "" "strncmp, strcpy, strncpy, strlen, index, rindex:" "string operations." "strcat, strncat, strcmp," string(3)
.xx "" "extract strings from C programs to implement shared" "strings." "xstr:" xstr(1)
.xx "other binary, file." "" "strings: find the printable strings in a object, or" "" strings(1)
.xx "strings." "xstr: extract" "strings from C programs to implement shared" "" xstr(1)
.xx "" "strings: find the printable" "strings in a object, or other binary, file." "" strings(1)
.xx "" "basename:" "strip filename affixes." "" basename(1)
.xx "" "" "strip: remove symbols and relocation bits." "" strip(1)
.xx "" "strcat, strncat, strcmp, strncmp, strcpy, strncpy," "strlen, index, rindex: string operations." "" string(3)
.xx "index, rindex: string operations." "strcat," "strncat, strcmp, strncmp, strcpy, strncpy, strlen," "" string(3)
.xx "string operations." "strcat, strncat, strcmp," "strncmp, strcpy, strncpy, strlen, index, rindex:" "" string(3)
.xx "" "strcat, strncat, strcmp, strncmp, strcpy," "strncpy, strlen, index, rindex: string operations." "" string(3)
.xx "" "" "struct: structure Fortran programs." "" struct(1)
.xx "" "struct:" "structure Fortran programs." "" struct(1)
.xx "" "" "stty: set terminal options." "" stty(1)
.xx "document." "" "style: analyze surface characteristics of a" "" style(1)
.xx "" "" "su: substitute user id temporarily." "" su(1)
.xx "" "alarm: execute a" "subroutine after a specified time." "" alarm(3f)
.xx "" "fetch, store, delete, firstkey, nextkey: data base" "subroutines." "dbminit," dbm(3x)
.xx "" "su:" "substitute user id temporarily." "" su(1)
.xx "" "sum:" "sum and count blocks in a file." "" sum(1)
.xx "" "" "sum: sum and count blocks in a file." "" sum(1)
.xx "" "du:" "summarize disk usage." "" du(1)
.xx "" "quot:" "summarize file system ownership." "" quot(8)
.xx "" "intro:" "summary of job control facilities." "" intro(3j)
.xx "" "jobs:" "summary of job control facilities." "" jobs(3j)
.xx "" "sync: update the" "super block." "" sync(8)
.xx "" "update: periodically update the" "super block." "" update(8)
.xx "" "sync: update" "super-block." "" sync(2)
.xx "" "suspend: suspend a shell, resuming its" "superior." "" csh(1)
.xx "" "intro: introduction to special files and hardware" "support." "" intro(4)
.xx "" "style: analyze" "surface characteristics of a document." "" style(1)
.xx "" "suspend:" "suspend a shell, resuming its superior." "" csh(1)
.xx "" "sleep:" "suspend execution for an interval." "" sleep(1)
.xx "" "sleep:" "suspend execution for interval." "" sleep(3)
.xx "" "" "suspend: suspend a shell, resuming its superior." "" csh(1)
.xx "interface." "ps: Evans and" "Sutherland Picture System 2 graphics device" "" ps(4v)
.xx "" "" "swab: swap bytes." "" swab(3)
.xx "" "swab:" "swap bytes." "" swab(3)
.xx "" "swapon, swapoff: add/delete a" "swap device for interleaved paging/swapping." "" swapon(2)
.xx "" "vswapon: add a" "swap device for interleaved paging/swapping." "" vswapon(2)
.xx "paging/swapping." "swapon," "swapoff: add/delete a swap device for interleaved" "" swapon(2)
.xx "swapping." "" "swapon: specify additional device for paging and" "" swapon(8)
.xx "interleaved paging/swapping." "" "swapon, swapoff: add/delete a swap device for" "" swapon(2)
.xx "" "swapon: specify additional device for paging and" "swapping." "" swapon(8)
.xx "" "breaksw: exit from" "switch." "" csh(1)
.xx "" "case: selector in" "switch." "" csh(1)
.xx "" "default: catchall clause in" "switch." "" csh(1)
.xx "" "endsw: terminate" "switch." "" csh(1)
.xx "" "" "switch: multi-way command branch." "" csh(1)
.xx "" "stab:" "symbol table types." "" stab(5)
.xx "" "readlink: read value of a" "symbolic link." "" readlink(2)
.xx "" "symlink: make" "symbolic link to a file." "" symlink(2)
.xx "" "strip: remove" "symbols and relocation bits." "" strip(1)
.xx "" "" "symlink: make symbolic link to a file." "" symlink(2)
.xx "" "" "symorder: rearrange name list." "" symorder(1)
.xx "" "" "sync: update super-block." "" sync(2)
.xx "" "" "sync: update the super block." "" sync(8)
.xx "disk." "fsync:" "synchronize a file's in-core state with that on" "" fsync(2)
.xx "" "select:" "synchronous i/o multiplexing." "" select(2)
.xx "" "csh: a shell (command interpreter) with C-like" "syntax." "" csh(1)
.xx "" "" "syscall: indirect system call." "" syscall(2)
.xx "" "perror," "sys_errlist, sys_nerr: system error messages." "" perror(3)
.xx "terminal." "" "sysline: display system status on status line of a" "" sysline(1)
.xx "" "" "syslog: log systems messages." "" syslog(8)
.xx "" "" "syslog, openlog, closelog: control system log." "" syslog(3)
.xx "" "perror, sys_errlist," "sys_nerr: system error messages." "" perror(3)
.xx "" "psignal," "sys_siglist: system signal messages." "" psignal(3)
.xx "" "hostname: set or print name of current host" "system." "" hostname(1)
.xx "" "madvise: give advice to the paging" "system." "" madvise(2)
.xx "" "mkfs: construct a file" "system." "" mkfs(8)
.xx "" "mkproto: construct a pototype file" "system." "" mkproto(8)
.xx "" "mount, unmount: mount or remove file" "system." "" mount(2)
.xx "" "mount, umount: mount and dismount file" "system." "" mount(8)
.xx "" "newfs: construct a new file" "system." "" newfs(8)
.xx "" "savecore: save a core dump of the operating" "system." "" savecore(8)
.xx "" "tip: connect to a remote" "system." "" tip(1C)
.xx "" "tunefs: tune up an existing file" "system." "" tunefs(8)
.xx "" "users: compact list of users who are on the" "system." "" users(1)
.xx "" "who: who is on the" "system." "" who(1)
.xx "" "hy: Network" "Systems Hyperchannel Interface." "" hy(4v)
.xx "" "syslog: log" "systems messages." "" syslog(8)
.xx "" "kgmon: generate a dump of the operating" "systems profile buffers." "" kgmon(8)
.xx "" "rehash: recompute command hash" "table." "" csh(1)
.xx "" "unhash: discard command hash" "table." "" csh(1)
.xx "" "mtab: mounted file system" "table." "" mtab(5)
.xx "" "vwidth: make troff width" "table for a font." "" vwidth(1)
.xx "" "getdtablesize: get descriptor" "table size." "" getdtablesize(2)
.xx "" "stab: symbol" "table types." "" stab(5)
.xx "" "htable: convert NIC standard format host" "tables." "" htable(8)
.xx "" "route: manually manipulate the routing" "tables." "" route(8)
.xx "" "tbl: format" "tables for nroff or troff." "" tbl(1)
.xx "" "gettable: get NIC format host" "tables from a host ." "" gettable(8)
.xx "" "tabs: set terminal" "tabs." "" tabs(1)
.xx "" "" "tabs: set terminal tabs." "" tabs(1)
.xx "" "expand, unexpand: expand" "tabs to spaces, and vice versa." "" expand(1)
.xx "" "ctags: create a" "tags file." "" ctags(1)
.xx "" "" "tail: deliver the last part of a file." "" tail(1)
.xx "functions." "sin, cos," "tan, asin, acos, atan, atan2: trigonometric" "" sin(3M)
.xx "" "sinh, cosh," "tanh: hyperbolic functions." "" sinh(3M)
.xx "" "tp: manipulate" "tape archive." "" tp(1)
.xx "" "tar:" "tape archive file format." "" tar(5)
.xx "" "tar:" "tape archiver." "" tar(1)
.xx "" "ut: UNIBUS TU45 tri-density" "tape drive interface." "" ut(4v)
.xx "" "tp: DEC/mag" "tape formats." "" tp(5)
.xx "" "mt: magnetic" "tape manipulating program." "" mt(1)
.xx "" "" "tar: tape archive file format." "" tar(5)
.xx "" "" "tar: tape archiver." "" tar(1)
.xx "" "deroff: remove nroff, troff," "tbl and eqn constructs." "" deroff(1)
.xx "" "" "tbl: format tables for nroff or troff." "" tbl(1)
.xx "" "" "tc: photypesetter simulator." "" tc(1)
.xx "" "" "tcp: Internet Transmission Control Protocol." "" tcp(4p)
.xx "" "" "tee: pipe fitting." "" tee(1)
.xx "" "tk: paginator for the" "Tektronix 4014." "" tk(1)
.xx "" "reset: reset the" "teletype bits to a sensible state." "" reset(1)
.xx "" "last: indicate last logins of users and" "teletypes." "" last(1)
.xx "" "index, rindex, lnblnk, len:" "tell about character objects." "" index(3f)
.xx "operations." "opendir, readdir," "telldir, seekdir, rewinddir, closedir: directory" "" directory(3)
.xx "" "telnet: user interface to the" "TELNET protocol." "" telnet(1C)
.xx "" "telnetd: DARPA" "TELNET protocol server." "" telnetd(8)
.xx "" "" "telnet: user interface to the TELNET protocol." "" telnet(1C)
.xx "" "" "telnetd: DARPA TELNET protocol server." "" telnetd(8)
.xx "" "su: substitute user id" "temporarily." "" su(1)
.xx "" "" "termcap: terminal capability data base." "" termcap(5)
.xx "" "lock: reserve a" "terminal." "" lock(1)
.xx "" "sysline: display system status on status line of a" "terminal." "" sysline(1)
.xx "" "ttyname, isatty, ttyslot: find name of a" "terminal." "" ttyname(3)
.xx "" "vhangup: virtually ``hangup'' the current control" "terminal." "" vhangup(2)
.xx "" "worms: animate worms on a display" "terminal." "" worms(6)
.xx "" "termcap:" "terminal capability data base." "" termcap(5)
.xx "" "tset:" "terminal dependent initialization." "" tset(1)
.xx "" "pty: pseudo" "terminal driver." "" pty(4)
.xx "" "tgetent, tgetnum, tgetflag, tgetstr, tgoto, tputs:" "terminal independent operation routines." "" termcap(3x)
.xx "" "ttys:" "terminal initialization data." "" ttys(5)
.xx "" "tty: general" "terminal interface." "" tty(4)
.xx "" "getty: set" "terminal mode." "" getty(8)
.xx "" "dmf: DMF-32," "terminal multiplexor." "" dmf(4v)
.xx "" "tty: get" "terminal name." "" tty(1)
.xx "" "stty: set" "terminal options." "" stty(1)
.xx "" "ttynam, isatty: find name of a" "terminal port." "" ttynam(3f)
.xx "" "clear: clear" "terminal screen." "" clear(1)
.xx "" "script: make typescript of" "terminal session." "" script(1)
.xx "" "tabs: set" "terminal tabs." "" tabs(1)
.xx "" "ttytype: data base of" "terminal types by port." "" ttytype(5)
.xx "" "" "terminals: conventional names." "" term(7)
.xx "" "wait: wait for process to" "terminate." "" wait(2)
.xx "" "wait3: wait for process to" "terminate." "" wait3(2)
.xx "" "wait: wait for a process to" "terminate." "" wait(3f)
.xx "" "_exit:" "terminate a process." "" exit(2)
.xx "" "kill:" "terminate a process with extreme prejudice." "" kill(1)
.xx "" "abort:" "terminate abruptly with memory image." "" abort(3f)
.xx "" "endif:" "terminate conditional." "" csh(1)
.xx "" "end:" "terminate loop." "" csh(1)
.xx "" "exit:" "terminate process with status." "" exit(3f)
.xx "" "endsw:" "terminate switch." "" csh(1)
.xx "" "" "test: condition command." "" test(1)
.xx "functions/" "bis, bic, setbit, bit: bit set, clear," "test routines .sp 1 and, or, xor, not \- bitwise" "" bit(3f)
.xx "" "quiz:" "test your knowledge." "" quiz(6)
.xx "" "sticky: executable files with persistent" "text." "" sticky(8)
.xx "" "ed:" "text editor." "" ed(1)
.xx "" "ex, edit:" "text editor." "" ex(1)
.xx "" "fmt: simple" "text formatter." "" fmt(1)
.xx "" "troff, nroff:" "text formatting and typesetting." "" nroff(1)
.xx "" "troff, nroff:" "text formatting and typesetting." "" troff(1)
.xx "" "" "tftp: DARPA Trivial File Transfer Protocol server." "" tftpd(8)
.xx "terminal independent operation routines." "" "tgetent, tgetnum, tgetflag, tgetstr, tgoto, tputs:" "" termcap(3x)
.xx "independent operation routines." "tgetent, tgetnum," "tgetflag, tgetstr, tgoto, tputs: terminal" "" termcap(3x)
.xx "independent operation routines." "tgetent," "tgetnum, tgetflag, tgetstr, tgoto, tputs: terminal" "" termcap(3x)
.xx "operation routines." "tgetent, tgetnum, tgetflag," "tgetstr, tgoto, tputs: terminal independent" "" termcap(3x)
.xx "routines." "tgetent, tgetnum, tgetflag, tgetstr," "tgoto, tputs: terminal independent operation" "" termcap(3x)
.xx "" "fsync: synchronize a file's in-core state with" "that on disk." "" fsync(2)
.xx "" "ccat: compress and uncompress files, and cat" "them." "compact, uncompact," compact(1)
.xx "" "diction,explain: print wordy sentences;" "thesaurus for diction." "" diction(1)
.xx "" "diction,explain: print wordy sentences;" "thesaurus for diction." "" explain(1)
.xx "" "w: who is on and what" "they are doing." "" w(1)
.xx "" "netcp: remote copy of files" "through the net." "" netcp(1)
.xx "" "netlpr: use a remote lineprinter" "through the net." "" netlpr(1)
.xx "" "alarm: execute a subroutine after a specified" "time." "" alarm(3f)
.xx "" "at: execute commands at a later" "time." "" at(1)
.xx "" "etime, dtime: return elapsed execution" "time." "" etime(3f)
.xx "" "gettimeofday, settimeofday: get/set date and" "time." "" gettimeofday(2)
.xx "" "printer daemon, restart downed daemons at reboot" "time." "lpd, lpdrestart: line" lpd(8)
.xx "" "shutdown: close down the system at a given" "time." "" shutdown(8)
.xx "" "time, ctime, ltime, gmtime: return system" "time." "" time(3f)
.xx "" "time:" "time a command." "" time(1)
.xx "" "time:" "time command." "" csh(1)
.xx "" "" "time, ctime, ltime, gmtime: return system time." "" time(3f)
.xx "" "fdate: return date and" "time in an ASCII string." "" fdate(3f)
.xx "" "idate, itime: return date or" "time in numerical form." "" idate(3f)
.xx "" "profil: execution" "time profile." "" profil(2)
.xx "" "" "time: time a command." "" time(1)
.xx "" "" "time: time command." "" csh(1)
.xx "" "gmtime, asctime, timezone: convert date and" "time to ASCII." "ctime, localtime," ctime(3)
.xx "" "getitimer, setitimer: get/set value of interval" "timer." "" getitimer(2)
.xx "" "utimes: set file" "times." "" utimes(2)
.xx "" "export, login, newgrp, read, readonly, set, shift," "times, trap, umask, wait: command language." "/exit," sh(1)
.xx "" "ctime, localtime, gmtime, asctime," "timezone: convert date and time to ASCII." "" ctime(3)
.xx "" "remote - remote host description file for" "tip .ad." "" remote(5)
.xx "" "" "tip: connect to a remote system." "" tip(1C)
.xx "" "" "tk: paginator for the Tektronix 4014." "" tk(1)
.xx "" "" "tm: TM-11/TE-10 magtape interface." "" tm(4v)
.xx "" "ht:" "TM-03/TE-16,TU-45,TU-77 MASSBUS magtape interface." "" ht(4v)
.xx "" "tm:" "TM-11/TE-10 magtape interface." "" tm(4v)
.xx "" "mt:" "TM78/TU-78 MASSBUS magtape interface." "" mt(4v)
.xx "" "popen, pclose: initiate I/O" "to/from a process." "" popen(3S)
.xx "" "tsort:" "topological sort." "" tsort(1)
.xx "" "" "touch: update date last modified of a file." "" touch(1)
.xx "" "" "tp: DEC/mag tape formats." "" tp(5)
.xx "" "" "tp: manipulate tape archive." "" tp(1)
.xx "" "tgetent, tgetnum, tgetflag, tgetstr, tgoto," "tputs: terminal independent operation routines." "" termcap(3x)
.xx "" "" "tr: translate characters." "" tr(1)
.xx "" "ptrace: process" "trace." "" ptrace(2)
.xx "" "trpt: transliterate protocol" "trace." "" trpt(8)
.xx "" "uuencode,uudecode: encode/decode a binary file for" "tranmission via mail." "" uuencode(1C)
.xx "" "goto: command" "transfer." "" csh(1)
.xx "" "ftp: file" "transfer program." "" ftp(1C)
.xx "" "ftpd: DARPA Internet File" "Transfer Protocol server." "" ftpd(8)
.xx "" "tftp: DARPA Trivial File" "Transfer Protocol server." "" tftpd(8)
.xx "" "tr:" "translate characters." "" tr(1)
.xx "macros." "trman:" "translate version 6 manual macros to version 7" "" trman(1)
.xx "" "ad: Data" "Translation A/D converter." "" ad(4v)
.xx "" "pi: Pascal interpreter code" "translator." "" pi(1)
.xx "" "trpt:" "transliterate protocol trace." "" trpt(8)
.xx "" "tcp: Internet" "Transmission Control Protocol." "" tcp(4p)
.xx "" "trapov:" "trap and repair floating point overflow." "" trapov(3f)
.xx "" "traper:" "trap arithmetic errors." "" traper(3f)
.xx "" "login, newgrp, read, readonly, set, shift, times," "trap, umask, wait: command language." "/exit, export," sh(1)
.xx "" "" "traper: trap arithmetic errors." "" traper(3f)
.xx "" "" "trapov: trap and repair floating point overflow." "" trapov(3f)
.xx "" "" "trek: trekkie game." "" trek(6)
.xx "" "trek:" "trekkie game." "" trek(6)
.xx "" "ut: UNIBUS TU45" "tri-density tape drive interface." "" ut(4v)
.xx "" "sin, cos, tan, asin, acos, atan, atan2:" "trigonometric functions." "" sin(3M)
.xx "" "tftp: DARPA" "Trivial File Transfer Protocol server." "" tftpd(8)
.xx "7 macros." "" "trman: translate version 6 manual macros to version" "" trman(1)
.xx "" "tbl: format tables for nroff or" "troff." "" tbl(1)
.xx "" "Lisp programs to be printed with nroff, vtroff, or" "troff." "vlp \(em Format" vlp(1)
.xx "" "" "troff, nroff: text formatting and typesetting." "" nroff(1)
.xx "" "" "troff, nroff: text formatting and typesetting." "" troff(1)
.xx "" "deroff: remove nroff," "troff, tbl and eqn constructs." "" deroff(1)
.xx "" "vtroff:" "troff to a raster plotter." "" vtroff(1)
.xx "" "nettroff:" "troff to the phototypesetter over the network." "" nettroff(1)
.xx "" "vwidth: make" "troff width table for a font." "" vwidth(1)
.xx "" "" "trpt: transliterate protocol trace." "" trpt(8)
.xx "" "" "true, false: provide truth values." "" false(1)
.xx "" "" "true, false: provide truth values." "" true(1)
.xx "" "truncate:" "truncate a file to a specified length." "" truncate(2)
.xx "" "" "truncate: truncate a file to a specified length." "" truncate(2)
.xx "" "true, false: provide" "truth values." "" false(1)
.xx "" "true, false: provide" "truth values." "" true(1)
.xx "" "chase:" "Try to escape to killer robots." "" chase(6)
.xx "" "" "ts: TS-11 magtape interface." "" ts(4v)
.xx "" "ts:" "TS-11 magtape interface." "" ts(4v)
.xx "" "" "tset: terminal dependent initialization." "" tset(1)
.xx "" "" "tsort: topological sort." "" tsort(1)
.xx "" "" "tty: general terminal interface." "" tty(4)
.xx "" "" "tty: get terminal name." "" tty(1)
.xx "" "" "ttynam, isatty: find name of a terminal port." "" ttynam(3f)
.xx "" "" "ttyname, isatty, ttyslot: find name of a terminal." "" ttyname(3)
.xx "" "" "ttys: terminal initialization data." "" ttys(5)
.xx "" "ttyname, isatty," "ttyslot: find name of a terminal." "" ttyname(3)
.xx "" "" "ttytype: data base of terminal types by port." "" ttytype(5)
.xx "" "" "tu: VAX-11/730 TU58 console cassette interface." "" tu(4v)
.xx "" "ut: UNIBUS" "TU45 tri-density tape drive interface." "" ut(4v)
.xx "" "tu: VAX-11/730" "TU58 console cassette interface." "" tu(4v)
.xx "" "tunefs:" "tune up an existing file system." "" tunefs(8)
.xx "" "" "tunefs: tune up an existing file system." "" tunefs(8)
.xx "" "file: determine file" "type." "" file(1)
.xx "" "stab: symbol table" "types." "" stab(5)
.xx "" "types: primitive system data" "types." "" types(5)
.xx "" "ttytype: data base of terminal" "types by port." "" ttytype(5)
.xx "" "" "types: primitive system data types." "" types(5)
.xx "" "script: make" "typescript of terminal session." "" script(1)
.xx "" "man: macros to" "typeset manual." "" man(7)
.xx "" "eqn, neqn, checkeq:" "typeset mathematics." "" eqn(1)
.xx "" "troff, nroff: text formatting and" "typesetting." "" nroff(1)
.xx "" "troff, nroff: text formatting and" "typesetting." "" troff(1)
.xx "" "" "uda: UDA-50 disk controller interface." "" uda(4v)
.xx "" "uda:" "UDA-50 disk controller interface." "" uda(4v)
.xx "" "" "udp: Internet User Datagram Protocol." "" udp(4p)
.xx "" "getpw: get name from" "uid." "" getpw(3)
.xx "" "" "ul: do underlining." "" ul(1)
.xx "" "" "umask: change or display file creation mask." "" csh(1)
.xx "" "" "umask: set file creation mode mask." "" umask(2)
.xx "" "newgrp, read, readonly, set, shift, times, trap," "umask, wait: command language." "/export, login," sh(1)
.xx "" "mount," "umount: mount and dismount file system." "" mount(8)
.xx "" "" "un: Ungermann-Bass interface." "" un(4v)
.xx "" "" "unalias: remove aliases." "" csh(1)
.xx "cat them." "compact," "uncompact, ccat: compress and uncompress files, and" "" compact(1)
.xx "" "compact, uncompact, ccat: compress and" "uncompress files, and cat them." "" compact(1)
.xx "" "ul: do" "underlining." "" ul(1)
.xx "" "expand," "unexpand: expand tabs to spaces, and vice versa." "" expand(1)
.xx "" "un:" "Ungermann-Bass interface." "" un(4v)
.xx "" "" "ungetc: push character back into input stream." "" ungetc(3S)
.xx "" "" "unhash: discard command hash table." "" csh(1)
.xx "" "up:" "unibus storage module controller/drives." "" up(4v)
.xx "" "ut:" "UNIBUS TU45 tri-density tape drive interface." "" ut(4v)
.xx "" "" "uniq: report repeated lines in a file." "" uniq(1)
.xx "" "mktemp: make a" "unique file name." "" mktemp(3)
.xx "" "gethostid, sethostid: get/set" "unique identifier of current host." "" gethostid(2)
.xx "" "flush: flush output to a logical" "unit." "" flush(3f)
.xx "" "fseek, ftell: reposition a file on a logical" "unit." "" fseek(3f)
.xx "" "getc, fgetc: get a character from a logical" "unit." "" getc(3f)
.xx "" "putc, fputc: write a character to a fortran logical" "unit." "" putc(3f)
.xx "" "dn: DN-11 autocall" "unit interface." "" dn(4v)
.xx "" "" "units: conversion program." "" units(1)
.xx "" "learn: computer aided instruction about" "UNIX." "" learn(1)
.xx "" "reboot:" "UNIX bootstrapping procedures." "" reboot(8)
.xx "" "system: execute a" "unix command." "" system(3f)
.xx "" "uux: unix to" "unix command execution." "" uux(1C)
.xx "" "uucp, uulog: unix to" "unix copy." "" uucp(1C)
.xx "" "vfontinfo: inspect and print out information about" "UNIX fonts." "" vfontinfo(1)
.xx "" "mt:" "UNIX magtape interface." "" mt(4)
.xx "" "analyze: Virtual" "UNIX postmortem crash analyzer." "" analyze(8)
.xx "" "uux:" "unix to unix command execution." "" uux(1C)
.xx "" "uucp, uulog:" "unix to unix copy." "" uucp(1C)
.xx "" "" "unlimit: remove resource limitiations." "" csh(1)
.xx "" "rmdir, rm: remove" "(unlink) directories or files." "" rmdir(1)
.xx "" "rm, rmdir: remove" "(unlink) files or directories." "" rm(1)
.xx "" "" "unlink: remove a directory entry." "" unlink(3f)
.xx "" "" "unlink: remove directory entry." "" unlink(2)
.xx "" "munmap:" "unmap pages of memory." "" munmap(2)
.xx "" "mount," "unmount: mount or remove file system." "" mount(2)
.xx "" "" "unset: discard shell variables." "" csh(1)
.xx "" "" "unsetenv: remove environment variables." "" csh(1)
.xx "" "uptime: show how long system has been" "up." "" uptime(1)
.xx "" "tunefs: tune" "up an existing file system." "" tunefs(8)
.xx "" "" "up: unibus storage module controller/drives." "" up(4v)
.xx "" "touch:" "update date last modified of a file." "" touch(1)
.xx "" "" "update: periodically update the super block." "" update(8)
.xx "" "sync:" "update super-block." "" sync(2)
.xx "" "sync:" "update the super block." "" sync(8)
.xx "" "update: periodically" "update the super block." "" update(8)
.xx "" "" "uptime: show how long system has been up." "" uptime(1)
.xx "" "du: summarize disk" "usage." "" du(1)
.xx "" "netlpr:" "use a remote lineprinter through the net." "" netlpr(1)
.xx "" "what: show what versions of object modules were" "used to construct a file." "" what(1)
.xx "" "miscellaneous: Miscellaneous" "useful information pages." "" intro(7)
.xx "" "chfn: change full name of" "user." "" chfn(1)
.xx "" "login: login new" "user." "" csh(1)
.xx "" "write: write to another" "user." "" write(1)
.xx "" "udp: Internet" "User Datagram Protocol." "" udp(4p)
.xx "" "environ:" "user environment." "" environ(7)
.xx "" "whoami: print effective current" "user id." "" whoami(1)
.xx "" "su: substitute" "user id temporarily." "" su(1)
.xx "" "getuid, geteuid: get" "user identity." "" getuid(2)
.xx "" "setreuid: set real and effective" "user ID's." "" setreuid(2)
.xx "" "finger:" "user information lookup program." "" finger(1)
.xx "" "telnet:" "user interface to the TELNET protocol." "" telnet(1C)
.xx "" "getuid, getgid: get" "user or group ID of the caller." "" getuid(3f)
.xx "" "adduser: procedure for adding new" "users." "" adduser(8)
.xx "" "binmail: send or receive mail among" "users." "" binmail(1)
.xx "" "wall: write to all" "users." "" wall(1)
.xx "" "last: indicate last logins of" "users and teletypes." "" last(1)
.xx "" "" "users: compact list of users who are on the system." "" users(1)
.xx "" "getlog: get" "user's login name." "" getlog(3f)
.xx "" "users: compact list of" "users who are on the system." "" users(1)
.xx "" "" "ut: UNIBUS TU45 tri-density tape drive interface." "" ut(4v)
.xx "" "getrusage: get information about resource" "utilization." "" getrusage(2)
.xx "" "" "utimes: set file times." "" utimes(2)
.xx "" "" "utmp, wtmp: login records." "" utmp(5)
.xx "" "" "uuclean: uucp spool directory clean-up." "" uuclean(8)
.xx "" "uuclean:" "uucp spool directory clean-up." "" uuclean(8)
.xx "" "" "uucp, uulog: unix to unix copy." "" uucp(1C)
.xx "" "" "uudiff: directory comparison between machines." "" uudiff(1C)
.xx "" "uuencode: format of an encoded" "uuencode file." "" uuencode(5)
.xx "" "" "uuencode: format of an encoded uuencode file." "" uuencode(5)
.xx "tranmission via mail." "" "uuencode,uudecode: encode/decode a binary file for" "" uuencode(1C)
.xx "" "uucp," "uulog: unix to unix copy." "" uucp(1C)
.xx "" "" "uusend: send a file to a remote host." "" uusend(1C)
.xx "" "" "uux: unix to unix command execution." "" uux(1C)
.xx "" "" "va: Benson-Varian interface." "" va(4v)
.xx "" "" "valloc: aligned memory allocator." "" valloc(3)
.xx "" "abs: integer absolute" "value." "" abs(3)
.xx "" "fabs, floor, ceil: absolute" "value, floor, ceiling functions." "" floor(3M)
.xx "" "getenv:" "value for environment name." "" getenv(3)
.xx "" "readlink: read" "value of a symbolic link." "" readlink(2)
.xx "" "getenv: get" "value of environment variables." "" getenv(3f)
.xx "" "getitimer, setitimer: get/set" "value of interval timer." "" getitimer(2)
.xx "" "set: change" "value of shell variable." "" csh(1)
.xx "" "true, false: provide truth" "values." "" false(1)
.xx "" "rand, drand, irand: return random" "values." "" rand(3f)
.xx "" "flmin, flmax, dflmin, dflmax, inmax: return extreme" "values." "" range(3f)
.xx "" "true, false: provide truth" "values." "" true(1)
.xx "" "htonl, htons, ntohl, ntohs: convert" "values between host and network byte order." "" byteorder(3n)
.xx "" "" "varargs: variable argument list." "" varargs(3)
.xx "" "set: change value of shell" "variable." "" csh(1)
.xx "" "varargs:" "variable argument list." "" varargs(3)
.xx "" "setenv: set" "variable in environment." "" csh(1)
.xx "" "@: arithmetic on shell" "variables." "" csh(1)
.xx "" "unset: discard shell" "variables." "" csh(1)
.xx "" "unsetenv: remove environment" "variables." "" csh(1)
.xx "" "getenv: get value of environment" "variables." "" getenv(3f)
.xx "" "intro: introduction to" "VAX devices." "" intro(4v)
.xx "" "as:" "VAX-11 assembler." "" as(1)
.xx "" "cons:" "VAX-11 console interface." "" cons(4v)
.xx "" "tu:" "VAX-11/730 TU58 console cassette interface." "" tu(4v)
.xx "" "assert: program" "verification." "" assert(3x)
.xx "" "lint: a C program" "verifier." "" lint(1)
.xx "" "expand, unexpand: expand tabs to spaces, and vice" "versa." "" expand(1)
.xx "" "vfont: font formats for the Benson-Varian or" "Versatec." "" vfont(5)
.xx "" "vp:" "Versatec interface." "" vp(4v)
.xx "" "trman: translate" "version 6 manual macros to version 7 macros." "" trman(1)
.xx "" "trman: translate version 6 manual macros to" "version 7 macros." "" trman(1)
.xx "" "hangman: Computer" "version of the game hangman." "" hangman(6)
.xx "file." "what: show what" "versions of object modules were used to construct a" "" what(1)
.xx "Versatec." "" "vfont: font formats for the Benson-Varian or" "" vfont(5)
.xx "UNIX fonts." "" "vfontinfo: inspect and print out information about" "" vfontinfo(1)
.xx "efficient way." "" "vfork: spawn new process in a virtual memory" "" vfork(2)
.xx "" "" "vgrind: grind nice listings of programs." "" vgrind(1)
.xx "" "" "vgrindefs: vgrind's language definition data base." "" vgrindefs(5)
.xx "" "vgrindefs:" "vgrind's language definition data base." "" vgrindefs(5)
.xx "terminal." "" "vhangup: virtually ``hangup'' the current control" "" vhangup(2)
.xx "" "vipw: edit the password file with" "vi." "" vipw(8)
.xx "on ex." "" "vi: screen oriented (visual) display editor based" "" vi(1)
.xx "" "encode/decode a binary file for tranmission" "via mail." "uuencode,uudecode:" uuencode(1C)
.xx "" "expand, unexpand: expand tabs to spaces, and" "vice versa." "" expand(1)
.xx "" "more, page: file perusal filter for crt" "viewing." "" more(1)
.xx "" "" "vipw: edit the password file with vi." "" vipw(8)
.xx "" "vfork: spawn new process in a" "virtual memory efficient way." "" vfork(2)
.xx "" "vmstat: report" "virtual memory statistics." "" vmstat(1)
.xx "" "analyze:" "Virtual UNIX postmortem crash analyzer." "" analyze(8)
.xx "" "vhangup:" "virtually ``hangup'' the current control terminal." "" vhangup(2)
.xx "" "vi: screen oriented" "(visual) display editor based on ex." "" vi(1)
.xx "nroff, vtroff, or troff." "" "vlp \(em Format Lisp programs to be printed with" "" vlp(1)
.xx "" "" "vmstat: report virtual memory statistics." "" vmstat(1)
.xx "" "fs, inode: format of file system" "volume." "" fs(5)
.xx "" "" "vp: Versatec interface." "" vp(4v)
.xx "" "vpr, vprm," "vpq, vprint: raster printer/plotter spooler." "" vpr(1)
.xx "spooler." "" "vpr, vprm, vpq, vprint: raster printer/plotter" "" vpr(1)
.xx "" "vpr, vprm, vpq," "vprint: raster printer/plotter spooler." "" vpr(1)
.xx "" "vpr," "vprm, vpq, vprint: raster printer/plotter spooler." "" vpr(1)
.xx "paging/swapping." "" "vswapon: add a swap device for interleaved" "" vswapon(2)
.xx "" "\(em Format Lisp programs to be printed with nroff," "vtroff, or troff." "vlp" vlp(1)
.xx "" "" "vtroff: troff to a raster plotter." "" vtroff(1)
.xx "" "" "vv: Proteon proNET 10 Megabit ring." "" vv(4v)
.xx "" "" "vwidth: make troff width table for a font." "" vwidth(1)
.xx "" "" "w: who is on and what they are doing." "" w(1)
.xx "" "" "wait: await completion of process." "" wait(1)
.xx "" "read, readonly, set, shift, times, trap, umask," "wait: command language." "/export, login, newgrp," sh(1)
.xx "" "wait:" "wait for a process to terminate." "" wait(3f)
.xx "" "wait:" "wait for background processes to complete." "" csh(1)
.xx "" "wait:" "wait for process to terminate." "" wait(2)
.xx "" "wait3:" "wait for process to terminate." "" wait3(2)
.xx "" "" "wait: wait for a process to terminate." "" wait(3f)
.xx "" "" "wait: wait for background processes to complete." "" csh(1)
.xx "" "" "wait: wait for process to terminate." "" wait(2)
.xx "" "" "wait3: wait for process to terminate." "" wait3(2)
.xx "" "" "wall: write to all users." "" wall(1)
.xx "" "spawn new process in a virtual memory efficient" "way." "vfork:" vfork(2)
.xx "" "" "wc: word count." "" wc(1)
.xx "" "what: show what versions of object modules" "were used to construct a file." "" what(1)
.xx "" "whatis: describe" "what a command is." "" whatis(1)
.xx "" "see: see" "what a file has in it." "" see(1)
.xx "" "crash:" "what happens when the system crashes." "" crash(8)
.xx "used to construct a file." "" "what: show what versions of object modules were" "" what(1)
.xx "" "w: who is on and" "what they are doing." "" w(1)
.xx "construct a file." "what: show" "what versions of object modules were used to" "" what(1)
.xx "" "" "whatis: describe what a command is." "" whatis(1)
.xx "" "crash: what happens" "when the system crashes." "" crash(8)
.xx "" "leave: remind you" "when you have to leave." "" leave(1)
.xx "program." "" "whereis: locate source, binary, and or manual for" "" whereis(1)
.xx "paths (\fIcsh\fR only)." "" "which: locate a program file including aliases and" "" which(1)
.xx "exec, exit, export, login,/" "sh, for, case, if," "while, \fB:\fP, \fB.\fP, break, continue, cd, eval," "" sh(1)
.xx "" "" "while: repeat commands conditionally." "" csh(1)
.xx "" "break: exit" "while/foreach loop." "" csh(1)
.xx "" "users: compact list of users" "who are on the system." "" users(1)
.xx "" "from:" "who is my mail from?." "" from(1)
.xx "" "w:" "who is on and what they are doing." "" w(1)
.xx "" "who:" "who is on the system." "" who(1)
.xx "" "biff: be notified if mail arrives and" "who it is from." "" biff(1)
.xx "" "" "who: who is on the system." "" who(1)
.xx "" "" "whoami: print effective current user id." "" whoami(1)
.xx "" "rwho:" "who's logged in on local machines." "" rwho(1)
.xx "" "fold: fold long lines for finite" "width output device." "" fold(1)
.xx "" "vwidth: make troff" "width table for a font." "" vwidth(1)
.xx "" "fastboot: reboot the system" "without checking the disks." "" fastboot(8)
.xx "" "wc:" "word count." "" wc(1)
.xx "" "getc, getchar, fgetc, getw: get character or" "word from stream." "" getc(3S)
.xx "" "putc, putchar, fputc, putw: put character or" "word on a stream." "" putc(3S)
.xx "" "diction,explain: print" "wordy sentences; thesaurus for diction." "" diction(1)
.xx "" "diction,explain: print" "wordy sentences; thesaurus for diction." "" explain(1)
.xx "" "cd: change" "working directory." "" cd(1)
.xx "" "chdir: change current" "working directory." "" chdir(2)
.xx "" "pwd:" "working directory name." "" pwd(1)
.xx "" "getwd: get current" "working directory pathname." "" getwd(3)
.xx "" "worm: Play the growing" "worm game." "" worm(6)
.xx "" "" "worm: Play the growing worm game." "" worm(6)
.xx "" "" "worms: animate worms on a display terminal." "" worms(6)
.xx "" "worms: animate" "worms on a display terminal." "" worms(6)
.xx "" "putc, fputc:" "write a character to a fortran logical unit." "" putc(3f)
.xx "" "write, writev:" "write on a file." "" write(2)
.xx "" "wall:" "write to all users." "" wall(1)
.xx "" "write:" "write to another user." "" write(1)
.xx "" "" "write: write to another user." "" write(1)
.xx "" "" "write, writev: write on a file." "" write(2)
.xx "" "write," "writev: write on a file." "" write(2)
.xx "" "open: open a file for reading or" "writing, or create a new file." "" open(2)
.xx "" "utmp," "wtmp: login records." "" utmp(5)
.xx "" "" "wump: the game of hunt-the-wumpus." "" wump(6)
.xx "" "en:" "Xerox 3 Mb/s Ethernet interface." "" en(4v)
.xx "" "pup:" "Xerox PUP-I protocol family." "" pup(4f)
.xx "" "xsend," "xget, enroll: secret mail." "" xsend(1)
.xx "" "/bit: bit set, clear, test routines .sp 1 and, or," "xor, not \- bitwise functions .sp 1 rshift, lshift/" "" bit(3f)
.xx "" "" "xsend, xget, enroll: secret mail." "" xsend(1)
.xx "shared strings." "" "xstr: extract strings from C programs to implement" "" xstr(1)
.xx "" "j0, j1, jn," "y0, y1, yn: bessel functions." "" j0(3M)
.xx "" "j0, j1, jn, y0," "y1, yn: bessel functions." "" j0(3M)
.xx "" "eyacc: modified" "yacc allowing much improved error recovery." "" eyacc(1)
.xx "" "" "yacc: yet another compiler-compiler." "" yacc(1)
.xx "" "" "yes: be repetitively affirmative." "" yes(1)
.xx "" "j0, j1, jn, y0, y1," "yn: bessel functions." "" j0(3M)
.xx "" "leave: remind you when" "you have to leave." "" leave(1)
.xx "" "leave: remind" "you when you have to leave." "" leave(1)
.xx "" "" "zork: the game of dungeon." "" zork(6)
