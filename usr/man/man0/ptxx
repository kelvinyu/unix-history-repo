.xx "" "" "@: arithmetic on shell variables." "" csh(1)
.xx "" "l3tol, ltol3: convert between" "3-byte integers and long integers." "" l3tol(3)
.xx "" "diff3:" "3-way differential file comparison." "" diff3(1)
.xx "" ".UC" "4 iostat: report I/O statistics." "" iostat(1)
.xx "" "tk: paginator for the Tektronix" "4014." "" tk(1)
.xx "" "trman: translate version" "6 manual macros to version 7 macros." "" trman(1)
.xx "" "trman: translate version 6 manual macros to version" "7 macros." "" trman(1)
.xx "" "up: emulex sc21/ampex" "9300 UNIBUS moving head disk." "" up(4)
.xx "" "" "aardvark: yet another exploration game." "" aardvark(6)
.xx "" "" "abort: generate a fault." "" abort(3)
.xx "" "vtimes: get information" "about resource utilization." "" vtimes(2v)
.xx "" "fstab: static information" "about the filesystems." "" fstab(5)
.xx "" "learn: computer aided instruction" "about UNIX." "" learn(1)
.xx "" "vfontinfo: inspect and print out information" "about unix fonts." "" vfontinfo(1)
.xx "" "" "abs: integer absolute value." "" abs(3)
.xx "" "abs: integer" "absolute value." "" abs(3)
.xx "" "fabs, floor, ceil:" "absolute value, floor, ceiling functions." "" floor(3M)
.xx "" "" "ac: login accounting." "" ac(8)
.xx "" "" "access: determine accessibility of file." "" access(2)
.xx "" "access: determine" "accessibility of file." "" access(2)
.xx "" "ac: login" "accounting." "" ac(8)
.xx "" "sa, accton: system" "accounting." "" sa(8)
.xx "" "acct: execution" "accounting file." "" acct(5)
.xx "" "vpac: print raster printer/ploter" "accounting information." "" vpac(8)
.xx "" "acct: turn" "accounting on or off." "" acct(2)
.xx "" "" "acct: execution accounting file." "" acct(5)
.xx "" "" "acct: turn accounting on or off." "" acct(2)
.xx "" "sa," "accton: system accounting." "" sa(8)
.xx "" "sin, cos, tan, asin," "acos, atan, atan2: trigonometric functions." "" sin(3M)
.xx "" "rv: Racal/Vadic" "ACU interface." "" rv(4)
.xx "" "fortune: print a random, hopefully interesting," "adage." "" fortune(6)
.xx "" "" "adb: debugger." "" adb(1)
.xx "" "vswapon:" "add a swap device for interleaved paging/swapping." "" vswapon(2v)
.xx "" "adduser: procedure for" "adding new users." "" adduser(8)
.xx "" "swapon: specify" "additional device for paging and swapping." "" swapon(8)
.xx "" "" "adduser: procedure for adding new users." "" adduser(8)
.xx "" "" "adventure: an exploration game." "" adventure(6)
.xx "" "vadvise: give" "advice to paging system." "" vadvise(2v)
.xx "" "yes: be repetitively" "affirmative." "" yes(1)
.xx "" "basename: strip filename" "affixes." "" basename(1)
.xx "" "learn: computer" "aided instruction about UNIX." "" learn(1)
.xx "" "plot: openpl et" "al.: graphics interface." "" plot(3x)
.xx "" "" "alarm: schedule signal after specified time." "" alarm(2)
.xx "" "" "alias: shell macros." "" csh(1)
.xx "" "unalias: remove" "aliases." "" csh(1)
.xx "" "" "aliases: aliases file for delivermail." "" aliases(5)
.xx "" "which: locate a program file including" "aliases and paths (\fIcsh\fR only)." "" which(1)
.xx "" "newaliases: rebuild the data base for the mail" "aliases file." "" newaliases(1)
.xx "" "aliases:" "aliases file for delivermail." "" aliases(5)
.xx "" "valloc:" "aligned memory allocator." "" valloc(3)
.xx "" "brk, sbrk, break: change core" "allocation." "" brk(2)
.xx "" "malloc, free, realloc, calloc: main memory" "allocator." "" malloc(3)
.xx "" "valloc: aligned memory" "allocator." "" valloc(3)
.xx "" "eyacc: modified yacc" "allowing much improved error recovery." "" eyacc(1)
.xx "" "limit:" "alter per-process resource limitations." "" csh(1)
.xx "" "renice:" "alter priority of running process by changing nice." "" renice(8)
.xx "" "else:" "alternative commands." "" csh(1)
.xx "" "lex: generator of lexical" "analysis programs." "" lex(1)
.xx "" "error:" "analyze and disperse compiler error messages." "" error(1)
.xx "" "style:" "analyze surface characteristics of a document." "" style(1)
.xx "" "" "analyze: Virtual UNIX postmortem crash analyzer." "" analyze(8)
.xx "" "analyze: Virtual UNIX postmortem crash" "analyzer." "" analyze(8)
.xx "" "bcd: convert to" "antique media." "" bcd(6)
.xx "" "" "a.out: assembler and link editor output." "" a.out(5)
.xx "" "" "apl: an apl interpreter." "" apl(1)
.xx "" "apl: an" "apl interpreter." "" apl(1)
.xx "" "" "apropos: locate commands by keyword lookup." "" apropos(1)
.xx "" "" "ar: archive and library maintainer." "" ar(1)
.xx "" "" "ar: archive (library) file format." "" ar(5)
.xx "" "number: convert" "Arabic numerals to English." "" number(6)
.xx "" "delivermail: deliver mail to" "arbitrary people." "" delivermail(8)
.xx "" "bc:" "arbitrary-precision arithmetic language." "" bc(1)
.xx "" "tp: manipulate tape" "archive." "" tp(1)
.xx "" "ar:" "archive and library maintainer." "" ar(1)
.xx "" "ar:" "archive (library) file format." "" ar(5)
.xx "" "tar: tape" "archiver." "" tar(1)
.xx "" "arff, flcopy:" "archiver and copier for floppy." "" arff(8)
.xx "" "arcv: convert" "archives to new format." "" arcv(8)
.xx "" "ranlib: convert" "archives to random libraries." "" ranlib(1)
.xx "" "" "arcv: convert archives to new format." "" arcv(8)
.xx "" "w: who is on and what they" "are doing." "" w(1)
.xx "" "users: compact list of users who" "are on the system." "" users(1)
.xx "" "" "arff, flcopy: archiver and copier for floppy." "" arff(8)
.xx "" "glob: filename expand" "argument list." "" csh(1)
.xx "" "shift: manipulate" "argument list." "" csh(1)
.xx "" "varargs: variable" "argument list." "" varargs(3)
.xx "" "echo: echo" "arguments." "" csh(1)
.xx "" "echo: echo" "arguments." "" echo(1)
.xx "" "expr: evaluate" "arguments as an expression." "" expr(1)
.xx "" "getarg, iargc: command" "arguments to Fortran." "" getarg(3f)
.xx "" "bc: arbitrary-precision" "arithmetic language." "" bc(1)
.xx "" "@:" "arithmetic on shell variables." "" csh(1)
.xx "" "" "arithmetic: provide drill in number facts." "" arithmetic(6)
.xx "" "biff: be notified if mail" "arrives and who it is from." "" biff(1)
.xx "" "expr: evaluate arguments" "as an expression." "" expr(1)
.xx "" "" "as: assembler." "" as(1)
.xx "" "gmtime, asctime, timezone: convert date and time to" "ASCII." "ctime, localtime," ctime(3)
.xx "" "ascii: map of" "ASCII character set." "" ascii(7)
.xx "" "" "ascii: map of ASCII character set." "" ascii(7)
.xx "" "atof, atoi, atol: convert" "ASCII to numbers." "" atof(3)
.xx "" "ctime, localtime, gmtime," "asctime, timezone: convert date and time to ASCII." "" ctime(3)
.xx "" "sin, cos, tan," "asin, acos, atan, atan2: trigonometric functions." "" sin(3M)
.xx "" "as:" "assembler." "" as(1)
.xx "" "a.out:" "assembler and link editor output." "" a.out(5)
.xx "" "" "assert: program verification." "" assert(3x)
.xx "" "setbuf:" "assign buffering to a stream." "" setbuf(3S)
.xx "" "kl: KL-11 or DL-11" "asynchronous interface." "" kl(4)
.xx "" "at: execute commands" "at a later time." "" at(1)
.xx "" "" "at: execute commands at a later time." "" at(1)
.xx "" "nice, nohup: run a command" "at low priority (\fIsh\fR only)." "" nice(1)
.xx "" "sin, cos, tan, asin, acos," "atan, atan2: trigonometric functions." "" sin(3M)
.xx "" "sin, cos, tan, asin, acos, atan," "atan2: trigonometric functions." "" sin(3M)
.xx "" "" "atof, atoi, atol: convert ASCII to numbers." "" atof(3)
.xx "" "atof," "atoi, atol: convert ASCII to numbers." "" atof(3)
.xx "" "atof, atoi," "atol: convert ASCII to numbers." "" atof(3)
.xx "" "rc: command script for" "auto-reboot and daemons." "" rc(8)
.xx "" "wait:" "await completion of process." "" wait(1)
.xx "" "" "awk: pattern scanning and processing language." "" awk(1)
.xx "" "" "backgammon: the game." "" backgammon(6)
.xx "" "bg: place job in" "background." "" csh(1)
.xx "" "wait: wait for" "background processes to complete." "" csh(1)
.xx "" "banner: print large" "banner on printer." "" banner(6)
.xx "" "" "banner: print large banner on printer." "" banner(6)
.xx "" "termcap: terminal capability data" "base." "" termcap(5)
.xx "" "newaliases: rebuild the data" "base for the mail aliases file." "" newaliases(1)
.xx "" "ttytype: data" "base of terminal types by port." "" ttytype(5)
.xx "" "fetch, store, delete, firstkey, nextkey: data" "base subroutines." "dbminit," dbm(3x)
.xx "" "vi: screen oriented (visual) display editor" "based on ex." "" vi(1)
.xx "" "" "basename: strip filename affixes." "" basename(1)
.xx "" "" "bc: arbitrary-precision arithmetic language." "" bc(1)
.xx "" "" "bcd: convert to antique media." "" bcd(6)
.xx "" "biff:" "be notified if mail arrives and who it is from." "" biff(1)
.xx "" "yes:" "be repetitively affirmative." "" yes(1)
.xx "" "cb: C program" "beautifier." "" cb(1)
.xx "" "uptime: show how long system has" "been up." "" uptime(1)
.xx "" "va:" "Benson-Varian interface." "" va(4)
.xx "" "vfont: font formats for the" "Benson-Varian or Versatec." "" vfont(5)
.xx "" "j0, j1, jn, y0, y1, yn:" "bessel functions." "" j0(3M)
.xx "" "" "bg: place job in background." "" csh(1)
.xx "from." "" "biff: be notified if mail arrives and who it is" "" biff(1)
.xx "" "whereis: locate source," "binary, and or manual for program." "" whereis(1)
.xx "" "find the printable strings in a object, or other" "binary, file." "strings:" strings(1)
.xx "" "uuencode,uudecode: encode/decode a" "binary file for tranmission via mail." "" uuencode(1C)
.xx "" "fread, fwrite: buffered" "binary input/output." "" fread(3S)
.xx "" "strip: remove symbols and relocation" "bits." "" strip(1)
.xx "communication." "" "bk: line discipline for machine-machine" "" bk(4)
.xx "" "sync: update the super" "block." "" sync(8)
.xx "" "update: periodically update the super" "block." "" update(8)
.xx "" "sum: sum and count" "blocks in a file." "" sum(1)
.xx "" "boggle: play the game of" "boggle." "" boggle(6)
.xx "" "" "boggle: play the game of boggle." "" boggle(6)
.xx "" "ching, fortune: the" "book of changes and other cookies." "" ching(6)
.xx "" "reboot: UNIX" "bootstrapping procedures." "" reboot(8)
.xx "" "mille: play Mille" "Bournes." "" mille(6)
.xx "" "switch: multi-way command" "branch." "" csh(1)
.xx "" "brk, sbrk," "break: change core allocation." "" brk(2)
.xx "login,/" "sh, for, case, if, while, \fB:\fP, \fB.\fP," "break, continue, cd, eval, exec, exit, export," "" sh(1)
.xx "" "" "break: exit while/foreach loop." "" csh(1)
.xx "" "" "breaksw: exit from switch." "" csh(1)
.xx "" "fg:" "bring job into foreground." "" csh(1)
.xx "" "" "brk, sbrk, break: change core allocation." "" brk(2)
.xx "" "fread, fwrite:" "buffered binary input/output." "" fread(3S)
.xx "" "stdio: standard" "buffered input/output package." "" stdio(3S)
.xx "" "setbuf: assign" "buffering to a stream." "" setbuf(3S)
.xx "" "mknod:" "build special file." "" mknod(8)
.xx "" "renice: alter priority of running process" "by changing nice." "" renice(8)
.xx "" "apropos: locate commands" "by keyword lookup." "" apropos(1)
.xx "" "man: find manual information" "by keywords; print out the manual." "" man(1)
.xx "" "mkstr: create an error message file" "by massaging C source." "" mkstr(1)
.xx "" "ttytype: data base of terminal types" "by port." "" ttytype(5)
.xx "" "swab: swap" "bytes." "" swab(3)
.xx "" "cc:" "C compiler." "" cc(1)
.xx "" "cb:" "C program beautifier." "" cb(1)
.xx "" "lint: a" "C program verifier." "" lint(1)
.xx "" "vgrind: grind nice listings of" "C programs." "" vgrind(1)
.xx "" "xstr: extract strings from" "C programs to implement shared strings." "" xstr(1)
.xx "" "mkstr: create an error message file by massaging" "C source." "" mkstr(1)
.xx "" "hypot," "cabs: Euclidean distance." "" hypot(3M)
.xx "" "" "cal: print calendar." "" cal(1)
.xx "" "dc: desk" "calculator." "" dc(1)
.xx "" "cal: print" "calendar." "" cal(1)
.xx "" "" "calendar: reminder service." "" calendar(1)
.xx "" "syscall: indirect system" "call." "" syscall(2)
.xx "" "" "call: ring a telephone." "" call(1C)
.xx "" "cu:" "call UNIX." "" cu(1C)
.xx "" "malloc, free, realloc," "calloc: main memory allocator." "" malloc(3)
.xx "" "intro, errno: introduction to system" "calls and error numbers." "" intro(2)
.xx "" "termcap: terminal" "capability data base." "" termcap(5)
.xx "" "cribbage: the" "card game cribbage." "" cribbage(6)
.xx "cd, eval, exec, exit, export, login,/" "sh, for," "case, if, while, \fB:\fP, \fB.\fP, break, continue," "" sh(1)
.xx "" "" "case: selector in switch." "" csh(1)
.xx "" "" "cat: catenate and print." "" cat(1)
.xx "" "catman: create the" "cat files for the manual." "" catman(8)
.xx "" "uncompact, ccat: compress and uncompress files, and" "cat them." "compact," compact(1)
.xx "" "signal:" "catch or ignore signals." "" signal(2)
.xx "" "sigsys:" "catch or ignore signals." "" sigsys(2j)
.xx "" "default:" "catchall clause in switch." "" csh(1)
.xx "" "cat:" "catenate and print." "" cat(1)
.xx "" "" "catman: create the cat files for the manual." "" catman(8)
.xx "" "" "cb: C program beautifier." "" cb(1)
.xx "" "" "cc: C compiler." "" cc(1)
.xx "" "compact, uncompact," "ccat: compress and uncompress files, and cat them." "" compact(1)
.xx "" "" "cd: change directory." "" csh(1)
.xx "" "" "cd: change working directory." "" cd(1)
.xx "" "/case, if, while, \fB:\fP, \fB.\fP, break, continue," "cd, eval, exec, exit, export, login, newgrp, read,/" "" sh(1)
.xx "" "fabs, floor," "ceil: absolute value, floor, ceiling functions." "" floor(3M)
.xx "" "fabs, floor, ceil: absolute value, floor," "ceiling functions." "" floor(3M)
.xx "" "brk, sbrk, break:" "change core allocation." "" brk(2)
.xx "" "chdir:" "change current working directory." "" chdir(2)
.xx "" "chsh:" "change default login shell." "" chsh(1)
.xx "" "cd:" "change directory." "" csh(1)
.xx "" "chdir:" "change directory." "" csh(1)
.xx "" "chfn:" "change full name of user." "" chfn(1)
.xx "" "passwd:" "change login password." "" passwd(1)
.xx "" "chmod:" "change mode." "" chmod(1)
.xx "" "chmod:" "change mode of file." "" chmod(2)
.xx "" "umask:" "change or display file creation mask." "" csh(1)
.xx "" "chown:" "change owner and group of a file." "" chown(2)
.xx "" "chown, chgrp:" "change owner or group." "" chown(8)
.xx "" "set:" "change value of shell variable." "" csh(1)
.xx "" "cd:" "change working directory." "" cd(1)
.xx "" "ching, fortune: the book of" "changes and other cookies." "" ching(6)
.xx "" "renice: alter priority of running process by" "changing nice." "" renice(8)
.xx "" "pipe: create an interprocess" "channel." "" pipe(2)
.xx "" "ungetc: push" "character back into input stream." "" ungetc(3S)
.xx "" "isspace, ispunct, isprint, iscntrl, isascii:" "character classification." "/isdigit, isalnum," ctype(3)
.xx "" "eqnchar: special" "character definitions for eqn." "" eqnchar(7)
.xx "" "getc, getchar, fgetc, getw: get" "character or word from stream." "" getc(3S)
.xx "" "putc, putchar, fputc, putw: put" "character or word on a stream." "" putc(3S)
.xx "" "ascii: map of ASCII" "character set." "" ascii(7)
.xx "" "style: analyze surface" "characteristics of a document." "" style(1)
.xx "" "tr: translate" "characters." "" tr(1)
.xx "" "snake, snscore: display" "chase game." "" snake(6)
.xx "" "" "chdir: change current working directory." "" chdir(2)
.xx "" "" "chdir: change directory." "" csh(1)
.xx "" "dcheck: file system directory consistency" "check." "" dcheck(8)
.xx "" "icheck: file system storage consistency" "check." "" icheck(8)
.xx "" "fsck: file system consistency" "check and interactive repair." "" fsck(8)
.xx "" "checknr:" "check nroff/troff files." "" checknr(1)
.xx "" "eqn, neqn," "checkeq: typeset mathematics." "" eqn(1)
.xx "" "" "checknr: check nroff/troff files." "" checknr(1)
.xx "" "chess: the game of" "chess." "" chess(6)
.xx "" "" "chess: the game of chess." "" chess(6)
.xx "" "" "chfn: change full name of user." "" chfn(1)
.xx "" "chown," "chgrp: change owner or group." "" chown(8)
.xx "cookies." "" "ching, fortune: the book of changes and other" "" ching(6)
.xx "" "" "chmod: change mode." "" chmod(1)
.xx "" "" "chmod: change mode of file." "" chmod(2)
.xx "" "" "chown: change owner and group of a file." "" chown(2)
.xx "" "" "chown, chgrp: change owner or group." "" chown(8)
.xx "" "" "chsh: change default login shell." "" chsh(1)
.xx "" "cifplot:" "CIF interpreter and plotter." "" cifplot(1)
.xx "" "" "cifplot: CIF interpreter and plotter." "" cifplot(1)
.xx "" "ispunct, isprint, iscntrl, isascii: character" "classification." "/isdigit, isalnum, isspace," ctype(3)
.xx "" "default: catchall" "clause in switch." "" csh(1)
.xx "" "uuclean: uucp spool directory" "clean-up." "" uuclean(1C)
.xx "" "" "clear: clear terminal screen." "" clear(1)
.xx "" "clri:" "clear i-node." "" clri(8)
.xx "" "clear:" "clear terminal screen." "" clear(1)
.xx "" "feof, ferror," "clearerr, fileno: stream status inquiries." "" ferror(3S)
.xx "" "csh: a shell (command interpreter) with" "C-like syntax." "" csh(1)
.xx "" "cron:" "clock daemon." "" cron(8)
.xx "" "close:" "close a file." "" close(2)
.xx "" "" "close: close a file." "" close(2)
.xx "" "fclose, fflush:" "close or flush a stream." "" fclose(3S)
.xx "" "" "clri: clear i-node." "" clri(8)
.xx "" "" "cmp: compare two files." "" cmp(1)
.xx "" "pi: Pascal interpreter" "code translator." "" pi(1)
.xx "" "" "col: filter reverse line feeds." "" col(1)
.xx "" "" "colcrt: filter nroff output for CRT previewing." "" colcrt(1)
.xx "log." "dmesg:" "collect system diagnostic messages to form error" "" dmesg(8)
.xx "" "" "colrm: remove columns from a file." "" colrm(1)
.xx "" "colrm: remove" "columns from a file." "" colrm(1)
.xx "files." "" "comm: select or reject lines common to two sorted" "" comm(1)
.xx "" "exec: overlay shell with specified" "command." "" csh(1)
.xx "" "time: time" "command." "" csh(1)
.xx "" "system: issue a shell" "command." "" system(3)
.xx "" "test: condition" "command." "" test(1)
.xx "" "time: time a" "command." "" time(1)
.xx "" "getarg, iargc:" "command arguments to Fortran." "" getarg(3f)
.xx "" "nice, nohup: run a" "command at low priority (\fIsh\fR only)." "" nice(1)
.xx "" "switch: multi-way" "command branch." "" csh(1)
.xx "" "uux: unix to unix" "command execution." "" uux(1C)
.xx "" "netrm: remove a" "command from the network queue." "" netrm(1)
.xx "" "rehash: recompute" "command hash table." "" csh(1)
.xx "" "unhash: discard" "command hash table." "" csh(1)
.xx "" "hashstat: print" "command hashing statistics." "" csh(1)
.xx "" "nohup: run" "command immune to hangups." "" csh(1)
.xx "" "csh: a shell" "(command interpreter) with C-like syntax." "" csh(1)
.xx "" "whatis: describe what a" "command is." "" whatis(1)
.xx "" "readonly, set, shift, times, trap, umask, wait:" "command language." "/export, login, newgrp, read," sh(1)
.xx "" "net: execute a" "command on a remote machine." "" net(1)
.xx "" "repeat: execute" "command repeatedly." "" csh(1)
.xx "" "rc:" "command script for auto-reboot and daemons." "" rc(8)
.xx "" "onintr: process interrupts in" "command scripts." "" csh(1)
.xx "" "goto:" "command transfer." "" csh(1)
.xx "" "else: alternative" "commands." "" csh(1)
.xx "" "intro: introduction to" "commands." "" intro(1)
.xx "" "at: execute" "commands at a later time." "" at(1)
.xx "" "apropos: locate" "commands by keyword lookup." "" apropos(1)
.xx "" "while: repeat" "commands conditionally." "" csh(1)
.xx "" "lastcomm: show last" "commands executed in reverse order." "" lastcomm(1)
.xx "" "source: read" "commands from file." "" csh(1)
.xx "" "comm: select or reject lines" "common to two sorted files." "" comm(1)
.xx "" "bk: line discipline for machine-machine" "communication." "" bk(4)
.xx "" "dh: DH-11" "communications multiplexer." "" dh(4)
.xx "" "dz: DZ-11" "communications multiplexer." "" dz(4)
.xx "" "users:" "compact list of users who are on the system." "" users(1)
.xx "files, and cat them." "" "compact, uncompact, ccat: compress and uncompress" "" compact(1)
.xx "" "diff: differential file and directory" "comparator." "" diff(1)
.xx "" "cmp:" "compare two files." "" cmp(1)
.xx "" "diff3: 3-way differential file" "comparison." "" diff3(1)
.xx "" "uudiff: directory" "comparison between machines." "" uudiff(1C)
.xx "" "liszt:" "compile a Franz Lisp program." "" liszt(1)
.xx "" "cc: C" "compiler." "" cc(1)
.xx "" "f77: Fortran 77" "compiler." "" f77(1)
.xx "" "pc: Pascal" "compiler." "" pc(1)
.xx "" "error: analyze and disperse" "compiler error messages." "" error(1)
.xx "" "yacc: yet another" "compiler-compiler." "" yacc(1)
.xx "" "wait: wait for background processes to" "complete." "" csh(1)
.xx "" "wait: await" "completion of process." "" wait(1)
.xx "" "compact, uncompact, ccat:" "compress and uncompress files, and cat them." "" compact(1)
.xx "" "learn:" "computer aided instruction about UNIX." "" learn(1)
.xx "" "test:" "condition command." "" test(1)
.xx "" "endif: terminate" "conditional." "" csh(1)
.xx "" "if:" "conditional statement." "" csh(1)
.xx "" "while: repeat commands" "conditionally." "" csh(1)
.xx "" "" "cons: VAX-11 console interface." "" cons(4)
.xx "" "dcheck: file system directory" "consistency check." "" dcheck(8)
.xx "" "icheck: file system storage" "consistency check." "" icheck(8)
.xx "" "fsck: file system" "consistency check and interactive repair." "" fsck(8)
.xx "" "cons: VAX-11" "console interface." "" cons(4)
.xx "" "show what versions of object modules were used to" "construct a file." "what:" what(1)
.xx "" "mkfs:" "construct a file system." "" mkfs(8)
.xx "" "deroff: remove nroff, troff, tbl and eqn" "constructs." "" deroff(1)
.xx "" "vlimit: control maximum system resource" "consumption." "" vlimit(2v)
.xx "" "ls: list" "contents of directory." "" ls(1)
.xx "" "netq: print" "contents of network queue." "" netq(1)
.xx "" "sh, for, case, if, while, \fB:\fP, \fB.\fP, break," "continue, cd, eval, exec, exit, export, login,/" "" sh(1)
.xx "" "" "continue: cycle in loop." "" csh(1)
.xx "" "ioctl, stty, gtty:" "control device." "" ioctl(2)
.xx "" "jobs: summary of job" "control facilities." "" jobs(3j)
.xx "" "init: process" "control initialization." "" init(8)
.xx "" "vlimit:" "control maximum system resource consumption." "" vlimit(2v)
.xx "" "vhangup: virtually ``hangup'' the current" "control terminal." "" vhangup(2v)
.xx "" "terminals:" "conventional names." "" term(7)
.xx "" "ecvt, fcvt, gcvt: output" "conversion." "" ecvt(3)
.xx "" "printf, fprintf, sprintf: formatted output" "conversion." "" printf(3S)
.xx "" "scanf, fscanf, sscanf: formatted input" "conversion." "" scanf(3S)
.xx "" "units:" "conversion program." "" units(1)
.xx "" "dd:" "convert and copy a file." "" dd(1)
.xx "" "number:" "convert Arabic numerals to English." "" number(6)
.xx "" "arcv:" "convert archives to new format." "" arcv(8)
.xx "" "ranlib:" "convert archives to random libraries." "" ranlib(1)
.xx "" "atof, atoi, atol:" "convert ASCII to numbers." "" atof(3)
.xx "" "l3tol, ltol3:" "convert between 3-byte integers and long integers." "" l3tol(3)
.xx "" "ctime, localtime, gmtime, asctime, timezone:" "convert date and time to ASCII." "" ctime(3)
.xx "" "bcd:" "convert to antique media." "" bcd(6)
.xx "" "ching, fortune: the book of changes and other" "cookies." "" ching(6)
.xx "" "arff, flcopy: archiver and" "copier for floppy." "" arff(8)
.xx "" "cp:" "copy." "" cp(1)
.xx "" "uucp, uulog: unix to unix" "copy." "" uucp(1C)
.xx "" "dd: convert and" "copy a file." "" dd(1)
.xx "" "netcp: remote" "copy of files through the net." "" netcp(1)
.xx "" "brk, sbrk, break: change" "core allocation." "" brk(2)
.xx "" "" "core: format of memory image file." "" core(5)
.xx "functions." "sin," "cos, tan, asin, acos, atan, atan2: trigonometric" "" sin(3M)
.xx "" "sinh," "cosh, tanh: hyperbolic functions." "" sinh(3M)
.xx "" "wc: word" "count." "" wc(1)
.xx "" "sum: sum and" "count blocks in a file." "" sum(1)
.xx "" "" "cp: copy." "" cp(1)
.xx "" "analyze: Virtual UNIX postmortem" "crash analyzer." "" analyze(8)
.xx "" "" "crash: what happens when the system crashes." "" crash(8)
.xx "" "crash: what happens when the system" "crashes." "" crash(8)
.xx "" "" "creat: create a new file." "" creat(2)
.xx "" "creat:" "create a new file." "" creat(2)
.xx "" "ctags:" "create a tags file." "" ctags(1)
.xx "" "mkstr:" "create an error message file by massaging C source." "" mkstr(1)
.xx "" "pipe:" "create an interprocess channel." "" pipe(2)
.xx "" "mpx:" "create and manipulate multiplexed files." "" mpx(2)
.xx "" "catman:" "create the cat files for the manual." "" catman(8)
.xx "" "umask: change or display file" "creation mask." "" csh(1)
.xx "" "umask: set file" "creation mode mask." "" umask(2)
.xx "" "cribbage: the card game" "cribbage." "" cribbage(6)
.xx "" "" "cribbage: the card game cribbage." "" cribbage(6)
.xx "" "" "cron: clock daemon." "" cron(8)
.xx "" "lxref: lisp" "cross reference program." "" lxref(1)
.xx "" "pxref: Pascal" "cross-reference program." "" pxref(1)
.xx "" "colcrt: filter nroff output for" "CRT previewing." "" colcrt(1)
.xx "" "more, page: file perusal filter for" "crt viewing." "" more(1)
.xx "" "" "crypt: encode/decode." "" crypt(1)
.xx "" "" "crypt, setkey, encrypt: DES encryption." "" crypt(3)
.xx "syntax." "" "csh: a shell (command interpreter) with C-like" "" csh(1)
.xx "" "newcsh: description of new" "csh features (over oldcsh)." "" newcsh(1)
.xx "" "" "ctags: create a tags file." "" ctags(1)
.xx "convert date and time to ASCII." "" "ctime, localtime, gmtime, asctime, timezone:" "" ctime(3)
.xx "" "" "cu: call UNIX." "" cu(1C)
.xx "" "vhangup: virtually ``hangup'' the" "current control terminal." "" vhangup(2v)
.xx "" "jobs: print" "current job list." "" csh(1)
.xx "" "whoami: print effective" "current user id." "" whoami(1)
.xx "" "chdir: change" "current working directory." "" chdir(2)
.xx "motion." "" "curses: screen functions with ``optimal'' cursor" "" curses(3)
.xx "" "curses: screen functions with ``optimal''" "cursor motion." "" curses(3)
.xx "" "spline: interpolate smooth" "curve." "" spline(1G)
.xx "" "continue:" "cycle in loop." "" csh(1)
.xx "" "cron: clock" "daemon." "" cron(8)
.xx "" "rc: command script for auto-reboot and" "daemons." "" rc(8)
.xx "" "eval: re-evaluate shell" "data." "" csh(1)
.xx "" "prof: display profile" "data." "" prof(1)
.xx "" "ttys: terminal initialization" "data." "" ttys(5)
.xx "" "termcap: terminal capability" "data base." "" termcap(5)
.xx "" "newaliases: rebuild the" "data base for the mail aliases file." "" newaliases(1)
.xx "" "ttytype:" "data base of terminal types by port." "" ttytype(5)
.xx "" "dbminit, fetch, store, delete, firstkey, nextkey:" "data base subroutines." "" dbm(3x)
.xx "" "null:" "data sink." "" null(4)
.xx "" "types: primitive system" "data types." "" types(5)
.xx "" "join: relational" "database operator." "" join(1)
.xx "" "date: print and set the" "date." "" date(1)
.xx "" "time, ftime: get" "date and time." "" time(2)
.xx "" "localtime, gmtime, asctime, timezone: convert" "date and time to ASCII." "ctime," ctime(3)
.xx "" "touch: update" "date last modified of a file." "" touch(1)
.xx "" "" "date: print and set the date." "" date(1)
.xx "data base subroutines." "" "dbminit, fetch, store, delete, firstkey, nextkey:" "" dbm(3x)
.xx "" "" "dc: desk calculator." "" dc(1)
.xx "" "" "dcheck: file system directory consistency check." "" dcheck(8)
.xx "" "" "dd: convert and copy a file." "" dd(1)
.xx "" "dump," "ddate: incremental dump format." "" dump(5)
.xx "" "adb:" "debugger." "" adb(1)
.xx "" "sdb: symbolic" "debugger." "" sdb(1)
.xx "" "tp:" "DEC/mag tape formats." "" tp(5)
.xx "" "" "default: catchall clause in switch." "" csh(1)
.xx "" "chsh: change" "default login shell." "" chsh(1)
.xx "" "eqnchar: special character" "definitions for eqn." "" eqnchar(7)
.xx "" "dbminit, fetch, store," "delete, firstkey, nextkey: data base subroutines." "" dbm(3x)
.xx "" "delivermail:" "deliver mail to arbitrary people." "" delivermail(8)
.xx "" "tail:" "deliver the last part of a file." "" tail(1)
.xx "" "aliases: aliases file for" "delivermail." "" aliases(5)
.xx "" "" "delivermail: deliver mail to arbitrary people." "" delivermail(8)
.xx "" "mesg: permit or" "deny messages." "" mesg(1)
.xx "constructs." "" "deroff: remove nroff, troff, tbl and eqn" "" deroff(1)
.xx "" "crypt, setkey, encrypt:" "DES encryption." "" crypt(3)
.xx "" "whatis:" "describe what a command is." "" whatis(1)
.xx "" "newcsh:" "description of new csh features (over oldcsh)." "" newcsh(1)
.xx "" "dup, dup2: duplicate an open file" "descriptor." "" dup(2)
.xx "" "getfsfile, setfsent, endfsent: get file system" "descriptor file entry." "getfsent, getfsspec," getfsent(3)
.xx "" "dc:" "desk calculator." "" dc(1)
.xx "" "access:" "determine accessibility of file." "" access(2)
.xx "" "file:" "determine file type." "" file(1)
.xx "" "drum: paging" "device." "" drum(4)
.xx "" "fold: fold long lines for finite width output" "device." "" fold(1)
.xx "" "ioctl, stty, gtty: control" "device." "" ioctl(2)
.xx "" "vswapon: add a swap" "device for interleaved paging/swapping." "" vswapon(2v)
.xx "" "swapon: specify additional" "device for paging and swapping." "" swapon(8)
.xx "" "" "df: disk free." "" df(1)
.xx "" "" "dh: DH-11 communications multiplexer." "" dh(4)
.xx "" "dh:" "DH-11 communications multiplexer." "" dh(4)
.xx "" "dmesg: collect system" "diagnostic messages to form error log." "" dmesg(8)
.xx "" "ratfor: rational Fortran" "dialect." "" ratfor(1)
.xx "" "print wordy sentences; thesaurus for" "diction." "diction,explain:" diction(1)
.xx "" "print wordy sentences; thesaurus for" "diction." "diction,explain:" explain(1)
.xx "for diction." "" "diction,explain: print wordy sentences; thesaurus" "" diction(1)
.xx "for diction." "" "diction,explain: print wordy sentences; thesaurus" "" explain(1)
.xx "" "" "diff: differential file and directory comparator." "" diff(1)
.xx "" "" "diff3: 3-way differential file comparison." "" diff3(1)
.xx "" "diff:" "differential file and directory comparator." "" diff(1)
.xx "" "diff3: 3-way" "differential file comparison." "" diff3(1)
.xx "" "" "dir: format of directories." "" dir(5)
.xx "" "dir: format of" "directories." "" dir(5)
.xx "" "cd: change working" "directory." "" cd(1)
.xx "" "chdir: change current working" "directory." "" chdir(2)
.xx "" "cd: change" "directory." "" csh(1)
.xx "" "chdir: change" "directory." "" csh(1)
.xx "" "ls: list contents of" "directory." "" ls(1)
.xx "" "mkdir: make a" "directory." "" mkdir(1)
.xx "" "uuclean: uucp spool" "directory clean-up." "" uuclean(1C)
.xx "" "diff: differential file and" "directory comparator." "" diff(1)
.xx "" "uudiff:" "directory comparison between machines." "" uudiff(1C)
.xx "" "dcheck: file system" "directory consistency check." "" dcheck(8)
.xx "" "unlink: remove" "directory entry." "" unlink(2)
.xx "" "mklost+found: make a lost+found" "directory for fsck." "" mklost+found(8)
.xx "" "pwd: working" "directory name." "" pwd(1)
.xx "" "old:" "directory of old programs." "" old(8)
.xx "" "mknod: make a" "directory or a special file." "" mknod(2)
.xx "" "popd: pop shell" "directory stack." "" csh(1)
.xx "" "pushd: push shell" "directory stack." "" csh(1)
.xx "" "unhash:" "discard command hash table." "" csh(1)
.xx "" "unset:" "discard shell variables." "" csh(1)
.xx "" "bk: line" "discipline for machine-machine communication." "" bk(4)
.xx "" "hp: RP06, RM03, RM-05 moving-head" "disk." "" hp(4)
.xx "" "up: emulex sc21/ampex 9300 UNIBUS moving head" "disk." "" up(4)
.xx "" "df:" "disk free." "" df(1)
.xx "" "du: summarize" "disk usage." "" du(1)
.xx "" "mount, umount: mount and" "dismount file system." "" mount(8)
.xx "" "error: analyze and" "disperse compiler error messages." "" error(1)
.xx "" "snake, snscore:" "display chase game." "" snake(6)
.xx "" "vi: screen oriented (visual)" "display editor based on ex." "" vi(1)
.xx "" "umask: change or" "display file creation mask." "" csh(1)
.xx "" "prof:" "display profile data." "" prof(1)
.xx "" "hypot, cabs: Euclidean" "distance." "" hypot(3M)
.xx "" "kl: KL-11 or" "DL-11 asynchronous interface." "" kl(4)
.xx "error log." "" "dmesg: collect system diagnostic messages to form" "" dmesg(8)
.xx "" "style: analyze surface characteristics of a" "document." "" style(1)
.xx "" "lookbib: find and insert literature references in" "documents." "refer," refer(1)
.xx "" "w: who is on and what they are" "doing." "" w(1)
.xx "" "graph:" "draw a graph." "" graph(1G)
.xx "" "arithmetic: provide" "drill in number facts." "" arithmetic(6)
.xx "" "rewind: rewind tape" "drive." "" rewind(1)
.xx "" "newtty: summary of the ``new'' tty" "driver." "" newtty(4)
.xx "" "tm: tm11 magnetic tape" "driver." "" tm(4)
.xx "" "" "drum: paging device." "" drum(4)
.xx "" "" "du: summarize disk usage." "" du(1)
.xx "" "dump: incremental file system" "dump." "" dump(8)
.xx "" "od: octal" "dump." "" od(1)
.xx "" "" "dump, ddate: incremental dump format." "" dump(5)
.xx "" "dump, ddate: incremental" "dump format." "" dump(5)
.xx "" "" "dump: incremental file system dump." "" dump(8)
.xx "" "dumpdir: print the names of files on a" "dump tape." "" dumpdir(8)
.xx "" "" "dumpdir: print the names of files on a dump tape." "" dumpdir(8)
.xx "" "zork: the game of" "dungeon." "" zork(6)
.xx "" "" "dup, dup2: duplicate an open file descriptor." "" dup(2)
.xx "" "dup," "dup2: duplicate an open file descriptor." "" dup(2)
.xx "" "dup, dup2:" "duplicate an open file descriptor." "" dup(2)
.xx "" "" "dz: DZ-11 communications multiplexer." "" dz(4)
.xx "" "dz:" "DZ-11 communications multiplexer." "" dz(4)
.xx "" "echo:" "echo arguments." "" csh(1)
.xx "" "echo:" "echo arguments." "" echo(1)
.xx "" "" "echo: echo arguments." "" csh(1)
.xx "" "" "echo: echo arguments." "" echo(1)
.xx "" "" "ecvt, fcvt, gcvt: output conversion." "" ecvt(3)
.xx "" "" "ed: text editor." "" ed(1)
.xx "" "end, etext," "edata: last locations in program." "" end(3)
.xx "" "ex," "edit: text editor." "" ex(1)
.xx "" "vipw:" "edit the password file with vi." "" vipw(8)
.xx "" "ed: text" "editor." "" ed(1)
.xx "" "ex, edit: text" "editor." "" ex(1)
.xx "" "ld: link" "editor." "" ld(1)
.xx "" "sed: stream" "editor." "" sed(1)
.xx "" "vi: screen oriented (visual) display" "editor based on ex." "" vi(1)
.xx "" "a.out: assembler and link" "editor output." "" a.out(5)
.xx "" "whoami: print" "effective current user id." "" whoami(1)
.xx "" "vfork: spawn new process in a virtual memory" "efficient way." "" vfork(2v)
.xx "" "" "efl: Extended Fortran Language." "" efl(1)
.xx "" "grep," "egrep, fgrep: search a file for a pattern." "" grep(1)
.xx "" "soelim:" "eliminate \&.so's from nroff input." "" soelim(1)
.xx "" "" "else: alternative commands." "" csh(1)
.xx "" "up:" "emulex sc21/ampex 9300 UNIBUS moving head disk." "" up(4)
.xx "" "uuencode: format of an" "encoded uuencode file." "" uuencode(5)
.xx "" "crypt:" "encode/decode." "" crypt(1)
.xx "mail." "uuencode,uudecode:" "encode/decode a binary file for tranmission via" "" uuencode(1C)
.xx "" "crypt, setkey," "encrypt: DES encryption." "" crypt(3)
.xx "" "crypt, setkey, encrypt: DES" "encryption." "" crypt(3)
.xx "" "makekey: generate" "encryption key." "" makekey(8)
.xx "" "" "end, etext, edata: last locations in program." "" end(3)
.xx "" "logout:" "end session." "" csh(1)
.xx "" "" "end: terminate loop." "" csh(1)
.xx "" "getfsent, getfsspec, getfsfile, setfsent," "endfsent: get file system descriptor file entry." "" getfsent(3)
.xx "" "getgrent, getgrgid, getgrnam, setgrent," "endgrent: get group file entry." "" getgrent(3)
.xx "" "" "endif: terminate conditional." "" csh(1)
.xx "" "getpwent, getpwuid, getpwnam, setpwent," "endpwent: get password file entry." "" getpwent(3)
.xx "" "" "endsw: terminate switch." "" csh(1)
.xx "" "number: convert Arabic numerals to" "English." "" number(6)
.xx "" "xsend, xget," "enroll: secret mail." "" xsend(1)
.xx "" "nlist: get" "entries from name list." "" nlist(3)
.xx "" "setfsent, endfsent: get file system descriptor file" "entry." "getfsent, getfsspec, getfsfile," getfsent(3)
.xx "" "getgrnam, setgrent, endgrent: get group file" "entry." "getgrent, getgrgid," getgrent(3)
.xx "" "getpwnam, setpwent, endpwent: get password file" "entry." "getpwent, getpwuid," getpwent(3)
.xx "" "unlink: remove directory" "entry." "" unlink(2)
.xx "" "execv, execle, execve, execlp, execvp, exec, exece," "environ: execute a file." "execl," exec(2)
.xx "" "" "environ: user environment." "" environ(5)
.xx "" "setenv: set variable in" "environment." "" csh(1)
.xx "" "environ: user" "environment." "" environ(5)
.xx "" "printenv: print out the" "environment." "" printenv(1)
.xx "" "getenv: value for" "environment name." "" getenv(3)
.xx "" "unsetenv: remove" "environment variables." "" csh(1)
.xx "" "eqnchar: special character definitions for" "eqn." "" eqnchar(7)
.xx "" "deroff: remove nroff, troff, tbl and" "eqn constructs." "" deroff(1)
.xx "" "" "eqn, neqn, checkeq: typeset mathematics." "" eqn(1)
.xx "" "" "eqnchar: special character definitions for eqn." "" eqnchar(7)
.xx "numbers." "intro," "errno: introduction to system calls and error" "" intro(2)
.xx "messages." "" "error: analyze and disperse compiler error" "" error(1)
.xx "" "dmesg: collect system diagnostic messages to form" "error log." "" dmesg(8)
.xx "" "mkstr: create an" "error message file by massaging C source." "" mkstr(1)
.xx "" "error: analyze and disperse compiler" "error messages." "" error(1)
.xx "" "perror, sys_errlist, sys_nerr: system" "error messages." "" perror(3)
.xx "" "intro, errno: introduction to system calls and" "error numbers." "" intro(2)
.xx "" "eyacc: modified yacc allowing much improved" "error recovery." "" eyacc(1)
.xx "" "spell, spellin, spellout: find spelling" "errors." "" spell(1)
.xx "" "end," "etext, edata: last locations in program." "" end(3)
.xx "" "hypot, cabs:" "Euclidean distance." "" hypot(3M)
.xx "" "/if, while, \fB:\fP, \fB.\fP, break, continue, cd," "eval, exec, exit, export, login, newgrp, read,/" "" sh(1)
.xx "" "" "eval: re-evaluate shell data." "" csh(1)
.xx "" "expr:" "evaluate arguments as an expression." "" expr(1)
.xx "" "history: print history" "event list." "" csh(1)
.xx "" "screen oriented (visual) display editor based on" "ex." "vi:" vi(1)
.xx "" "" "ex, edit: text editor." "" ex(1)
.xx "" "execl, execv, execle, execve, execlp, execvp," "exec, exece, environ: execute a file." "" exec(2)
.xx "" "/while, \fB:\fP, \fB.\fP, break, continue, cd, eval," "exec, exit, export, login, newgrp, read, readonly,/" "" sh(1)
.xx "" "" "exec: overlay shell with specified command." "" csh(1)
.xx "" "execl, execv, execle, execve, execlp, execvp, exec," "exece, environ: execute a file." "" exec(2)
.xx "exece, environ: execute a file." "" "execl, execv, execle, execve, execlp, execvp, exec," "" exec(2)
.xx "environ: execute a file." "execl, execv," "execle, execve, execlp, execvp, exec, exece," "" exec(2)
.xx "file." "execl, execv, execle, execve," "execlp, execvp, exec, exece, environ: execute a" "" exec(2)
.xx "" "sticky:" "executable files with persistent text." "" sticky(8)
.xx "" "net:" "execute a command on a remote machine." "" net(1)
.xx "" "execve, execlp, execvp, exec, exece, environ:" "execute a file." "execl, execv, execle," exec(2)
.xx "" "repeat:" "execute command repeatedly." "" csh(1)
.xx "" "at:" "execute commands at a later time." "" at(1)
.xx "" "lastcomm: show last commands" "executed in reverse order." "" lastcomm(1)
.xx "" "uux: unix to unix command" "execution." "" uux(1C)
.xx "" "acct:" "execution accounting file." "" acct(5)
.xx "" "sleep: suspend" "execution for an interval." "" sleep(1)
.xx "" "sleep: suspend" "execution for interval." "" sleep(3)
.xx "" "monitor: prepare" "execution profile." "" monitor(3)
.xx "" "pxp: Pascal" "execution profiler." "" pxp(1)
.xx "" "profil:" "execution time profile." "" profil(2)
.xx "" "pix: Pascal interpreter and" "executor." "" pix(1)
.xx "environ: execute a file." "execl," "execv, execle, execve, execlp, execvp, exec, exece," "" exec(2)
.xx "execute a file." "execl, execv, execle," "execve, execlp, execvp, exec, exece, environ:" "" exec(2)
.xx "" "execl, execv, execle, execve, execlp," "execvp, exec, exece, environ: execute a file." "" exec(2)
.xx "" "/\fB:\fP, \fB.\fP, break, continue, cd, eval, exec," "exit, export, login, newgrp, read, readonly, set,/" "" sh(1)
.xx "" "breaksw:" "exit from switch." "" csh(1)
.xx "" "" "exit: leave shell." "" csh(1)
.xx "" "" "exit: terminate process." "" exit(2)
.xx "" "break:" "exit while/foreach loop." "" csh(1)
.xx "power, square root." "" "exp, log, log10, pow, sqrt: exponential, logarithm," "" exp(3M)
.xx "" "glob: filename" "expand argument list." "" csh(1)
.xx "" "expand, unexpand:" "expand tabs to spaces, and vice versa." "" expand(1)
.xx "versa." "" "expand, unexpand: expand tabs to spaces, and vice" "" expand(1)
.xx "" "aardvark: yet another" "exploration game." "" aardvark(6)
.xx "" "adventure: an" "exploration game." "" adventure(6)
.xx "" "frexp, ldexp, modf: split into mantissa and" "exponent." "" frexp(3)
.xx "" "exp, log, log10, pow, sqrt:" "exponential, logarithm, power, square root." "" exp(3M)
.xx "" "/\fB.\fP, break, continue, cd, eval, exec, exit," "export, login, newgrp, read, readonly, set, shift,/" "" sh(1)
.xx "" "" "expr: evaluate arguments as an expression." "" expr(1)
.xx "" "expr: evaluate arguments as an" "expression." "" expr(1)
.xx "" "re_comp, re_exec: regular" "expression handler." "" regex(3)
.xx "" "efl:" "Extended Fortran Language." "" efl(1)
.xx "" "greek: graphics for" "extended TTY-37 type-box." "" greek(7)
.xx "strings." "xstr:" "extract strings from C programs to implement shared" "" xstr(1)
.xx "recovery." "" "eyacc: modified yacc allowing much improved error" "" eyacc(1)
.xx "" "" "f77: Fortran 77 compiler." "" f77(1)
.xx "functions." "" "fabs, floor, ceil: absolute value, floor, ceiling" "" floor(3M)
.xx "" "jobs: summary of job control" "facilities." "" jobs(3j)
.xx "" "arithmetic: provide drill in number" "facts." "" arithmetic(6)
.xx "" "pstat: print system" "facts." "" pstat(8)
.xx "" "true," "false: provide truth values." "" true(1)
.xx "" "abort: generate a" "fault." "" abort(3)
.xx "export, login,/" "sh, for, case, if, while, \fB:\fP," "\fB.\fP, break, continue, cd, eval, exec, exit," "" sh(1)
.xx "exit, export, login,/" "sh, for, case, if, while," "\fB:\fP, \fB.\fP, break, continue, cd, eval, exec," "" sh(1)
.xx "" "" "fclose, fflush: close or flush a stream." "" fclose(3S)
.xx "" "ecvt," "fcvt, gcvt: output conversion." "" ecvt(3)
.xx "" "fopen, freopen," "fdopen: open a stream." "" fopen(3S)
.xx "" "newcsh: description of new csh" "features (over oldcsh)." "" newcsh(1)
.xx "" "col: filter reverse line" "feeds." "" col(1)
.xx "inquiries." "" "feof, ferror, clearerr, fileno: stream status" "" ferror(3S)
.xx "" "feof," "ferror, clearerr, fileno: stream status inquiries." "" ferror(3S)
.xx "subroutines." "dbminit," "fetch, store, delete, firstkey, nextkey: data base" "" dbm(3x)
.xx "" "head: give first" "few lines." "" head(1)
.xx "" "netlog: print the last" "few lines of the network log file." "" netlog(1)
.xx "" "fclose," "fflush: close or flush a stream." "" fclose(3S)
.xx "" "" "fg: bring job into foreground." "" csh(1)
.xx "" "getc, getchar," "fgetc, getw: get character or word from stream." "" getc(3S)
.xx "" "gets," "fgets: get a string from a stream." "" gets(3S)
.xx "" "grep, egrep," "fgrep: search a file for a pattern." "" grep(1)
.xx "" "locate a program file including aliases and paths" "(\fIcsh\fR only)." "which:" which(1)
.xx "" "access: determine accessibility of" "file." "" access(2)
.xx "" "acct: execution accounting" "file." "" acct(5)
.xx "" "chmod: change mode of" "file." "" chmod(2)
.xx "" "chown: change owner and group of a" "file." "" chown(2)
.xx "" "close: close a" "file." "" close(2)
.xx "" "colrm: remove columns from a" "file." "" colrm(1)
.xx "" "core: format of memory image" "file." "" core(5)
.xx "" "creat: create a new" "file." "" creat(2)
.xx "" "source: read commands from" "file." "" csh(1)
.xx "" "ctags: create a tags" "file." "" ctags(1)
.xx "" "dd: convert and copy a" "file." "" dd(1)
.xx "" "execlp, execvp, exec, exece, environ: execute a" "file." "execl, execv, execle, execve," exec(2)
.xx "" "group: group" "file." "" group(5)
.xx "" "link: link to a" "file." "" link(2)
.xx "" "mknod: make a directory or a special" "file." "" mknod(2)
.xx "" "mknod: build special" "file." "" mknod(8)
.xx "" "netlog: print the last few lines of the network log" "file." "" netlog(1)
.xx "" "rebuild the data base for the mail aliases" "file." "newaliases:" newaliases(1)
.xx "" "passwd: password" "file." "" passwd(5)
.xx "" "pr: print" "file." "" pr(1)
.xx "" "read: read from" "file." "" read(2)
.xx "" "rev: reverse lines of a" "file." "" rev(1)
.xx "" "size: size of an object" "file." "" size(1)
.xx "" "the printable strings in a object, or other binary," "file." "strings: find" strings(1)
.xx "" "sum: sum and count blocks in a" "file." "" sum(1)
.xx "" "tail: deliver the last part of a" "file." "" tail(1)
.xx "" "touch: update date last modified of a" "file." "" touch(1)
.xx "" "uniq: report repeated lines in a" "file." "" uniq(1)
.xx "" "uuencode: format of an encoded uuencode" "file." "" uuencode(5)
.xx "" "vwrite: write (virtually) to" "file." "" vwrite(2v)
.xx "" "versions of object modules were used to construct a" "file." "what: show what" what(1)
.xx "" "write: write on a" "file." "" write(2)
.xx "" "diff: differential" "file and directory comparator." "" diff(1)
.xx "" "mkstr: create an error message" "file by massaging C source." "" mkstr(1)
.xx "" "diff3: 3-way differential" "file comparison." "" diff3(1)
.xx "" "umask: change or display" "file creation mask." "" csh(1)
.xx "" "umask: set" "file creation mode mask." "" umask(2)
.xx "" "dup, dup2: duplicate an open" "file descriptor." "" dup(2)
.xx "" "" "file: determine file type." "" file(1)
.xx "" "setfsent, endfsent: get file system descriptor" "file entry." "getfsent, getfsspec, getfsfile," getfsent(3)
.xx "" "getgrgid, getgrnam, setgrent, endgrent: get group" "file entry." "getgrent," getgrent(3)
.xx "" "getpwnam, setpwent, endpwent: get password" "file entry." "getpwent, getpwuid," getpwent(3)
.xx "" "grep, egrep, fgrep: search a" "file for a pattern." "" grep(1)
.xx "" "aliases: aliases" "file for delivermail." "" aliases(5)
.xx "" "uuencode,uudecode: encode/decode a binary" "file for tranmission via mail." "" uuencode(1C)
.xx "" "ar: archive (library)" "file format." "" ar(5)
.xx "" "see: see what a" "file has in it." "" see(1)
.xx "" "which: locate a program" "file including aliases and paths (\fIcsh\fR only)." "" which(1)
.xx "" "split: split a" "file into pieces." "" split(1)
.xx "" "mktemp: make a unique" "file name." "" mktemp(3)
.xx "" "more, page:" "file perusal filter for crt viewing." "" more(1)
.xx "" "stat, fstat: get" "file status." "" stat(2)
.xx "" "mkfs: construct a" "file system." "" mkfs(8)
.xx "" "mount, umount: mount or remove" "file system." "" mount(2)
.xx "" "mount, umount: mount and dismount" "file system." "" mount(8)
.xx "repair." "fsck:" "file system consistency check and interactive" "" fsck(8)
.xx "" "getfsspec, getfsfile, setfsent, endfsent: get" "file system descriptor file entry." "getfsent," getfsent(3)
.xx "" "dcheck:" "file system directory consistency check." "" dcheck(8)
.xx "" "dump: incremental" "file system dump." "" dump(8)
.xx "" "hier:" "file system hierarchy." "" hier(7)
.xx "" "quot: summarize" "file system ownership." "" quot(8)
.xx "" "restor: incremental" "file system restore." "" restor(8)
.xx "" "icheck:" "file system storage consistency check." "" icheck(8)
.xx "" "mtab: mounted" "file system table." "" mtab(5)
.xx "" "filsys, flblk, ino: format of" "file system volume." "" filsys(5)
.xx "" "utime: set" "file times." "" utime(2)
.xx "" "uusend: send a" "file to a remote host." "" uusend(1C)
.xx "" "file: determine" "file type." "" file(1)
.xx "" "vipw: edit the password" "file with vi." "" vipw(8)
.xx "" "basename: strip" "filename affixes." "" basename(1)
.xx "" "glob:" "filename expand argument list." "" csh(1)
.xx "" "feof, ferror, clearerr," "fileno: stream status inquiries." "" ferror(3S)
.xx "" "checknr: check nroff/troff" "files." "" checknr(1)
.xx "" "cmp: compare two" "files." "" cmp(1)
.xx "" "comm: select or reject lines common to two sorted" "files." "" comm(1)
.xx "" "find: find" "files." "" find(1)
.xx "" "mpx: create and manipulate multiplexed" "files." "" mpx(2)
.xx "" "mv: move or rename" "files." "" mv(1)
.xx "" "rm, rmdir: remove (unlink)" "files." "" rm(1)
.xx "" "sort: sort or merge" "files." "" sort(1)
.xx "" "compact, uncompact, ccat: compress and uncompress" "files, and cat them." "" compact(1)
.xx "" "catman: create the cat" "files for the manual." "" catman(8)
.xx "" "dumpdir: print the names of" "files on a dump tape." "" dumpdir(8)
.xx "" "netcp: remote copy of" "files through the net." "" netcp(1)
.xx "" "sticky: executable" "files with persistent text." "" sticky(8)
.xx "" "fstab: static information about the" "filesystems." "" fstab(5)
.xx "" "" "filsys, flblk, ino: format of file system volume." "" filsys(5)
.xx "" "more, page: file perusal" "filter for crt viewing." "" more(1)
.xx "" "colcrt:" "filter nroff output for CRT previewing." "" colcrt(1)
.xx "" "col:" "filter reverse line feeds." "" col(1)
.xx "" "plot: graphics" "filters." "" plot(1G)
.xx "" "refer, lookbib:" "find and insert literature references in documents." "" refer(1)
.xx "" "find:" "find files." "" find(1)
.xx "" "" "find: find files." "" find(1)
.xx "" "look:" "find lines in a sorted list." "" look(1)
.xx "manual." "man:" "find manual information by keywords; print out the" "" man(1)
.xx "" "ttyname, isatty, ttyslot:" "find name of a terminal." "" ttyname(3)
.xx "" "lorder:" "find ordering relation for an object library." "" lorder(1)
.xx "" "spell, spellin, spellout:" "find spelling errors." "" spell(1)
.xx "binary, file." "strings:" "find the printable strings in a object, or other" "" strings(1)
.xx "" "" "finger: user information lookup program." "" finger(1)
.xx "" "fold: fold long lines for" "finite width output device." "" fold(1)
.xx "" "head: give" "first few lines." "" head(1)
.xx "" "dbminit, fetch, store, delete," "firstkey, nextkey: data base subroutines." "" dbm(3x)
.xx "" "fish: play ``Go" "Fish''." "" fish(6)
.xx "" "" "fish: play ``Go Fish''." "" fish(6)
.xx "" "nice, nohup: run a command at low priority" "(\fIsh\fR only)." "" nice(1)
.xx "" "tee: pipe" "fitting." "" tee(1)
.xx "" "" "fl: floppy interface." "" fl(4)
.xx "" "filsys," "flblk, ino: format of file system volume." "" filsys(5)
.xx "" "arff," "flcopy: archiver and copier for floppy." "" arff(8)
.xx "functions." "fabs," "floor, ceil: absolute value, floor, ceiling" "" floor(3M)
.xx "" "fabs, floor, ceil: absolute value," "floor, ceiling functions." "" floor(3M)
.xx "" "arff, flcopy: archiver and copier for" "floppy." "" arff(8)
.xx "" "fl:" "floppy interface." "" fl(4)
.xx "" "fclose, fflush: close or" "flush a stream." "" fclose(3S)
.xx "" "" "fmt: simple text formatter." "" fmt(1)
.xx "device." "" "fold: fold long lines for finite width output" "" fold(1)
.xx "" "fold:" "fold long lines for finite width output device." "" fold(1)
.xx "" "vfont:" "font formats for the Benson-Varian or Versatec." "" vfont(5)
.xx "" "inspect and print out information about unix" "fonts." "vfontinfo:" vfontinfo(1)
.xx "" "" "fopen, freopen, fdopen: open a stream." "" fopen(3S)
.xx "continue, cd, eval, exec, exit, export, login,/" "sh," "for, case, if, while, \fB:\fP, \fB.\fP, break," "" sh(1)
.xx "" "" "foreach: loop over list of names." "" csh(1)
.xx "" "fg: bring job into" "foreground." "" csh(1)
.xx "" "" "fork: spawn new process." "" fork(2)
.xx "" "dmesg: collect system diagnostic messages to" "form error log." "" dmesg(8)
.xx "" "ar: archive (library) file" "format." "" ar(5)
.xx "" "arcv: convert archives to new" "format." "" arcv(8)
.xx "" "dump, ddate: incremental dump" "format." "" dump(5)
.xx "" "uuencode:" "format of an encoded uuencode file." "" uuencode(5)
.xx "" "dir:" "format of directories." "" dir(5)
.xx "" "filsys, flblk, ino:" "format of file system volume." "" filsys(5)
.xx "" "core:" "format of memory image file." "" core(5)
.xx "" "tbl:" "format tables for nroff or troff." "" tbl(1)
.xx "" "tp: DEC/mag tape" "formats." "" tp(5)
.xx "" "vfont: font" "formats for the Benson-Varian or Versatec." "" vfont(5)
.xx "" "scanf, fscanf, sscanf:" "formatted input conversion." "" scanf(3S)
.xx "" "printf, fprintf, sprintf:" "formatted output conversion." "" printf(3S)
.xx "" "fmt: simple text" "formatter." "" fmt(1)
.xx "" "troff, nroff: text" "formatting and typesetting." "" troff(1)
.xx "" "ms: macros for" "formatting manuscripts." "" ms(7)
.xx "" "me: macros for" "formatting papers." "" me(7)
.xx "" "getarg, iargc: command arguments to" "Fortran." "" getarg(3f)
.xx "" "f77:" "Fortran 77 compiler." "" f77(1)
.xx "" "ratfor: rational" "Fortran dialect." "" ratfor(1)
.xx "" "efl: Extended" "Fortran Language." "" efl(1)
.xx "" "struct: structure" "Fortran programs." "" struct(1)
.xx "adage." "" "fortune: print a random, hopefully interesting," "" fortune(6)
.xx "" "ching," "fortune: the book of changes and other cookies." "" ching(6)
.xx "exit, export,/" "sh, for, case, if, while, \fB:" "\fP, \fB.\fP, break, continue, cd, eval, exec," "" sh(1)
.xx "" "printf," "fprintf, sprintf: formatted output conversion." "" printf(3S)
.xx "" "putc, putchar," "fputc, putw: put character or word on a stream." "" putc(3S)
.xx "" "puts," "fputs: put a string on a stream." "" puts(3S)
.xx "" "liszt: compile a" "Franz Lisp program." "" liszt(1)
.xx "" "" "fread, fwrite: buffered binary input/output." "" fread(3S)
.xx "" "df: disk" "free." "" df(1)
.xx "" "malloc," "free, realloc, calloc: main memory allocator." "" malloc(3)
.xx "" "fopen," "freopen, fdopen: open a stream." "" fopen(3S)
.xx "exponent." "" "frexp, ldexp, modf: split into mantissa and" "" frexp(3)
.xx "" "biff: be notified if mail arrives and who it is" "from." "" biff(1)
.xx "" "from: who is my mail" "from?." "" from(1)
.xx "" "scanf," "fscanf, sscanf: formatted input conversion." "" scanf(3S)
.xx "" "mklost+found: make a lost+found directory for" "fsck." "" mklost+found(8)
.xx "repair." "" "fsck: file system consistency check and interactive" "" fsck(8)
.xx "" "" "fseek, ftell, rewind: reposition a stream." "" fseek(3S)
.xx "" "" "fstab: static information about the filesystems." "" fstab(5)
.xx "" "stat," "fstat: get file status." "" stat(2)
.xx "" "fseek," "ftell, rewind: reposition a stream." "" fseek(3S)
.xx "" "time," "ftime: get date and time." "" time(2)
.xx "" "chfn: change" "full name of user." "" chfn(1)
.xx "" "gamma: log gamma" "function." "" gamma(3M)
.xx "" "fabs, floor, ceil: absolute value, floor, ceiling" "functions." "" floor(3M)
.xx "" "intro: introduction to library" "functions." "" intro(3)
.xx "" "j0, j1, jn, y0, y1, yn: bessel" "functions." "" j0(3M)
.xx "" "cos, tan, asin, acos, atan, atan2: trigonometric" "functions." "sin," sin(3M)
.xx "" "sinh, cosh, tanh: hyperbolic" "functions." "" sinh(3M)
.xx "" "curses: screen" "functions with ``optimal'' cursor motion." "" curses(3)
.xx "" "fread," "fwrite: buffered binary input/output." "" fread(3S)
.xx "" "aardvark: yet another exploration" "game." "" aardvark(6)
.xx "" "adventure: an exploration" "game." "" adventure(6)
.xx "" "backgammon: the" "game." "" backgammon(6)
.xx "" "monop: Monopoly" "game." "" monop(6)
.xx "" "snake, snscore: display chase" "game." "" snake(6)
.xx "" "trek: trekkie" "game." "" trek(6)
.xx "" "cribbage: the card" "game cribbage." "" cribbage(6)
.xx "" "boggle: play the" "game of boggle." "" boggle(6)
.xx "" "chess: the" "game of chess." "" chess(6)
.xx "" "zork: the" "game of dungeon." "" zork(6)
.xx "" "wump: the" "game of hunt-the-wumpus." "" wump(6)
.xx "" "gamma: log" "gamma function." "" gamma(3M)
.xx "" "" "gamma: log gamma function." "" gamma(3M)
.xx "" "ecvt, fcvt," "gcvt: output conversion." "" ecvt(3)
.xx "" "abort:" "generate a fault." "" abort(3)
.xx "" "makekey:" "generate encryption key." "" makekey(8)
.xx "" "ncheck:" "generate names from i-numbers." "" ncheck(8)
.xx "" "rand, srand: random number" "generator." "" rand(3)
.xx "" "lex:" "generator of lexical analysis programs." "" lex(1)
.xx "" "" "getarg, iargc: command arguments to Fortran." "" getarg(3f)
.xx "from stream." "" "getc, getchar, fgetc, getw: get character or word" "" getc(3S)
.xx "stream." "getc," "getchar, fgetc, getw: get character or word from" "" getc(3S)
.xx "" "getuid, getgid, geteuid," "getegid: get user and group identity." "" getuid(2)
.xx "" "" "getenv: value for environment name." "" getenv(3)
.xx "" "getuid, getgid," "geteuid, getegid: get user and group identity." "" getuid(2)
.xx "get file system descriptor file entry." "" "getfsent, getfsspec, getfsfile, setfsent, endfsent:" "" getfsent(3)
.xx "descriptor file entry." "getfsent, getfsspec," "getfsfile, setfsent, endfsent: get file system" "" getfsent(3)
.xx "system descriptor file entry." "getfsent," "getfsspec, getfsfile, setfsent, endfsent: get file" "" getfsent(3)
.xx "identity." "getuid," "getgid, geteuid, getegid: get user and group" "" getuid(2)
.xx "get group file entry." "" "getgrent, getgrgid, getgrnam, setgrent, endgrent:" "" getgrent(3)
.xx "file entry." "getgrent," "getgrgid, getgrnam, setgrent, endgrent: get group" "" getgrent(3)
.xx "" "getgrent, getgrgid," "getgrnam, setgrent, endgrent: get group file entry." "" getgrent(3)
.xx "" "" "getlogin: get login name." "" getlogin(3)
.xx "" "" "getpass: read a password." "" getpass(3)
.xx "" "setpgrp," "getpgrp: set/get process group." "" setpgrp(2j)
.xx "" "" "getpid: get process identification." "" getpid(2)
.xx "" "" "getpw: get name from uid." "" getpw(3)
.xx "get password file entry." "" "getpwent, getpwuid, getpwnam, setpwent, endpwent:" "" getpwent(3)
.xx "entry." "getpwent, getpwuid," "getpwnam, setpwent, endpwent: get password file" "" getpwent(3)
.xx "password file entry." "getpwent," "getpwuid, getpwnam, setpwent, endpwent: get" "" getpwent(3)
.xx "" "" "gets, fgets: get a string from a stream." "" gets(3S)
.xx "" "" "gets: get a string from standard input." "" gets(1)
.xx "" "" "getty: set terminal mode." "" getty(8)
.xx "group identity." "" "getuid, getgid, geteuid, getegid: get user and" "" getuid(2)
.xx "" "getc, getchar, fgetc," "getw: get character or word from stream." "" getc(3S)
.xx "" "vadvise:" "give advice to paging system." "" vadvise(2v)
.xx "" "head:" "give first few lines." "" head(1)
.xx "" "" "glob: filename expand argument list." "" csh(1)
.xx "ASCII." "ctime, localtime," "gmtime, asctime, timezone: convert date and time to" "" ctime(3)
.xx "" "fish: play" "``Go Fish''." "" fish(6)
.xx "" "setjmp, longjmp: non-local" "goto." "" setjmp(3)
.xx "" "" "goto: command transfer." "" csh(1)
.xx "" "graph: draw a" "graph." "" graph(1G)
.xx "" "" "graph: draw a graph." "" graph(1G)
.xx "" "plot:" "graphics filters." "" plot(1G)
.xx "" "greek:" "graphics for extended TTY-37 type-box." "" greek(7)
.xx "" "plot: openpl et al.:" "graphics interface." "" plot(3x)
.xx "" "plot:" "graphics interface." "" plot(5)
.xx "" "" "greek: graphics for extended TTY-37 type-box." "" greek(7)
.xx "" "" "grep, egrep, fgrep: search a file for a pattern." "" grep(1)
.xx "" "vgrind:" "grind nice listings of C programs." "" vgrind(1)
.xx "" "chown, chgrp: change owner or" "group." "" chown(8)
.xx "" "killpg: send signal to a process or a process" "group." "" killpg(2j)
.xx "" "newgrp: log in to a new" "group." "" newgrp(1)
.xx "" "setpgrp, getpgrp: set/get process" "group." "" setpgrp(2j)
.xx "" "group:" "group file." "" group(5)
.xx "" "getgrgid, getgrnam, setgrent, endgrent: get" "group file entry." "getgrent," getgrent(3)
.xx "" "" "group: group file." "" group(5)
.xx "" "setuid, setgid: set user and" "group ID." "" setuid(2)
.xx "" "getuid, getgid, geteuid, getegid: get user and" "group identity." "" getuid(2)
.xx "" "chown: change owner and" "group of a file." "" chown(2)
.xx "" "make: maintain program" "groups." "" make(1)
.xx "" "ioctl, stty," "gtty: control device." "" ioctl(2)
.xx "" "hangman:" "guess the word." "" hangman(6)
.xx "" "stop:" "halt a job or process." "" csh(1)
.xx "" "" "halt: halt the processor." "" halt(8)
.xx "" "reboot: reboot system or" "halt processor." "" reboot(2v)
.xx "" "halt:" "halt the processor." "" halt(8)
.xx "" "re_comp, re_exec: regular expression" "handler." "" regex(3)
.xx "" "" "hangman: guess the word." "" hangman(6)
.xx "" "vhangup: virtually" "``hangup'' the current control terminal." "" vhangup(2v)
.xx "" "nohup: run command immune to" "hangups." "" csh(1)
.xx "" "crash: what" "happens when the system crashes." "" crash(8)
.xx "" "uptime: show how long system" "has been up." "" uptime(1)
.xx "" "see: see what a file" "has in it." "" see(1)
.xx "" "rehash: recompute command" "hash table." "" csh(1)
.xx "" "unhash: discard command" "hash table." "" csh(1)
.xx "" "hashstat: print command" "hashing statistics." "" csh(1)
.xx "" "" "hashstat: print command hashing statistics." "" csh(1)
.xx "" "leave: remind you when you" "have to leave." "" leave(1)
.xx "" "" "hier: file system hierarchy." "" hier(7)
.xx "" "hier: file system" "hierarchy." "" hier(7)
.xx "" "wtmp: user login" "history." "" wtmp(5)
.xx "" "history: print" "history event list." "" csh(1)
.xx "" "" "history: print history event list." "" csh(1)
.xx "" "fortune: print a random," "hopefully interesting, adage." "" fortune(6)
.xx "" "uusend: send a file to a remote" "host." "" uusend(1C)
.xx "" "uptime: show" "how long system has been up." "" uptime(1)
.xx "" "" "hp: RP06, RM03, RM-05 moving-head disk." "" hp(4)
.xx "" "" "ht: RH-11/TE-16 magtape interface." "" ht(4)
.xx "" "wump: the game of" "hunt-the-wumpus." "" wump(6)
.xx "" "sinh, cosh, tanh:" "hyperbolic functions." "" sinh(3M)
.xx "" "" "hypot, cabs: Euclidean distance." "" hypot(3M)
.xx "" "getarg," "iargc: command arguments to Fortran." "" getarg(3f)
.xx "" "" "icheck: file system storage consistency check." "" icheck(8)
.xx "" "setuid, setgid: set user and group" "ID." "" setuid(2)
.xx "" "whoami: print effective current user" "id." "" whoami(1)
.xx "" "su: substitute user" "id temporarily." "" su(1)
.xx "" "getpid: get process" "identification." "" getpid(2)
.xx "" "getgid, geteuid, getegid: get user and group" "identity." "getuid," getuid(2)
.xx "" "" "if: conditional statement." "" csh(1)
.xx "" "biff: be notified" "if mail arrives and who it is from." "" biff(1)
.xx "eval, exec, exit, export, login,/" "sh, for, case," "if, while, \fB:\fP, \fB.\fP, break, continue, cd," "" sh(1)
.xx "" "signal: catch or" "ignore signals." "" signal(2)
.xx "" "sigsys: catch or" "ignore signals." "" sigsys(2j)
.xx "" "core: format of memory" "image file." "" core(5)
.xx "" "notify: request" "immediate notification." "" csh(1)
.xx "" "nohup: run command" "immune to hangups." "" csh(1)
.xx "" "xstr: extract strings from C programs to" "implement shared strings." "" xstr(1)
.xx "" "eyacc: modified yacc allowing much" "improved error recovery." "" eyacc(1)
.xx "" "which: locate a program file" "including aliases and paths (\fIcsh\fR only)." "" which(1)
.xx "" "dump, ddate:" "incremental dump format." "" dump(5)
.xx "" "dump:" "incremental file system dump." "" dump(8)
.xx "" "restor:" "incremental file system restore." "" restor(8)
.xx "" "tgetnum, tgetflag, tgetstr, tgoto, tputs: terminal" "independent operation routines." "tgetent," termcap(3)
.xx "" "ptx: permuted" "index." "" ptx(1)
.xx "" "strncat, strcmp, strncmp, strcpy, strncpy, strlen," "index, rindex: string operations." "strcat," string(3)
.xx "" "last:" "indicate last logins of users and teletypes." "" last(1)
.xx "" "syscall:" "indirect system call." "" syscall(2)
.xx "" "vpac: print raster printer/ploter accounting" "information." "" vpac(8)
.xx "" "vtimes: get" "information about resource utilization." "" vtimes(2v)
.xx "" "fstab: static" "information about the filesystems." "" fstab(5)
.xx "" "vfontinfo: inspect and print out" "information about unix fonts." "" vfontinfo(1)
.xx "" "man: find manual" "information by keywords; print out the manual." "" man(1)
.xx "" "finger: user" "information lookup program." "" finger(1)
.xx "" "" "init: process control initialization." "" init(8)
.xx "" "init: process control" "initialization." "" init(8)
.xx "" "ttys: terminal" "initialization data." "" ttys(5)
.xx "" "popen, pclose:" "initiate I/O to/from a process." "" popen(3S)
.xx "" "filsys, flblk," "ino: format of file system volume." "" filsys(5)
.xx "" "clri: clear" "i-node." "" clri(8)
.xx "" "gets: get a string from standard" "input." "" gets(1)
.xx "" "soelim: eliminate \&.so's from nroff" "input." "" soelim(1)
.xx "" "scanf, fscanf, sscanf: formatted" "input conversion." "" scanf(3S)
.xx "" "ungetc: push character back into" "input stream." "" ungetc(3S)
.xx "" "fread, fwrite: buffered binary" "input/output." "" fread(3S)
.xx "" "stdio: standard buffered" "input/output package." "" stdio(3S)
.xx "" "feof, ferror, clearerr, fileno: stream status" "inquiries." "" ferror(3S)
.xx "" "refer, lookbib: find and" "insert literature references in documents." "" refer(1)
.xx "" "vfontinfo:" "inspect and print out information about unix fonts." "" vfontinfo(1)
.xx "" "learn: computer aided" "instruction about UNIX." "" learn(1)
.xx "" "ltol3: convert between 3-byte integers and long" "integers." "l3tol," l3tol(3)
.xx "" "fsck: file system consistency check and" "interactive repair." "" fsck(8)
.xx "" "fortune: print a random, hopefully" "interesting, adage." "" fortune(6)
.xx "" "cons: VAX-11 console" "interface." "" cons(4)
.xx "" "fl: floppy" "interface." "" fl(4)
.xx "" "ht: RH-11/TE-16 magtape" "interface." "" ht(4)
.xx "" "kl: KL-11 or DL-11 asynchronous" "interface." "" kl(4)
.xx "" "plot: openpl et al.: graphics" "interface." "" plot(3x)
.xx "" "plot: graphics" "interface." "" plot(5)
.xx "" "rv: Racal/Vadic ACU" "interface." "" rv(4)
.xx "" "tty: general terminal" "interface." "" tty(4)
.xx "" "va: Benson-Varian" "interface." "" va(4)
.xx "" "vp: Versatec" "interface." "" vp(4)
.xx "" "vswapon: add a swap device for" "interleaved paging/swapping." "" vswapon(2v)
.xx "" "spline:" "interpolate smooth curve." "" spline(1G)
.xx "" "apl: an apl" "interpreter." "" apl(1)
.xx "" "lisp: lisp" "interpreter." "" lisp(1)
.xx "" "pti: phototypesetter" "interpreter." "" pti(1)
.xx "" "px: Pascal" "interpreter." "" px(1)
.xx "" "pix: Pascal" "interpreter and executor." "" pix(1)
.xx "" "cifplot: CIF" "interpreter and plotter." "" cifplot(1)
.xx "" "pi: Pascal" "interpreter code translator." "" pi(1)
.xx "" "csh: a shell (command" "interpreter) with C-like syntax." "" csh(1)
.xx "" "pipe: create an" "interprocess channel." "" pipe(2)
.xx "" "onintr: process" "interrupts in command scripts." "" csh(1)
.xx "" "sleep: suspend execution for an" "interval." "" sleep(1)
.xx "" "sleep: suspend execution for" "interval." "" sleep(3)
.xx "error numbers." "" "intro, errno: introduction to system calls and" "" intro(2)
.xx "" "intro:" "introduction to commands." "" intro(1)
.xx "" "intro:" "introduction to library functions." "" intro(3)
.xx "" "intro, errno:" "introduction to system calls and error numbers." "" intro(2)
.xx "" "ncheck: generate names from" "i-numbers." "" ncheck(8)
.xx "" "mpxio: multiplexed" "i/o." "" mpxio(5)
.xx "" ".UC 4 iostat: report" "I/O statistics." "" iostat(1)
.xx "" "popen, pclose: initiate" "I/O to/from a process." "" popen(3S)
.xx "" "" "ioctl, stty, gtty: control device." "" ioctl(2)
.xx "" ".UC 4" "iostat: report I/O statistics." "" iostat(1)
.xx "" "whatis: describe what a command" "is." "" whatis(1)
.xx "isascii:/" "isalpha, isupper, islower, isdigit," "isalnum, isspace, ispunct, isprint, iscntrl," "" ctype(3)
.xx "isspace, ispunct, isprint, iscntrl, isascii:/" "" "isalpha, isupper, islower, isdigit, isalnum," "" ctype(3)
.xx "" "isalnum, isspace, ispunct, isprint, iscntrl," "isascii: character classification." "/isdigit," ctype(3)
.xx "" "ttyname," "isatty, ttyslot: find name of a terminal." "" ttyname(3)
.xx "" "/isdigit, isalnum, isspace, ispunct, isprint," "iscntrl, isascii: character classification." "" ctype(3)
.xx "iscntrl, isascii:/" "isalpha, isupper, islower," "isdigit, isalnum, isspace, ispunct, isprint," "" ctype(3)
.xx "isprint, iscntrl, isascii:/" "isalpha, isupper," "islower, isdigit, isalnum, isspace, ispunct," "" ctype(3)
.xx "" "islower, isdigit, isalnum, isspace, ispunct," "isprint, iscntrl, isascii: character/" "/isupper," ctype(3)
.xx "" "/isupper, islower, isdigit, isalnum, isspace," "ispunct, isprint, iscntrl, isascii: character/" "" ctype(3)
.xx "" "isalpha, isupper, islower, isdigit, isalnum," "isspace, ispunct, isprint, iscntrl, isascii:/" "" ctype(3)
.xx "" "system:" "issue a shell command." "" system(3)
.xx "ispunct, isprint, iscntrl, isascii:/" "isalpha," "isupper, islower, isdigit, isalnum, isspace," "" ctype(3)
.xx "" "see: see what a file has in" "it." "" see(1)
.xx "" "biff: be notified if mail arrives and who" "it is from." "" biff(1)
.xx "" "suspend: suspend a shell, resuming" "its superior." "" csh(1)
.xx "" "" "j0, j1, jn, y0, y1, yn: bessel functions." "" j0(3M)
.xx "" "j0," "j1, jn, y0, y1, yn: bessel functions." "" j0(3M)
.xx "" "j0, j1," "jn, y0, y1, yn: bessel functions." "" j0(3M)
.xx "" "jobs: summary of" "job control facilities." "" jobs(3j)
.xx "" "bg: place" "job in background." "" csh(1)
.xx "" "fg: bring" "job into foreground." "" csh(1)
.xx "" "jobs: print current" "job list." "" csh(1)
.xx "" "stop: halt a" "job or process." "" csh(1)
.xx "" "kill: kill" "jobs and processes." "" csh(1)
.xx "" "" "jobs: print current job list." "" csh(1)
.xx "" "" "jobs: summary of job control facilities." "" jobs(3j)
.xx "" "" "join: relational database operator." "" join(1)
.xx "" "msgs: system messages and" "junk mail program." "" msgs(1)
.xx "" "makekey: generate encryption" "key." "" makekey(8)
.xx "" "apropos: locate commands by" "keyword lookup." "" apropos(1)
.xx "" "man: find manual information by" "keywords; print out the manual." "" man(1)
.xx "" "kill:" "kill jobs and processes." "" csh(1)
.xx "" "" "kill: kill jobs and processes." "" csh(1)
.xx "" "" "kill: send signal to a process." "" kill(2)
.xx "" "" "kill: terminate a process with extreme prejudice." "" kill(1)
.xx "group." "" "killpg: send signal to a process or a process" "" killpg(2j)
.xx "" "" "kl: KL-11 or DL-11 asynchronous interface." "" kl(4)
.xx "" "kl:" "KL-11 or DL-11 asynchronous interface." "" kl(4)
.xx "" "mem," "kmem: main memory." "" mem(4)
.xx "" "quiz: test your" "knowledge." "" quiz(6)
.xx "long integers." "" "l3tol, ltol3: convert between 3-byte integers and" "" l3tol(3)
.xx "" "awk: pattern scanning and processing" "language." "" awk(1)
.xx "" "bc: arbitrary-precision arithmetic" "language." "" bc(1)
.xx "" "efl: Extended Fortran" "Language." "" efl(1)
.xx "" "set, shift, times, trap, umask, wait: command" "language." "/export, login, newgrp, read, readonly," sh(1)
.xx "order." "" "lastcomm: show last commands executed in reverse" "" lastcomm(1)
.xx "" "" "ld: link editor." "" ld(1)
.xx "" "frexp," "ldexp, modf: split into mantissa and exponent." "" frexp(3)
.xx "" "" "learn: computer aided instruction about UNIX." "" learn(1)
.xx "" "leave: remind you when you have to" "leave." "" leave(1)
.xx "" "" "leave: remind you when you have to leave." "" leave(1)
.xx "" "exit:" "leave shell." "" csh(1)
.xx "" "" "lex: generator of lexical analysis programs." "" lex(1)
.xx "" "lex: generator of" "lexical analysis programs." "" lex(1)
.xx "" "ranlib: convert archives to random" "libraries." "" ranlib(1)
.xx "" "lorder: find ordering relation for an object" "library." "" lorder(1)
.xx "" "ar: archive" "(library) file format." "" ar(5)
.xx "" "intro: introduction to" "library functions." "" intro(3)
.xx "" "ar: archive and" "library maintainer." "" ar(1)
.xx "" "" "limit: alter per-process resource limitations." "" csh(1)
.xx "" "limit: alter per-process resource" "limitations." "" csh(1)
.xx "" "unlimit: remove resource" "limitiations." "" csh(1)
.xx "" "bk:" "line discipline for machine-machine communication." "" bk(4)
.xx "" "col: filter reverse" "line feeds." "" col(1)
.xx "" "lp:" "line printer." "" lp(4)
.xx "" "print: pr to the" "line printer." "" print(1)
.xx "" "lpr, lprm, lpq, print:" "line printer spooler." "" lpr(1)
.xx "" "netlpr: use a remote" "lineprinter through the net." "" netlpr(1)
.xx "" "head: give first few" "lines." "" head(1)
.xx "" "num: number" "lines." "" num(1)
.xx "" "comm: select or reject" "lines common to two sorted files." "" comm(1)
.xx "" "fold: fold long" "lines for finite width output device." "" fold(1)
.xx "" "uniq: report repeated" "lines in a file." "" uniq(1)
.xx "" "look: find" "lines in a sorted list." "" look(1)
.xx "" "rev: reverse" "lines of a file." "" rev(1)
.xx "" "netlog: print the last few" "lines of the network log file." "" netlog(1)
.xx "" "ld:" "link editor." "" ld(1)
.xx "" "a.out: assembler and" "link editor output." "" a.out(5)
.xx "" "" "link: link to a file." "" link(2)
.xx "" "link:" "link to a file." "" link(2)
.xx "" "ln: make" "links." "" ln(1)
.xx "" "" "lint: a C program verifier." "" lint(1)
.xx "" "lxref:" "lisp cross reference program." "" lxref(1)
.xx "" "lisp:" "lisp interpreter." "" lisp(1)
.xx "" "" "lisp: lisp interpreter." "" lisp(1)
.xx "" "liszt: compile a Franz" "Lisp program." "" liszt(1)
.xx "" "glob: filename expand argument" "list." "" csh(1)
.xx "" "history: print history event" "list." "" csh(1)
.xx "" "jobs: print current job" "list." "" csh(1)
.xx "" "shift: manipulate argument" "list." "" csh(1)
.xx "" "look: find lines in a sorted" "list." "" look(1)
.xx "" "nlist: get entries from name" "list." "" nlist(3)
.xx "" "nm: print name" "list." "" nm(1)
.xx "" "symorder: rearrange name" "list." "" symorder(1)
.xx "" "varargs: variable argument" "list." "" varargs(3)
.xx "" "ls:" "list contents of directory." "" ls(1)
.xx "" "foreach: loop over" "list of names." "" csh(1)
.xx "" "users: compact" "list of users who are on the system." "" users(1)
.xx "" "vgrind: grind nice" "listings of C programs." "" vgrind(1)
.xx "" "" "liszt: compile a Franz Lisp program." "" liszt(1)
.xx "" "refer, lookbib: find and insert" "literature references in documents." "" refer(1)
.xx "" "" "ln: make links." "" ln(1)
.xx "and time to ASCII." "ctime," "localtime, gmtime, asctime, timezone: convert date" "" ctime(3)
.xx "(\fIcsh\fR only)." "which:" "locate a program file including aliases and paths" "" which(1)
.xx "" "apropos:" "locate commands by keyword lookup." "" apropos(1)
.xx "" "whereis:" "locate source, binary, and or manual for program." "" whereis(1)
.xx "" "end, etext, edata: last" "locations in program." "" end(3)
.xx "" "" "lock: reserve a terminal." "" lock(1)
.xx "" "collect system diagnostic messages to form error" "log." "dmesg:" dmesg(8)
.xx "" "netlog: print the last few lines of the network" "log file." "" netlog(1)
.xx "" "gamma:" "log gamma function." "" gamma(3M)
.xx "" "newgrp:" "log in to a new group." "" newgrp(1)
.xx "power, square root." "exp," "log, log10, pow, sqrt: exponential, logarithm," "" exp(3M)
.xx "square root." "exp, log," "log10, pow, sqrt: exponential, logarithm, power," "" exp(3M)
.xx "" "exp, log, log10, pow, sqrt: exponential," "logarithm, power, square root." "" exp(3M)
.xx "" "ac:" "login accounting." "" ac(8)
.xx "" "wtmp: user" "login history." "" wtmp(5)
.xx "" "" "login: login new user." "" csh(1)
.xx "" "getlogin: get" "login name." "" getlogin(3)
.xx "" "netlogin: provide" "login name and password for a remote machine." "" netlogin(1)
.xx "" "login:" "login new user." "" csh(1)
.xx "" "/break, continue, cd, eval, exec, exit, export," "login, newgrp, read, readonly, set, shift, times,/" "" sh(1)
.xx "" "passwd: change" "login password." "" passwd(1)
.xx "" "utmp, wtmp:" "login records." "" utmp(5)
.xx "" "chsh: change default" "login shell." "" chsh(1)
.xx "" "" "login: sign on." "" login(1)
.xx "" "last: indicate last" "logins of users and teletypes." "" last(1)
.xx "" "" "logout: end session." "" csh(1)
.xx "" "setjmp," "longjmp: non-local goto." "" setjmp(3)
.xx "" "" "look: find lines in a sorted list." "" look(1)
.xx "documents." "refer," "lookbib: find and insert literature references in" "" refer(1)
.xx "" "apropos: locate commands by keyword" "lookup." "" apropos(1)
.xx "" "finger: user information" "lookup program." "" finger(1)
.xx "" "break: exit while/foreach" "loop." "" csh(1)
.xx "" "continue: cycle in" "loop." "" csh(1)
.xx "" "end: terminate" "loop." "" csh(1)
.xx "" "foreach:" "loop over list of names." "" csh(1)
.xx "library." "" "lorder: find ordering relation for an object" "" lorder(1)
.xx "" "mklost+found: make a" "lost+found directory for fsck." "" mklost+found(8)
.xx "" "" "lp: line printer." "" lp(4)
.xx "" "lpr, lprm," "lpq, print: line printer spooler." "" lpr(1)
.xx "" "" "lpr, lprm, lpq, print: line printer spooler." "" lpr(1)
.xx "" "lpr," "lprm, lpq, print: line printer spooler." "" lpr(1)
.xx "" "" "ls: list contents of directory." "" ls(1)
.xx "" "" "lseek, tell: move read/write pointer." "" lseek(2)
.xx "integers." "l3tol," "ltol3: convert between 3-byte integers and long" "" l3tol(3)
.xx "" "" "lxref: lisp cross reference program." "" lxref(1)
.xx "" "" "m4: macro processor." "" m4(1)
.xx "" "net: execute a command on a remote" "machine." "" net(1)
.xx "" "provide login name and password for a remote" "machine." "netlogin:" netlogin(1)
.xx "" "netmail: read mail on a remote" "machine over the network." "" netmail(1)
.xx "" "bk: line discipline for" "machine-machine communication." "" bk(4)
.xx "" "uudiff: directory comparison between" "machines." "" uudiff(1C)
.xx "" "m4:" "macro processor." "" m4(1)
.xx "" "alias: shell" "macros." "" csh(1)
.xx "" "translate version 6 manual macros to version 7" "macros." "trman:" trman(1)
.xx "" "ms:" "macros for formatting manuscripts." "" ms(7)
.xx "" "me:" "macros for formatting papers." "" me(7)
.xx "" "man:" "macros to typeset manual." "" man(7)
.xx "" "trman: translate version 6 manual" "macros to version 7 macros." "" trman(1)
.xx "" "tm: tm11" "magnetic tape driver." "" tm(4)
.xx "" "ht: RH-11/TE-16" "magtape interface." "" ht(4)
.xx "" "mail: send and receive" "mail." "" mail(1)
.xx "" "encode/decode a binary file for tranmission via" "mail." "uuencode,uudecode:" uuencode(1C)
.xx "" "xsend, xget, enroll: secret" "mail." "" xsend(1)
.xx "" "newaliases: rebuild the data base for the" "mail aliases file." "" newaliases(1)
.xx "" "mail: send or receive" "mail among users." "" binmail(1)
.xx "" "biff: be notified if" "mail arrives and who it is from." "" biff(1)
.xx "" "from: who is my" "mail from?." "" from(1)
.xx "" "prmail: print out" "mail in the post office." "" prmail(1)
.xx "" "mail: pseudo-device for" "mail notification." "" mail(4)
.xx "" "netmail: read" "mail on a remote machine over the network." "" netmail(1)
.xx "" "msgs: system messages and junk" "mail program." "" msgs(1)
.xx "" "" "mail: pseudo-device for mail notification." "" mail(4)
.xx "" "" "mail: send and receive mail." "" mail(1)
.xx "" "" "mail: send or receive mail among users." "" binmail(1)
.xx "" "delivermail: deliver" "mail to arbitrary people." "" delivermail(8)
.xx "" "mem, kmem:" "main memory." "" mem(4)
.xx "" "malloc, free, realloc, calloc:" "main memory allocator." "" malloc(3)
.xx "" "make:" "maintain program groups." "" make(1)
.xx "" "ar: archive and library" "maintainer." "" ar(1)
.xx "" "mkdir:" "make a directory." "" mkdir(1)
.xx "" "mknod:" "make a directory or a special file." "" mknod(2)
.xx "" "mklost+found:" "make a lost+found directory for fsck." "" mklost+found(8)
.xx "" "mktemp:" "make a unique file name." "" mktemp(3)
.xx "" "ln:" "make links." "" ln(1)
.xx "" "" "make: maintain program groups." "" make(1)
.xx "" "script:" "make typescript of terminal session." "" script(1)
.xx "" "" "makekey: generate encryption key." "" makekey(8)
.xx "allocator." "" "malloc, free, realloc, calloc: main memory" "" malloc(3)
.xx "the manual." "" "man: find manual information by keywords; print out" "" man(1)
.xx "" "" "man: macros to typeset manual." "" man(7)
.xx "" "signal, sighold, sigignore, sigrelse, sigpause:" "manage signals." "sigset," sigset(3)
.xx "" "shift:" "manipulate argument list." "" csh(1)
.xx "" "mpx: create and" "manipulate multiplexed files." "" mpx(2)
.xx "" "tp:" "manipulate tape archive." "" tp(1)
.xx "" "frexp, ldexp, modf: split into" "mantissa and exponent." "" frexp(3)
.xx "" "catman: create the cat files for the" "manual." "" catman(8)
.xx "" "find manual information by keywords; print out the" "manual." "man:" man(1)
.xx "" "man: macros to typeset" "manual." "" man(7)
.xx "" "whereis: locate source, binary, and or" "manual for program." "" whereis(1)
.xx "manual." "man: find" "manual information by keywords; print out the" "" man(1)
.xx "" "trman: translate version 6" "manual macros to version 7 macros." "" trman(1)
.xx "" "ms: macros for formatting" "manuscripts." "" ms(7)
.xx "" "umask: change or display file creation" "mask." "" csh(1)
.xx "" "umask: set file creation mode" "mask." "" umask(2)
.xx "" "mkstr: create an error message file by" "massaging C source." "" mkstr(1)
.xx "" "eqn, neqn, checkeq: typeset" "mathematics." "" eqn(1)
.xx "" "vlimit: control" "maximum system resource consumption." "" vlimit(2v)
.xx "" "" "me: macros for formatting papers." "" me(7)
.xx "" "bcd: convert to antique" "media." "" bcd(6)
.xx "" "" "mem, kmem: main memory." "" mem(4)
.xx "" "mem, kmem: main" "memory." "" mem(4)
.xx "" "malloc, free, realloc, calloc: main" "memory allocator." "" malloc(3)
.xx "" "valloc: aligned" "memory allocator." "" valloc(3)
.xx "" "vfork: spawn new process in a virtual" "memory efficient way." "" vfork(2v)
.xx "" "core: format of" "memory image file." "" core(5)
.xx "" "vmstat: report virtual" "memory statistics." "" vmstat(1)
.xx "" "sort: sort or" "merge files." "" sort(1)
.xx "" "" "mesg: permit or deny messages." "" mesg(1)
.xx "" "mkstr: create an error" "message file by massaging C source." "" mkstr(1)
.xx "" "error: analyze and disperse compiler error" "messages." "" error(1)
.xx "" "mesg: permit or deny" "messages." "" mesg(1)
.xx "" "perror, sys_errlist, sys_nerr: system error" "messages." "" perror(3)
.xx "" "msgs: system" "messages and junk mail program." "" msgs(1)
.xx "" "dmesg: collect system diagnostic" "messages to form error log." "" dmesg(8)
.xx "" "mille: play" "Mille Bournes." "" mille(6)
.xx "" "" "mille: play Mille Bournes." "" mille(6)
.xx "" "" "mkdir: make a directory." "" mkdir(1)
.xx "" "" "mkfs: construct a file system." "" mkfs(8)
.xx "" "" "mklost+found: make a lost+found directory for fsck." "" mklost+found(8)
.xx "" "" "mknod: build special file." "" mknod(8)
.xx "" "" "mknod: make a directory or a special file." "" mknod(2)
.xx "source." "" "mkstr: create an error message file by massaging C" "" mkstr(1)
.xx "" "" "mktemp: make a unique file name." "" mktemp(3)
.xx "" "chmod: change" "mode." "" chmod(1)
.xx "" "getty: set terminal" "mode." "" getty(8)
.xx "" "umask: set file creation" "mode mask." "" umask(2)
.xx "" "chmod: change" "mode of file." "" chmod(2)
.xx "" "tset: set terminal" "modes." "" tset(1)
.xx "" "frexp, ldexp," "modf: split into mantissa and exponent." "" frexp(3)
.xx "" "touch: update date last" "modified of a file." "" touch(1)
.xx "recovery." "eyacc:" "modified yacc allowing much improved error" "" eyacc(1)
.xx "" "what: show what versions of object" "modules were used to construct a file." "" what(1)
.xx "" "" "monitor: prepare execution profile." "" monitor(3)
.xx "" "" "monop: Monopoly game." "" monop(6)
.xx "" "monop:" "Monopoly game." "" monop(6)
.xx "" "" "more, page: file perusal filter for crt viewing." "" more(1)
.xx "" "curses: screen functions with ``optimal'' cursor" "motion." "" curses(3)
.xx "" "mount, umount:" "mount and dismount file system." "" mount(8)
.xx "" "mount, umount:" "mount or remove file system." "" mount(2)
.xx "" "" "mount, umount: mount and dismount file system." "" mount(8)
.xx "" "" "mount, umount: mount or remove file system." "" mount(2)
.xx "" "mtab:" "mounted file system table." "" mtab(5)
.xx "" "mv:" "move or rename files." "" mv(1)
.xx "" "lseek, tell:" "move read/write pointer." "" lseek(2)
.xx "" "up: emulex sc21/ampex 9300 UNIBUS" "moving head disk." "" up(4)
.xx "" "hp: RP06, RM03, RM-05" "moving-head disk." "" hp(4)
.xx "" "" "mpx: create and manipulate multiplexed files." "" mpx(2)
.xx "" "" "mpxio: multiplexed i/o." "" mpxio(5)
.xx "" "" "ms: macros for formatting manuscripts." "" ms(7)
.xx "" "" "msgs: system messages and junk mail program." "" msgs(1)
.xx "" "" "mtab: mounted file system table." "" mtab(5)
.xx "" "eyacc: modified yacc allowing" "much improved error recovery." "" eyacc(1)
.xx "" "mpx: create and manipulate" "multiplexed files." "" mpx(2)
.xx "" "mpxio:" "multiplexed i/o." "" mpxio(5)
.xx "" "dh: DH-11 communications" "multiplexer." "" dh(4)
.xx "" "dz: DZ-11 communications" "multiplexer." "" dz(4)
.xx "" "switch:" "multi-way command branch." "" csh(1)
.xx "" "" "mv: move or rename files." "" mv(1)
.xx "" "from: who is" "my mail from?." "" from(1)
.xx "" "getenv: value for environment" "name." "" getenv(3)
.xx "" "getlogin: get login" "name." "" getlogin(3)
.xx "" "mktemp: make a unique file" "name." "" mktemp(3)
.xx "" "pwd: working directory" "name." "" pwd(1)
.xx "" "tty: get terminal" "name." "" tty(1)
.xx "" "netlogin: provide login" "name and password for a remote machine." "" netlogin(1)
.xx "" "getpw: get" "name from uid." "" getpw(3)
.xx "" "nlist: get entries from" "name list." "" nlist(3)
.xx "" "nm: print" "name list." "" nm(1)
.xx "" "symorder: rearrange" "name list." "" symorder(1)
.xx "" "ttyname, isatty, ttyslot: find" "name of a terminal." "" ttyname(3)
.xx "" "chfn: change full" "name of user." "" chfn(1)
.xx "" "foreach: loop over list of" "names." "" csh(1)
.xx "" "terminals: conventional" "names." "" term(7)
.xx "" "ncheck: generate" "names from i-numbers." "" ncheck(8)
.xx "" "dumpdir: print the" "names of files on a dump tape." "" dumpdir(8)
.xx "" "" "ncheck: generate names from i-numbers." "" ncheck(8)
.xx "" "eqn," "neqn, checkeq: typeset mathematics." "" eqn(1)
.xx "" "netcp: remote copy of files through the" "net." "" netcp(1)
.xx "" "netlpr: use a remote lineprinter through the" "net." "" netlpr(1)
.xx "" "" "net: execute a command on a remote machine." "" net(1)
.xx "" "" "netcp: remote copy of files through the net." "" netcp(1)
.xx "file." "" "netlog: print the last few lines of the network log" "" netlog(1)
.xx "remote machine." "" "netlogin: provide login name and password for a" "" netlogin(1)
.xx "" "" "netlpr: use a remote lineprinter through the net." "" netlpr(1)
.xx "network." "" "netmail: read mail on a remote machine over the" "" netmail(1)
.xx "" "" "netq: print contents of network queue." "" netq(1)
.xx "" "" "netrm: remove a command from the network queue." "" netrm(1)
.xx "network." "" "nettroff: troff to the phototypesetter over the" "" nettroff(1)
.xx "" "netmail: read mail on a remote machine over the" "network." "" netmail(1)
.xx "" "nettroff: troff to the phototypesetter over the" "network." "" nettroff(1)
.xx "" "netlog: print the last few lines of the" "network log file." "" netlog(1)
.xx "" "netq: print contents of" "network queue." "" netq(1)
.xx "" "netrm: remove a command from the" "network queue." "" netrm(1)
.xx "" "newcsh: description of" "new csh features (over oldcsh)." "" newcsh(1)
.xx "" "creat: create a" "new file." "" creat(2)
.xx "" "arcv: convert archives to" "new format." "" arcv(8)
.xx "" "newgrp: log in to a" "new group." "" newgrp(1)
.xx "" "fork: spawn" "new process." "" fork(2)
.xx "" "vfork: spawn" "new process in a virtual memory efficient way." "" vfork(2v)
.xx "" "newtty: summary of the" "``new'' tty driver." "" newtty(4)
.xx "" "login: login" "new user." "" csh(1)
.xx "" "adduser: procedure for adding" "new users." "" adduser(8)
.xx "aliases file." "" "newaliases: rebuild the data base for the mail" "" newaliases(1)
.xx "oldcsh)." "" "newcsh: description of new csh features (over" "" newcsh(1)
.xx "" "" "newgrp: log in to a new group." "" newgrp(1)
.xx "" "/continue, cd, eval, exec, exit, export, login," "newgrp, read, readonly, set, shift, times, trap,/" "" sh(1)
.xx "" "" "newtty: summary of the ``new'' tty driver." "" newtty(4)
.xx "" "dbminit, fetch, store, delete, firstkey," "nextkey: data base subroutines." "" dbm(3x)
.xx "" "alter priority of running process by changing" "nice." "renice:" renice(8)
.xx "" "vgrind: grind" "nice listings of C programs." "" vgrind(1)
.xx "(\fIsh\fR only)." "" "nice, nohup: run a command at low priority" "" nice(1)
.xx "" "" "nice: run low priority process." "" csh(1)
.xx "" "" "nice: set program priority." "" nice(2)
.xx "" "" "nlist: get entries from name list." "" nlist(3)
.xx "" "" "nm: print name list." "" nm(1)
.xx "only)." "nice," "nohup: run a command at low priority (\fIsh\fR" "" nice(1)
.xx "" "" "nohup: run command immune to hangups." "" csh(1)
.xx "" "setjmp, longjmp:" "non-local goto." "" setjmp(3)
.xx "" "notify: request immediate" "notification." "" csh(1)
.xx "" "mail: pseudo-device for mail" "notification." "" mail(4)
.xx "" "biff: be" "notified if mail arrives and who it is from." "" biff(1)
.xx "" "" "notify: request immediate notification." "" csh(1)
.xx "" "soelim: eliminate \&.so's from" "nroff input." "" soelim(1)
.xx "" "tbl: format tables for" "nroff or troff." "" tbl(1)
.xx "" "colcrt: filter" "nroff output for CRT previewing." "" colcrt(1)
.xx "" "troff," "nroff: text formatting and typesetting." "" troff(1)
.xx "" "deroff: remove" "nroff, troff, tbl and eqn constructs." "" deroff(1)
.xx "" "checknr: check" "nroff/troff files." "" checknr(1)
.xx "" "" "null: data sink." "" null(4)
.xx "" "" "num: number lines." "" num(1)
.xx "" "" "number: convert Arabic numerals to English." "" number(6)
.xx "" "arithmetic: provide drill in" "number facts." "" arithmetic(6)
.xx "" "rand, srand: random" "number generator." "" rand(3)
.xx "" "num:" "number lines." "" num(1)
.xx "" "atof, atoi, atol: convert ASCII to" "numbers." "" atof(3)
.xx "" "errno: introduction to system calls and error" "numbers." "intro," intro(2)
.xx "" "number: convert Arabic" "numerals to English." "" number(6)
.xx "" "size: size of an" "object file." "" size(1)
.xx "" "lorder: find ordering relation for an" "object library." "" lorder(1)
.xx "" "what: show what versions of" "object modules were used to construct a file." "" what(1)
.xx "" "strings: find the printable strings in a" "object, or other binary, file." "" strings(1)
.xx "" "od:" "octal dump." "" od(1)
.xx "" "" "od: octal dump." "" od(1)
.xx "" "acct: turn accounting on or" "off." "" acct(2)
.xx "" "prmail: print out mail in the post" "office." "" prmail(1)
.xx "" "" "old: directory of old programs." "" old(8)
.xx "" "old: directory of" "old programs." "" old(8)
.xx "" "newcsh: description of new csh features (over" "oldcsh)." "" newcsh(1)
.xx "" "login: sign" "on." "" login(1)
.xx "" "" "onintr: process interrupts in command scripts." "" csh(1)
.xx "" "nohup: run a command at low priority (\fIsh\fR" "only)." "nice," nice(1)
.xx "" "program file including aliases and paths (\fIcsh\fR" "only)." "which: locate a" which(1)
.xx "" "fopen, freopen, fdopen:" "open a stream." "" fopen(3S)
.xx "" "dup, dup2: duplicate an" "open file descriptor." "" dup(2)
.xx "" "open:" "open for reading or writing." "" open(2)
.xx "" "" "open: open for reading or writing." "" open(2)
.xx "" "plot:" "openpl et al.: graphics interface." "" plot(3x)
.xx "" "tgetstr, tgoto, tputs: terminal independent" "operation routines." "tgetent, tgetnum, tgetflag," termcap(3)
.xx "" "strcpy, strncpy, strlen, index, rindex: string" "operations." "strcat, strncat, strcmp, strncmp," string(3)
.xx "" "join: relational database" "operator." "" join(1)
.xx "" "curses: screen functions with" "``optimal'' cursor motion." "" curses(3)
.xx "" "stty: set terminal" "options." "" stty(1)
.xx "" "lastcomm: show last commands executed in reverse" "order." "" lastcomm(1)
.xx "" "lorder: find" "ordering relation for an object library." "" lorder(1)
.xx "" "vi: screen" "oriented (visual) display editor based on ex." "" vi(1)
.xx "" "a.out: assembler and link editor" "output." "" a.out(5)
.xx "" "ecvt, fcvt, gcvt:" "output conversion." "" ecvt(3)
.xx "" "printf, fprintf, sprintf: formatted" "output conversion." "" printf(3S)
.xx "" "fold: fold long lines for finite width" "output device." "" fold(1)
.xx "" "colcrt: filter nroff" "output for CRT previewing." "" colcrt(1)
.xx "" "foreach: loop" "over list of names." "" csh(1)
.xx "" "newcsh: description of new csh features" "(over oldcsh)." "" newcsh(1)
.xx "" "netmail: read mail on a remote machine" "over the network." "" netmail(1)
.xx "" "nettroff: troff to the phototypesetter" "over the network." "" nettroff(1)
.xx "" "exec:" "overlay shell with specified command." "" csh(1)
.xx "" "chown: change" "owner and group of a file." "" chown(2)
.xx "" "chown, chgrp: change" "owner or group." "" chown(8)
.xx "" "quot: summarize file system" "ownership." "" quot(8)
.xx "" "stdio: standard buffered input/output" "package." "" stdio(3S)
.xx "" "more," "page: file perusal filter for crt viewing." "" more(1)
.xx "" "tk:" "paginator for the Tektronix 4014." "" tk(1)
.xx "" "swapon: specify additional device for" "paging and swapping." "" swapon(8)
.xx "" "drum:" "paging device." "" drum(4)
.xx "" "vadvise: give advice to" "paging system." "" vadvise(2v)
.xx "" "vswapon: add a swap device for interleaved" "paging/swapping." "" vswapon(2v)
.xx "" "me: macros for formatting" "papers." "" me(7)
.xx "" "pc:" "Pascal compiler." "" pc(1)
.xx "" "pxref:" "Pascal cross-reference program." "" pxref(1)
.xx "" "pxp:" "Pascal execution profiler." "" pxp(1)
.xx "" "px:" "Pascal interpreter." "" px(1)
.xx "" "pix:" "Pascal interpreter and executor." "" pix(1)
.xx "" "pi:" "Pascal interpreter code translator." "" pi(1)
.xx "" "" "passwd: change login password." "" passwd(1)
.xx "" "" "passwd: password file." "" passwd(5)
.xx "" "getpass: read a" "password." "" getpass(3)
.xx "" "passwd: change login" "password." "" passwd(1)
.xx "" "passwd:" "password file." "" passwd(5)
.xx "" "getpwuid, getpwnam, setpwent, endpwent: get" "password file entry." "getpwent," getpwent(3)
.xx "" "vipw: edit the" "password file with vi." "" vipw(8)
.xx "" "netlogin: provide login name and" "password for a remote machine." "" netlogin(1)
.xx "" "which: locate a program file including aliases and" "paths (\fIcsh\fR only)." "" which(1)
.xx "" "grep, egrep, fgrep: search a file for a" "pattern." "" grep(1)
.xx "" "awk:" "pattern scanning and processing language." "" awk(1)
.xx "" "" "pause: stop until signal." "" pause(2)
.xx "" "" "pc: Pascal compiler." "" pc(1)
.xx "" "popen," "pclose: initiate I/O to/from a process." "" popen(3S)
.xx "" "delivermail: deliver mail to arbitrary" "people." "" delivermail(8)
.xx "" "mesg:" "permit or deny messages." "" mesg(1)
.xx "" "ptx:" "permuted index." "" ptx(1)
.xx "" "limit: alter" "per-process resource limitations." "" csh(1)
.xx "messages." "" "perror, sys_errlist, sys_nerr: system error" "" perror(3)
.xx "" "sticky: executable files with" "persistent text." "" sticky(8)
.xx "" "more, page: file" "perusal filter for crt viewing." "" more(1)
.xx "" "pti:" "phototypesetter interpreter." "" pti(1)
.xx "" "nettroff: troff to the" "phototypesetter over the network." "" nettroff(1)
.xx "" "tc:" "photypesetter simulator." "" tc(1)
.xx "" "" "pi: Pascal interpreter code translator." "" pi(1)
.xx "" "split: split a file into" "pieces." "" split(1)
.xx "" "" "pipe: create an interprocess channel." "" pipe(2)
.xx "" "tee:" "pipe fitting." "" tee(1)
.xx "" "" "pix: Pascal interpreter and executor." "" pix(1)
.xx "" "bg:" "place job in background." "" csh(1)
.xx "" "fish:" "play ``Go Fish''." "" fish(6)
.xx "" "mille:" "play Mille Bournes." "" mille(6)
.xx "" "boggle:" "play the game of boggle." "" boggle(6)
.xx "" "" "plot: graphics filters." "" plot(1G)
.xx "" "" "plot: graphics interface." "" plot(5)
.xx "" "" "plot: openpl et al.: graphics interface." "" plot(3x)
.xx "" "cifplot: CIF interpreter and" "plotter." "" cifplot(1)
.xx "" "vtroff: troff to a raster" "plotter." "" vtroff(1)
.xx "" "lseek, tell: move read/write" "pointer." "" lseek(2)
.xx "" "popd:" "pop shell directory stack." "" csh(1)
.xx "" "" "popd: pop shell directory stack." "" csh(1)
.xx "" "" "popen, pclose: initiate I/O to/from a process." "" popen(3S)
.xx "" "ttytype: data base of terminal types by" "port." "" ttytype(5)
.xx "" "prmail: print out mail in the" "post office." "" prmail(1)
.xx "" "analyze: Virtual UNIX" "postmortem crash analyzer." "" analyze(8)
.xx "root." "exp, log, log10," "pow, sqrt: exponential, logarithm, power, square" "" exp(3M)
.xx "" "exp, log, log10, pow, sqrt: exponential, logarithm," "power, square root." "" exp(3M)
.xx "" "" "pr: print file." "" pr(1)
.xx "" "print:" "pr to the line printer." "" print(1)
.xx "" "kill: terminate a process with extreme" "prejudice." "" kill(1)
.xx "" "monitor:" "prepare execution profile." "" monitor(3)
.xx "" "colcrt: filter nroff output for CRT" "previewing." "" colcrt(1)
.xx "" "types:" "primitive system data types." "" types(5)
.xx "" "cat: catenate and" "print." "" cat(1)
.xx "" "fortune:" "print a random, hopefully interesting, adage." "" fortune(6)
.xx "" "date:" "print and set the date." "" date(1)
.xx "" "cal:" "print calendar." "" cal(1)
.xx "" "hashstat:" "print command hashing statistics." "" csh(1)
.xx "" "netq:" "print contents of network queue." "" netq(1)
.xx "" "jobs:" "print current job list." "" csh(1)
.xx "" "whoami:" "print effective current user id." "" whoami(1)
.xx "" "pr:" "print file." "" pr(1)
.xx "" "history:" "print history event list." "" csh(1)
.xx "" "banner:" "print large banner on printer." "" banner(6)
.xx "" "lpr, lprm, lpq," "print: line printer spooler." "" lpr(1)
.xx "" "nm:" "print name list." "" nm(1)
.xx "" "vfontinfo: inspect and" "print out information about unix fonts." "" vfontinfo(1)
.xx "" "prmail:" "print out mail in the post office." "" prmail(1)
.xx "" "printenv:" "print out the environment." "" printenv(1)
.xx "" "man: find manual information by keywords;" "print out the manual." "" man(1)
.xx "" "" "print: pr to the line printer." "" print(1)
.xx "" "vpac:" "print raster printer/ploter accounting information." "" vpac(8)
.xx "" "pstat:" "print system facts." "" pstat(8)
.xx "" "netlog:" "print the last few lines of the network log file." "" netlog(1)
.xx "" "dumpdir:" "print the names of files on a dump tape." "" dumpdir(8)
.xx "" "diction,explain:" "print wordy sentences; thesaurus for diction." "" diction(1)
.xx "" "diction,explain:" "print wordy sentences; thesaurus for diction." "" explain(1)
.xx "file." "strings: find the" "printable strings in a object, or other binary," "" strings(1)
.xx "" "" "printenv: print out the environment." "" printenv(1)
.xx "" "banner: print large banner on" "printer." "" banner(6)
.xx "" "lp: line" "printer." "" lp(4)
.xx "" "print: pr to the line" "printer." "" print(1)
.xx "" "lpr, lprm, lpq, print: line" "printer spooler." "" lpr(1)
.xx "" "vpac: print raster" "printer/ploter accounting information." "" vpac(8)
.xx "" "vpr, vprm, vpq, vprint: raster" "printer/plotter spooler." "" vpr(1)
.xx "conversion." "" "printf, fprintf, sprintf: formatted output" "" printf(3S)
.xx "" "nice: set program" "priority." "" nice(2)
.xx "" "nice, nohup: run a command at low" "priority (\fIsh\fR only)." "" nice(1)
.xx "" "renice: alter" "priority of running process by changing nice." "" renice(8)
.xx "" "nice: run low" "priority process." "" csh(1)
.xx "" "" "prmail: print out mail in the post office." "" prmail(1)
.xx "" "adduser:" "procedure for adding new users." "" adduser(8)
.xx "" "reboot: UNIX bootstrapping" "procedures." "" reboot(8)
.xx "" "nice: run low priority" "process." "" csh(1)
.xx "" "stop: halt a job or" "process." "" csh(1)
.xx "" "exit: terminate" "process." "" exit(2)
.xx "" "fork: spawn new" "process." "" fork(2)
.xx "" "kill: send signal to a" "process." "" kill(2)
.xx "" "popen, pclose: initiate I/O to/from a" "process." "" popen(3S)
.xx "" "wait: await completion of" "process." "" wait(1)
.xx "" "renice: alter priority of running" "process by changing nice." "" renice(8)
.xx "" "init:" "process control initialization." "" init(8)
.xx "" "killpg: send signal to a process or a" "process group." "" killpg(2j)
.xx "" "setpgrp, getpgrp: set/get" "process group." "" setpgrp(2j)
.xx "" "getpid: get" "process identification." "" getpid(2)
.xx "" "vfork: spawn new" "process in a virtual memory efficient way." "" vfork(2v)
.xx "" "onintr:" "process interrupts in command scripts." "" csh(1)
.xx "" "killpg: send signal to a" "process or a process group." "" killpg(2j)
.xx "" "ps:" "process status." "" ps(1)
.xx "" "times: get" "process times." "" times(2)
.xx "" "wait: wait for" "process to terminate." "" wait(2)
.xx "" "wait3: wait for" "process to terminate." "" wait3(2j)
.xx "" "ptrace:" "process trace." "" ptrace(2)
.xx "" "kill: terminate a" "process with extreme prejudice." "" kill(1)
.xx "" "kill: kill jobs and" "processes." "" csh(1)
.xx "" "wait: wait for background" "processes to complete." "" csh(1)
.xx "" "awk: pattern scanning and" "processing language." "" awk(1)
.xx "" "halt: halt the" "processor." "" halt(8)
.xx "" "m4: macro" "processor." "" m4(1)
.xx "" "reboot: reboot system or halt" "processor." "" reboot(2v)
.xx "" "" "prof: display profile data." "" prof(1)
.xx "" "" "profil: execution time profile." "" profil(2)
.xx "" "monitor: prepare execution" "profile." "" monitor(3)
.xx "" "profil: execution time" "profile." "" profil(2)
.xx "" "prof: display" "profile data." "" prof(1)
.xx "" "pxp: Pascal execution" "profiler." "" pxp(1)
.xx "" "end, etext, edata: last locations in" "program." "" end(3)
.xx "" "finger: user information lookup" "program." "" finger(1)
.xx "" "liszt: compile a Franz Lisp" "program." "" liszt(1)
.xx "" "lxref: lisp cross reference" "program." "" lxref(1)
.xx "" "msgs: system messages and junk mail" "program." "" msgs(1)
.xx "" "pxref: Pascal cross-reference" "program." "" pxref(1)
.xx "" "units: conversion" "program." "" units(1)
.xx "" "whereis: locate source, binary, and or manual for" "program." "" whereis(1)
.xx "" "cb: C" "program beautifier." "" cb(1)
.xx "only)." "which: locate a" "program file including aliases and paths (\fIcsh\fR" "" which(1)
.xx "" "make: maintain" "program groups." "" make(1)
.xx "" "nice: set" "program priority." "" nice(2)
.xx "" "assert:" "program verification." "" assert(3x)
.xx "" "lint: a C" "program verifier." "" lint(1)
.xx "" "lex: generator of lexical analysis" "programs." "" lex(1)
.xx "" "old: directory of old" "programs." "" old(8)
.xx "" "struct: structure Fortran" "programs." "" struct(1)
.xx "" "vgrind: grind nice listings of C" "programs." "" vgrind(1)
.xx "" "xstr: extract strings from C" "programs to implement shared strings." "" xstr(1)
.xx "" "arithmetic:" "provide drill in number facts." "" arithmetic(6)
.xx "machine." "netlogin:" "provide login name and password for a remote" "" netlogin(1)
.xx "" "true, false:" "provide truth values." "" true(1)
.xx "" "" "ps: process status." "" ps(1)
.xx "" "mail:" "pseudo-device for mail notification." "" mail(4)
.xx "" "" "pstat: print system facts." "" pstat(8)
.xx "" "" "pti: phototypesetter interpreter." "" pti(1)
.xx "" "" "ptrace: process trace." "" ptrace(2)
.xx "" "" "ptx: permuted index." "" ptx(1)
.xx "" "ungetc:" "push character back into input stream." "" ungetc(3S)
.xx "" "pushd:" "push shell directory stack." "" csh(1)
.xx "" "" "pushd: push shell directory stack." "" csh(1)
.xx "" "puts, fputs:" "put a string on a stream." "" puts(3S)
.xx "" "putc, putchar, fputc, putw:" "put character or word on a stream." "" putc(3S)
.xx "on a stream." "" "putc, putchar, fputc, putw: put character or word" "" putc(3S)
.xx "stream." "putc," "putchar, fputc, putw: put character or word on a" "" putc(3S)
.xx "" "" "puts, fputs: put a string on a stream." "" puts(3S)
.xx "" "putc, putchar, fputc," "putw: put character or word on a stream." "" putc(3S)
.xx "" "" "pwd: working directory name." "" pwd(1)
.xx "" "" "px: Pascal interpreter." "" px(1)
.xx "" "" "pxp: Pascal execution profiler." "" pxp(1)
.xx "" "" "pxref: Pascal cross-reference program." "" pxref(1)
.xx "" "" "qsort: quicker sort." "" qsort(3)
.xx "" "netq: print contents of network" "queue." "" netq(1)
.xx "" "netrm: remove a command from the network" "queue." "" netrm(1)
.xx "" "qsort:" "quicker sort." "" qsort(3)
.xx "" "" "quiz: test your knowledge." "" quiz(6)
.xx "" "" "quot: summarize file system ownership." "" quot(8)
.xx "" "rv:" "Racal/Vadic ACU interface." "" rv(4)
.xx "" "" "rand, srand: random number generator." "" rand(3)
.xx "" "fortune: print a" "random, hopefully interesting, adage." "" fortune(6)
.xx "" "ranlib: convert archives to" "random libraries." "" ranlib(1)
.xx "" "rand, srand:" "random number generator." "" rand(3)
.xx "" "" "ranlib: convert archives to random libraries." "" ranlib(1)
.xx "" "vtroff: troff to a" "raster plotter." "" vtroff(1)
.xx "" "vpac: print" "raster printer/ploter accounting information." "" vpac(8)
.xx "" "vpr, vprm, vpq, vprint:" "raster printer/plotter spooler." "" vpr(1)
.xx "" "" "ratfor: rational Fortran dialect." "" ratfor(1)
.xx "" "ratfor:" "rational Fortran dialect." "" ratfor(1)
.xx "" "" "rc: command script for auto-reboot and daemons." "" rc(8)
.xx "" "getpass:" "read a password." "" getpass(3)
.xx "" "source:" "read commands from file." "" csh(1)
.xx "" "read:" "read from file." "" read(2)
.xx "" "netmail:" "read mail on a remote machine over the network." "" netmail(1)
.xx "" "" "read: read from file." "" read(2)
.xx "wait:/" "/cd, eval, exec, exit, export, login, newgrp," "read, readonly, set, shift, times, trap, umask," "" sh(1)
.xx "" "vread:" "read virtually." "" vread(2v)
.xx "" "open: open for" "reading or writing." "" open(2)
.xx "" "/cd, eval, exec, exit, export, login, newgrp, read," "readonly, set, shift, times, trap, umask, wait:/" "" sh(1)
.xx "" "lseek, tell: move" "read/write pointer." "" lseek(2)
.xx "" "malloc, free," "realloc, calloc: main memory allocator." "" malloc(3)
.xx "" "symorder:" "rearrange name list." "" symorder(1)
.xx "" "" "reboot: reboot system or halt processor." "" reboot(2v)
.xx "" "reboot:" "reboot system or halt processor." "" reboot(2v)
.xx "" "" "reboot: UNIX bootstrapping procedures." "" reboot(8)
.xx "" "newaliases:" "rebuild the data base for the mail aliases file." "" newaliases(1)
.xx "" "mail: send and" "receive mail." "" mail(1)
.xx "" "mail: send or" "receive mail among users." "" binmail(1)
.xx "" "" "re_comp, re_exec: regular expression handler." "" regex(3)
.xx "" "rehash:" "recompute command hash table." "" csh(1)
.xx "" "utmp, wtmp: login" "records." "" utmp(5)
.xx "" "eyacc: modified yacc allowing much improved error" "recovery." "" eyacc(1)
.xx "" "eval:" "re-evaluate shell data." "" csh(1)
.xx "" "re_comp," "re_exec: regular expression handler." "" regex(3)
.xx "references in documents." "" "refer, lookbib: find and insert literature" "" refer(1)
.xx "" "lxref: lisp cross" "reference program." "" lxref(1)
.xx "" "refer, lookbib: find and insert literature" "references in documents." "" refer(1)
.xx "" "re_comp, re_exec:" "regular expression handler." "" regex(3)
.xx "" "" "rehash: recompute command hash table." "" csh(1)
.xx "" "comm: select or" "reject lines common to two sorted files." "" comm(1)
.xx "" "lorder: find ordering" "relation for an object library." "" lorder(1)
.xx "" "join:" "relational database operator." "" join(1)
.xx "" "strip: remove symbols and" "relocation bits." "" strip(1)
.xx "" "leave:" "remind you when you have to leave." "" leave(1)
.xx "" "calendar:" "reminder service." "" calendar(1)
.xx "" "netcp:" "remote copy of files through the net." "" netcp(1)
.xx "" "uusend: send a file to a" "remote host." "" uusend(1C)
.xx "" "netlpr: use a" "remote lineprinter through the net." "" netlpr(1)
.xx "" "net: execute a command on a" "remote machine." "" net(1)
.xx "" "netlogin: provide login name and password for a" "remote machine." "" netlogin(1)
.xx "" "netmail: read mail on a" "remote machine over the network." "" netmail(1)
.xx "" "netrm:" "remove a command from the network queue." "" netrm(1)
.xx "" "unalias:" "remove aliases." "" csh(1)
.xx "" "colrm:" "remove columns from a file." "" colrm(1)
.xx "" "unlink:" "remove directory entry." "" unlink(2)
.xx "" "unsetenv:" "remove environment variables." "" csh(1)
.xx "" "mount, umount: mount or" "remove file system." "" mount(2)
.xx "" "deroff:" "remove nroff, troff, tbl and eqn constructs." "" deroff(1)
.xx "" "unlimit:" "remove resource limitiations." "" csh(1)
.xx "" "strip:" "remove symbols and relocation bits." "" strip(1)
.xx "" "rm, rmdir:" "remove (unlink) files." "" rm(1)
.xx "" "mv: move or" "rename files." "" mv(1)
.xx "changing nice." "" "renice: alter priority of running process by" "" renice(8)
.xx "" "fsck: file system consistency check and interactive" "repair." "" fsck(8)
.xx "" "while:" "repeat commands conditionally." "" csh(1)
.xx "" "" "repeat: execute command repeatedly." "" csh(1)
.xx "" "uniq: report" "repeated lines in a file." "" uniq(1)
.xx "" "repeat: execute command" "repeatedly." "" csh(1)
.xx "" "yes: be" "repetitively affirmative." "" yes(1)
.xx "" ".UC 4 iostat:" "report I/O statistics." "" iostat(1)
.xx "" "uniq:" "report repeated lines in a file." "" uniq(1)
.xx "" "vmstat:" "report virtual memory statistics." "" vmstat(1)
.xx "" "fseek, ftell, rewind:" "reposition a stream." "" fseek(3S)
.xx "" "notify:" "request immediate notification." "" csh(1)
.xx "" "lock:" "reserve a terminal." "" lock(1)
.xx "" "" "reset: reset the teletype bits to a sensible state." "" reset(1)
.xx "" "reset:" "reset the teletype bits to a sensible state." "" reset(1)
.xx "" "vlimit: control maximum system" "resource consumption." "" vlimit(2v)
.xx "" "limit: alter per-process" "resource limitations." "" csh(1)
.xx "" "unlimit: remove" "resource limitiations." "" csh(1)
.xx "" "vtimes: get information about" "resource utilization." "" vtimes(2v)
.xx "" "" "restor: incremental file system restore." "" restor(8)
.xx "" "restor: incremental file system" "restore." "" restor(8)
.xx "" "suspend: suspend a shell," "resuming its superior." "" csh(1)
.xx "" "" "rev: reverse lines of a file." "" rev(1)
.xx "" "col: filter" "reverse line feeds." "" col(1)
.xx "" "rev:" "reverse lines of a file." "" rev(1)
.xx "" "lastcomm: show last commands executed in" "reverse order." "" lastcomm(1)
.xx "" "fseek, ftell," "rewind: reposition a stream." "" fseek(3S)
.xx "" "" "rewind: rewind tape drive." "" rewind(1)
.xx "" "rewind:" "rewind tape drive." "" rewind(1)
.xx "" "ht:" "RH-11/TE-16 magtape interface." "" ht(4)
.xx "" "strcmp, strncmp, strcpy, strncpy, strlen, index," "rindex: string operations." "strcat, strncat," string(3)
.xx "" "call:" "ring a telephone." "" call(1C)
.xx "" "" "rk: RK-11/RK07." "" rk(4)
.xx "" "rk:" "RK-11/RK07." "" rk(4)
.xx "" "" "rm, rmdir: remove (unlink) files." "" rm(1)
.xx "" "hp: RP06," "RM03, RM-05 moving-head disk." "" hp(4)
.xx "" "hp: RP06, RM03," "RM-05 moving-head disk." "" hp(4)
.xx "" "rm," "rmdir: remove (unlink) files." "" rm(1)
.xx "" "pow, sqrt: exponential, logarithm, power, square" "root." "exp, log, log10," exp(3M)
.xx "" "tgoto, tputs: terminal independent operation" "routines." "tgetent, tgetnum, tgetflag, tgetstr," termcap(3)
.xx "" "hp:" "RP06, RM03, RM-05 moving-head disk." "" hp(4)
.xx "" "nice, nohup:" "run a command at low priority (\fIsh\fR only)." "" nice(1)
.xx "" "nohup:" "run command immune to hangups." "" csh(1)
.xx "" "nice:" "run low priority process." "" csh(1)
.xx "" "renice: alter priority of" "running process by changing nice." "" renice(8)
.xx "" "" "rv: Racal/Vadic ACU interface." "" rv(4)
.xx "" "" "sa, accton: system accounting." "" sa(8)
.xx "" "brk," "sbrk, break: change core allocation." "" brk(2)
.xx "" "up: emulex" "sc21/ampex 9300 UNIBUS moving head disk." "" up(4)
.xx "" "" "scanf, fscanf, sscanf: formatted input conversion." "" scanf(3S)
.xx "" "awk: pattern" "scanning and processing language." "" awk(1)
.xx "" "alarm:" "schedule signal after specified time." "" alarm(2)
.xx "" "clear: clear terminal" "screen." "" clear(1)
.xx "" "curses:" "screen functions with ``optimal'' cursor motion." "" curses(3)
.xx "ex." "vi:" "screen oriented (visual) display editor based on" "" vi(1)
.xx "" "rc: command" "script for auto-reboot and daemons." "" rc(8)
.xx "" "" "script: make typescript of terminal session." "" script(1)
.xx "" "onintr: process interrupts in command" "scripts." "" csh(1)
.xx "" "" "sdb: symbolic debugger." "" sdb(1)
.xx "" "grep, egrep, fgrep:" "search a file for a pattern." "" grep(1)
.xx "" "xsend, xget, enroll:" "secret mail." "" xsend(1)
.xx "" "" "sed: stream editor." "" sed(1)
.xx "" "" "see: see what a file has in it." "" see(1)
.xx "" "see:" "see what a file has in it." "" see(1)
.xx "" "comm:" "select or reject lines common to two sorted files." "" comm(1)
.xx "" "case:" "selector in switch." "" csh(1)
.xx "" "uusend:" "send a file to a remote host." "" uusend(1C)
.xx "" "mail:" "send and receive mail." "" mail(1)
.xx "" "mail:" "send or receive mail among users." "" binmail(1)
.xx "" "kill:" "send signal to a process." "" kill(2)
.xx "" "killpg:" "send signal to a process or a process group." "" killpg(2j)
.xx "" "reset: reset the teletype bits to a" "sensible state." "" reset(1)
.xx "" "diction,explain: print wordy" "sentences; thesaurus for diction." "" diction(1)
.xx "" "diction,explain: print wordy" "sentences; thesaurus for diction." "" explain(1)
.xx "" "calendar: reminder" "service." "" calendar(1)
.xx "" "logout: end" "session." "" csh(1)
.xx "" "script: make typescript of terminal" "session." "" script(1)
.xx "" "ascii: map of ASCII character" "set." "" ascii(7)
.xx "" "" "set: change value of shell variable." "" csh(1)
.xx "" "umask:" "set file creation mode mask." "" umask(2)
.xx "" "utime:" "set file times." "" utime(2)
.xx "" "nice:" "set program priority." "" nice(2)
.xx "" "/exec, exit, export, login, newgrp, read, readonly," "set, shift, times, trap, umask, wait: command/" "" sh(1)
.xx "" "getty:" "set terminal mode." "" getty(8)
.xx "" "tset:" "set terminal modes." "" tset(1)
.xx "" "stty:" "set terminal options." "" stty(1)
.xx "" "tabs:" "set terminal tabs." "" tabs(1)
.xx "" "date: print and" "set the date." "" date(1)
.xx "" "stime:" "set time." "" stime(2)
.xx "" "setuid, setgid:" "set user and group ID." "" setuid(2)
.xx "" "setenv:" "set variable in environment." "" csh(1)
.xx "" "" "setbuf: assign buffering to a stream." "" setbuf(3S)
.xx "" "" "setenv: set variable in environment." "" csh(1)
.xx "entry." "getfsent, getfsspec, getfsfile," "setfsent, endfsent: get file system descriptor file" "" getfsent(3)
.xx "" "setpgrp, getpgrp:" "set/get process group." "" setpgrp(2j)
.xx "" "setuid," "setgid: set user and group ID." "" setuid(2)
.xx "" "getgrent, getgrgid, getgrnam," "setgrent, endgrent: get group file entry." "" getgrent(3)
.xx "" "" "setjmp, longjmp: non-local goto." "" setjmp(3)
.xx "" "crypt," "setkey, encrypt: DES encryption." "" crypt(3)
.xx "" "" "setpgrp, getpgrp: set/get process group." "" setpgrp(2j)
.xx "" "getpwent, getpwuid, getpwnam," "setpwent, endpwent: get password file entry." "" getpwent(3)
.xx "" "" "setuid, setgid: set user and group ID." "" setuid(2)
.xx "continue, cd, eval, exec, exit, export, login,/" "" "sh, for, case, if, while, \fB:\fP, \fB.\fP, break," "" sh(1)
.xx "" "xstr: extract strings from C programs to implement" "shared strings." "" xstr(1)
.xx "" "chsh: change default login" "shell." "" chsh(1)
.xx "" "exit: leave" "shell." "" csh(1)
.xx "" "system: issue a" "shell command." "" system(3)
.xx "" "csh: a" "shell (command interpreter) with C-like syntax." "" csh(1)
.xx "" "eval: re-evaluate" "shell data." "" csh(1)
.xx "" "popd: pop" "shell directory stack." "" csh(1)
.xx "" "pushd: push" "shell directory stack." "" csh(1)
.xx "" "alias:" "shell macros." "" csh(1)
.xx "" "suspend: suspend a" "shell, resuming its superior." "" csh(1)
.xx "" "set: change value of" "shell variable." "" csh(1)
.xx "" "@: arithmetic on" "shell variables." "" csh(1)
.xx "" "unset: discard" "shell variables." "" csh(1)
.xx "" "exec: overlay" "shell with specified command." "" csh(1)
.xx "" "" "shift: manipulate argument list." "" csh(1)
.xx "" "/exit, export, login, newgrp, read, readonly, set," "shift, times, trap, umask, wait: command language." "" sh(1)
.xx "" "uptime:" "show how long system has been up." "" uptime(1)
.xx "" "lastcomm:" "show last commands executed in reverse order." "" lastcomm(1)
.xx "construct a file." "what:" "show what versions of object modules were used to" "" what(1)
.xx "signals." "sigset, signal," "sighold, sigignore, sigrelse, sigpause: manage" "" sigset(3)
.xx "" "sigset, signal, sighold," "sigignore, sigrelse, sigpause: manage signals." "" sigset(3)
.xx "" "login:" "sign on." "" login(1)
.xx "" "pause: stop until" "signal." "" pause(2)
.xx "" "alarm: schedule" "signal after specified time." "" alarm(2)
.xx "" "" "signal: catch or ignore signals." "" signal(2)
.xx "manage signals." "sigset," "signal, sighold, sigignore, sigrelse, sigpause:" "" sigset(3)
.xx "" "kill: send" "signal to a process." "" kill(2)
.xx "" "killpg: send" "signal to a process or a process group." "" killpg(2j)
.xx "" "signal: catch or ignore" "signals." "" signal(2)
.xx "" "sighold, sigignore, sigrelse, sigpause: manage" "signals." "sigset, signal," sigset(3)
.xx "" "sigsys: catch or ignore" "signals." "" sigsys(2j)
.xx "" "sigset, signal, sighold, sigignore, sigrelse," "sigpause: manage signals." "" sigset(3)
.xx "" "sigset, signal, sighold, sigignore," "sigrelse, sigpause: manage signals." "" sigset(3)
.xx "sigpause: manage signals." "" "sigset, signal, sighold, sigignore, sigrelse," "" sigset(3)
.xx "" "" "sigsys: catch or ignore signals." "" sigsys(2j)
.xx "" "tc: photypesetter" "simulator." "" tc(1)
.xx "trigonometric functions." "" "sin, cos, tan, asin, acos, atan, atan2:" "" sin(3M)
.xx "" "" "sinh, cosh, tanh: hyperbolic functions." "" sinh(3M)
.xx "" "null: data" "sink." "" null(4)
.xx "" "size:" "size of an object file." "" size(1)
.xx "" "" "size: size of an object file." "" size(1)
.xx "" "" "sleep: suspend execution for an interval." "" sleep(1)
.xx "" "" "sleep: suspend execution for interval." "" sleep(3)
.xx "" "spline: interpolate" "smooth curve." "" spline(1G)
.xx "" "" "snake, snscore: display chase game." "" snake(6)
.xx "" "snake," "snscore: display chase game." "" snake(6)
.xx "" "" "soelim: eliminate \&.so's from nroff input." "" soelim(1)
.xx "" "qsort: quicker" "sort." "" qsort(3)
.xx "" "tsort: topological" "sort." "" tsort(1)
.xx "" "sort:" "sort or merge files." "" sort(1)
.xx "" "" "sort: sort or merge files." "" sort(1)
.xx "" "comm: select or reject lines common to two" "sorted files." "" comm(1)
.xx "" "look: find lines in a" "sorted list." "" look(1)
.xx "" "soelim: eliminate" "\&.so's from nroff input." "" soelim(1)
.xx "" "mkstr: create an error message file by massaging C" "source." "" mkstr(1)
.xx "" "whereis: locate" "source, binary, and or manual for program." "" whereis(1)
.xx "" "" "source: read commands from file." "" csh(1)
.xx "" "expand, unexpand: expand tabs to" "spaces, and vice versa." "" expand(1)
.xx "" "fork:" "spawn new process." "" fork(2)
.xx "way." "vfork:" "spawn new process in a virtual memory efficient" "" vfork(2v)
.xx "" "exec: overlay shell with" "specified command." "" csh(1)
.xx "" "alarm: schedule signal after" "specified time." "" alarm(2)
.xx "" "swapon:" "specify additional device for paging and swapping." "" swapon(8)
.xx "" "" "spell, spellin, spellout: find spelling errors." "" spell(1)
.xx "" "spell," "spellin, spellout: find spelling errors." "" spell(1)
.xx "" "spell, spellin, spellout: find" "spelling errors." "" spell(1)
.xx "" "spell, spellin," "spellout: find spelling errors." "" spell(1)
.xx "" "" "spline: interpolate smooth curve." "" spline(1G)
.xx "" "split:" "split a file into pieces." "" split(1)
.xx "" "frexp, ldexp, modf:" "split into mantissa and exponent." "" frexp(3)
.xx "" "" "split: split a file into pieces." "" split(1)
.xx "" "uuclean: uucp" "spool directory clean-up." "" uuclean(1C)
.xx "" "lpr, lprm, lpq, print: line printer" "spooler." "" lpr(1)
.xx "" "vpr, vprm, vpq, vprint: raster printer/plotter" "spooler." "" vpr(1)
.xx "" "printf, fprintf," "sprintf: formatted output conversion." "" printf(3S)
.xx "" "exp, log, log10, pow," "sqrt: exponential, logarithm, power, square root." "" exp(3M)
.xx "" "log10, pow, sqrt: exponential, logarithm, power," "square root." "exp, log," exp(3M)
.xx "" "rand," "srand: random number generator." "" rand(3)
.xx "" "scanf, fscanf," "sscanf: formatted input conversion." "" scanf(3S)
.xx "" "" "stab: symbol table types." "" stab(5)
.xx "" "popd: pop shell directory" "stack." "" csh(1)
.xx "" "pushd: push shell directory" "stack." "" csh(1)
.xx "" "stdio:" "standard buffered input/output package." "" stdio(3S)
.xx "" "gets: get a string from" "standard input." "" gets(1)
.xx "" "" "stat, fstat: get file status." "" stat(2)
.xx "" "reset: reset the teletype bits to a sensible" "state." "" reset(1)
.xx "" "if: conditional" "statement." "" csh(1)
.xx "" "fstab:" "static information about the filesystems." "" fstab(5)
.xx "" "hashstat: print command hashing" "statistics." "" csh(1)
.xx "" ".UC 4 iostat: report I/O" "statistics." "" iostat(1)
.xx "" "vmstat: report virtual memory" "statistics." "" vmstat(1)
.xx "" "ps: process" "status." "" ps(1)
.xx "" "stat, fstat: get file" "status." "" stat(2)
.xx "" "feof, ferror, clearerr, fileno: stream" "status inquiries." "" ferror(3S)
.xx "" "" "stdio: standard buffered input/output package." "" stdio(3S)
.xx "" "" "sticky: executable files with persistent text." "" sticky(8)
.xx "" "" "stime: set time." "" stime(2)
.xx "" "" "stop: halt a job or process." "" csh(1)
.xx "" "pause:" "stop until signal." "" pause(2)
.xx "" "icheck: file system" "storage consistency check." "" icheck(8)
.xx "subroutines." "dbminit, fetch," "store, delete, firstkey, nextkey: data base" "" dbm(3x)
.xx "strlen, index, rindex: string operations." "" "strcat, strncat, strcmp, strncmp, strcpy, strncpy," "" string(3)
.xx "rindex: string operations." "strcat, strncat," "strcmp, strncmp, strcpy, strncpy, strlen, index," "" string(3)
.xx "operations." "strcat, strncat, strcmp, strncmp," "strcpy, strncpy, strlen, index, rindex: string" "" string(3)
.xx "" "fclose, fflush: close or flush a" "stream." "" fclose(3S)
.xx "" "fopen, freopen, fdopen: open a" "stream." "" fopen(3S)
.xx "" "fseek, ftell, rewind: reposition a" "stream." "" fseek(3S)
.xx "" "getchar, fgetc, getw: get character or word from" "stream." "getc," getc(3S)
.xx "" "gets, fgets: get a string from a" "stream." "" gets(3S)
.xx "" "putchar, fputc, putw: put character or word on a" "stream." "putc," putc(3S)
.xx "" "puts, fputs: put a string on a" "stream." "" puts(3S)
.xx "" "setbuf: assign buffering to a" "stream." "" setbuf(3S)
.xx "" "ungetc: push character back into input" "stream." "" ungetc(3S)
.xx "" "sed:" "stream editor." "" sed(1)
.xx "" "feof, ferror, clearerr, fileno:" "stream status inquiries." "" ferror(3S)
.xx "" "gets, fgets: get a" "string from a stream." "" gets(3S)
.xx "" "gets: get a" "string from standard input." "" gets(1)
.xx "" "puts, fputs: put a" "string on a stream." "" puts(3S)
.xx "" "strncmp, strcpy, strncpy, strlen, index, rindex:" "string operations." "strcat, strncat, strcmp," string(3)
.xx "" "extract strings from C programs to implement shared" "strings." "xstr:" xstr(1)
.xx "other binary, file." "" "strings: find the printable strings in a object, or" "" strings(1)
.xx "strings." "xstr: extract" "strings from C programs to implement shared" "" xstr(1)
.xx "" "strings: find the printable" "strings in a object, or other binary, file." "" strings(1)
.xx "" "basename:" "strip filename affixes." "" basename(1)
.xx "" "" "strip: remove symbols and relocation bits." "" strip(1)
.xx "" "strcat, strncat, strcmp, strncmp, strcpy, strncpy," "strlen, index, rindex: string operations." "" string(3)
.xx "index, rindex: string operations." "strcat," "strncat, strcmp, strncmp, strcpy, strncpy, strlen," "" string(3)
.xx "string operations." "strcat, strncat, strcmp," "strncmp, strcpy, strncpy, strlen, index, rindex:" "" string(3)
.xx "" "strcat, strncat, strcmp, strncmp, strcpy," "strncpy, strlen, index, rindex: string operations." "" string(3)
.xx "" "" "struct: structure Fortran programs." "" struct(1)
.xx "" "struct:" "structure Fortran programs." "" struct(1)
.xx "" "ioctl," "stty, gtty: control device." "" ioctl(2)
.xx "" "" "stty: set terminal options." "" stty(1)
.xx "document." "" "style: analyze surface characteristics of a" "" style(1)
.xx "" "" "su: substitute user id temporarily." "" su(1)
.xx "" "fetch, store, delete, firstkey, nextkey: data base" "subroutines." "dbminit," dbm(3x)
.xx "" "su:" "substitute user id temporarily." "" su(1)
.xx "" "sum:" "sum and count blocks in a file." "" sum(1)
.xx "" "" "sum: sum and count blocks in a file." "" sum(1)
.xx "" "du:" "summarize disk usage." "" du(1)
.xx "" "quot:" "summarize file system ownership." "" quot(8)
.xx "" "jobs:" "summary of job control facilities." "" jobs(3j)
.xx "" "newtty:" "summary of the ``new'' tty driver." "" newtty(4)
.xx "" "sync: update the" "super block." "" sync(8)
.xx "" "update: periodically update the" "super block." "" update(8)
.xx "" "sync: update" "super-block." "" sync(2)
.xx "" "suspend: suspend a shell, resuming its" "superior." "" csh(1)
.xx "" "style: analyze" "surface characteristics of a document." "" style(1)
.xx "" "suspend:" "suspend a shell, resuming its superior." "" csh(1)
.xx "" "sleep:" "suspend execution for an interval." "" sleep(1)
.xx "" "sleep:" "suspend execution for interval." "" sleep(3)
.xx "" "" "suspend: suspend a shell, resuming its superior." "" csh(1)
.xx "" "" "swab: swap bytes." "" swab(3)
.xx "" "swab:" "swap bytes." "" swab(3)
.xx "" "vswapon: add a" "swap device for interleaved paging/swapping." "" vswapon(2v)
.xx "swapping." "" "swapon: specify additional device for paging and" "" swapon(8)
.xx "" "swapon: specify additional device for paging and" "swapping." "" swapon(8)
.xx "" "breaksw: exit from" "switch." "" csh(1)
.xx "" "case: selector in" "switch." "" csh(1)
.xx "" "default: catchall clause in" "switch." "" csh(1)
.xx "" "endsw: terminate" "switch." "" csh(1)
.xx "" "" "switch: multi-way command branch." "" csh(1)
.xx "" "stab:" "symbol table types." "" stab(5)
.xx "" "sdb:" "symbolic debugger." "" sdb(1)
.xx "" "strip: remove" "symbols and relocation bits." "" strip(1)
.xx "" "" "symorder: rearrange name list." "" symorder(1)
.xx "" "" "sync: update super-block." "" sync(2)
.xx "" "" "sync: update the super block." "" sync(8)
.xx "" "csh: a shell (command interpreter) with C-like" "syntax." "" csh(1)
.xx "" "" "syscall: indirect system call." "" syscall(2)
.xx "" "perror," "sys_errlist, sys_nerr: system error messages." "" perror(3)
.xx "" "perror, sys_errlist," "sys_nerr: system error messages." "" perror(3)
.xx "" "mkfs: construct a file" "system." "" mkfs(8)
.xx "" "mount, umount: mount or remove file" "system." "" mount(2)
.xx "" "mount, umount: mount and dismount file" "system." "" mount(8)
.xx "" "users: compact list of users who are on the" "system." "" users(1)
.xx "" "vadvise: give advice to paging" "system." "" vadvise(2v)
.xx "" "who: who is on the" "system." "" who(1)
.xx "" "rehash: recompute command hash" "table." "" csh(1)
.xx "" "unhash: discard command hash" "table." "" csh(1)
.xx "" "mtab: mounted file system" "table." "" mtab(5)
.xx "" "stab: symbol" "table types." "" stab(5)
.xx "" "tbl: format" "tables for nroff or troff." "" tbl(1)
.xx "" "tabs: set terminal" "tabs." "" tabs(1)
.xx "" "" "tabs: set terminal tabs." "" tabs(1)
.xx "" "expand, unexpand: expand" "tabs to spaces, and vice versa." "" expand(1)
.xx "" "ctags: create a" "tags file." "" ctags(1)
.xx "" "" "tail: deliver the last part of a file." "" tail(1)
.xx "functions." "sin, cos," "tan, asin, acos, atan, atan2: trigonometric" "" sin(3M)
.xx "" "sinh, cosh," "tanh: hyperbolic functions." "" sinh(3M)
.xx "" "dumpdir: print the names of files on a dump" "tape." "" dumpdir(8)
.xx "" "tp: manipulate" "tape archive." "" tp(1)
.xx "" "tar:" "tape archiver." "" tar(1)
.xx "" "rewind: rewind" "tape drive." "" rewind(1)
.xx "" "tm: tm11 magnetic" "tape driver." "" tm(4)
.xx "" "tp: DEC/mag" "tape formats." "" tp(5)
.xx "" "" "tar: tape archiver." "" tar(1)
.xx "" "deroff: remove nroff, troff," "tbl and eqn constructs." "" deroff(1)
.xx "" "" "tbl: format tables for nroff or troff." "" tbl(1)
.xx "" "" "tc: photypesetter simulator." "" tc(1)
.xx "" "" "tee: pipe fitting." "" tee(1)
.xx "" "tk: paginator for the" "Tektronix 4014." "" tk(1)
.xx "" "call: ring a" "telephone." "" call(1C)
.xx "" "reset: reset the" "teletype bits to a sensible state." "" reset(1)
.xx "" "last: indicate last logins of users and" "teletypes." "" last(1)
.xx "" "lseek," "tell: move read/write pointer." "" lseek(2)
.xx "" "su: substitute user id" "temporarily." "" su(1)
.xx "" "" "termcap: terminal capability data base." "" termcap(5)
.xx "" "lock: reserve a" "terminal." "" lock(1)
.xx "" "ttyname, isatty, ttyslot: find name of a" "terminal." "" ttyname(3)
.xx "" "vhangup: virtually ``hangup'' the current control" "terminal." "" vhangup(2v)
.xx "" "termcap:" "terminal capability data base." "" termcap(5)
.xx "" "tgetent, tgetnum, tgetflag, tgetstr, tgoto, tputs:" "terminal independent operation routines." "" termcap(3)
.xx "" "ttys:" "terminal initialization data." "" ttys(5)
.xx "" "tty: general" "terminal interface." "" tty(4)
.xx "" "getty: set" "terminal mode." "" getty(8)
.xx "" "tset: set" "terminal modes." "" tset(1)
.xx "" "tty: get" "terminal name." "" tty(1)
.xx "" "stty: set" "terminal options." "" stty(1)
.xx "" "clear: clear" "terminal screen." "" clear(1)
.xx "" "script: make typescript of" "terminal session." "" script(1)
.xx "" "tabs: set" "terminal tabs." "" tabs(1)
.xx "" "ttytype: data base of" "terminal types by port." "" ttytype(5)
.xx "" "" "terminals: conventional names." "" term(7)
.xx "" "wait: wait for process to" "terminate." "" wait(2)
.xx "" "wait3: wait for process to" "terminate." "" wait3(2j)
.xx "" "kill:" "terminate a process with extreme prejudice." "" kill(1)
.xx "" "endif:" "terminate conditional." "" csh(1)
.xx "" "end:" "terminate loop." "" csh(1)
.xx "" "exit:" "terminate process." "" exit(2)
.xx "" "endsw:" "terminate switch." "" csh(1)
.xx "" "" "test: condition command." "" test(1)
.xx "" "quiz:" "test your knowledge." "" quiz(6)
.xx "" "sticky: executable files with persistent" "text." "" sticky(8)
.xx "" "ed:" "text editor." "" ed(1)
.xx "" "ex, edit:" "text editor." "" ex(1)
.xx "" "fmt: simple" "text formatter." "" fmt(1)
.xx "" "troff, nroff:" "text formatting and typesetting." "" troff(1)
.xx "terminal independent operation routines." "" "tgetent, tgetnum, tgetflag, tgetstr, tgoto, tputs:" "" termcap(3)
.xx "independent operation routines." "tgetent, tgetnum," "tgetflag, tgetstr, tgoto, tputs: terminal" "" termcap(3)
.xx "independent operation routines." "tgetent," "tgetnum, tgetflag, tgetstr, tgoto, tputs: terminal" "" termcap(3)
.xx "operation routines." "tgetent, tgetnum, tgetflag," "tgetstr, tgoto, tputs: terminal independent" "" termcap(3)
.xx "routines." "tgetent, tgetnum, tgetflag, tgetstr," "tgoto, tputs: terminal independent operation" "" termcap(3)
.xx "" "ccat: compress and uncompress files, and cat" "them." "compact, uncompact," compact(1)
.xx "" "diction,explain: print wordy sentences;" "thesaurus for diction." "" diction(1)
.xx "" "diction,explain: print wordy sentences;" "thesaurus for diction." "" explain(1)
.xx "" "w: who is on and what" "they are doing." "" w(1)
.xx "" "netcp: remote copy of files" "through the net." "" netcp(1)
.xx "" "netlpr: use a remote lineprinter" "through the net." "" netlpr(1)
.xx "" "alarm: schedule signal after specified" "time." "" alarm(2)
.xx "" "at: execute commands at a later" "time." "" at(1)
.xx "" "stime: set" "time." "" stime(2)
.xx "" "time, ftime: get date and" "time." "" time(2)
.xx "" "time:" "time a command." "" time(1)
.xx "" "time:" "time command." "" csh(1)
.xx "" "" "time, ftime: get date and time." "" time(2)
.xx "" "profil: execution" "time profile." "" profil(2)
.xx "" "" "time: time a command." "" time(1)
.xx "" "" "time: time command." "" csh(1)
.xx "" "gmtime, asctime, timezone: convert date and" "time to ASCII." "ctime, localtime," ctime(3)
.xx "" "times: get process" "times." "" times(2)
.xx "" "utime: set file" "times." "" utime(2)
.xx "" "" "times: get process times." "" times(2)
.xx "" "export, login, newgrp, read, readonly, set, shift," "times, trap, umask, wait: command language." "/exit," sh(1)
.xx "" "ctime, localtime, gmtime, asctime," "timezone: convert date and time to ASCII." "" ctime(3)
.xx "" "" "tk: paginator for the Tektronix 4014." "" tk(1)
.xx "" "" "tm: tm11 magnetic tape driver." "" tm(4)
.xx "" "tm:" "tm11 magnetic tape driver." "" tm(4)
.xx "" "popen, pclose: initiate I/O" "to/from a process." "" popen(3S)
.xx "" "tsort:" "topological sort." "" tsort(1)
.xx "" "" "touch: update date last modified of a file." "" touch(1)
.xx "" "" "tp: DEC/mag tape formats." "" tp(5)
.xx "" "" "tp: manipulate tape archive." "" tp(1)
.xx "" "tgetent, tgetnum, tgetflag, tgetstr, tgoto," "tputs: terminal independent operation routines." "" termcap(3)
.xx "" "" "tr: translate characters." "" tr(1)
.xx "" "ptrace: process" "trace." "" ptrace(2)
.xx "" "uuencode,uudecode: encode/decode a binary file for" "tranmission via mail." "" uuencode(1C)
.xx "" "goto: command" "transfer." "" csh(1)
.xx "" "tr:" "translate characters." "" tr(1)
.xx "macros." "trman:" "translate version 6 manual macros to version 7" "" trman(1)
.xx "" "pi: Pascal interpreter code" "translator." "" pi(1)
.xx "" "login, newgrp, read, readonly, set, shift, times," "trap, umask, wait: command language." "/exit, export," sh(1)
.xx "" "" "trek: trekkie game." "" trek(6)
.xx "" "trek:" "trekkie game." "" trek(6)
.xx "" "sin, cos, tan, asin, acos, atan, atan2:" "trigonometric functions." "" sin(3M)
.xx "7 macros." "" "trman: translate version 6 manual macros to version" "" trman(1)
.xx "" "tbl: format tables for nroff or" "troff." "" tbl(1)
.xx "" "" "troff, nroff: text formatting and typesetting." "" troff(1)
.xx "" "deroff: remove nroff," "troff, tbl and eqn constructs." "" deroff(1)
.xx "" "vtroff:" "troff to a raster plotter." "" vtroff(1)
.xx "" "nettroff:" "troff to the phototypesetter over the network." "" nettroff(1)
.xx "" "" "true, false: provide truth values." "" true(1)
.xx "" "true, false: provide" "truth values." "" true(1)
.xx "" "" "tset: set terminal modes." "" tset(1)
.xx "" "" "tsort: topological sort." "" tsort(1)
.xx "" "newtty: summary of the ``new''" "tty driver." "" newtty(4)
.xx "" "" "tty: general terminal interface." "" tty(4)
.xx "" "" "tty: get terminal name." "" tty(1)
.xx "" "greek: graphics for extended" "TTY-37 type-box." "" greek(7)
.xx "" "" "ttyname, isatty, ttyslot: find name of a terminal." "" ttyname(3)
.xx "" "" "ttys: terminal initialization data." "" ttys(5)
.xx "" "ttyname, isatty," "ttyslot: find name of a terminal." "" ttyname(3)
.xx "" "" "ttytype: data base of terminal types by port." "" ttytype(5)
.xx "" "file: determine file" "type." "" file(1)
.xx "" "greek: graphics for extended TTY-37" "type-box." "" greek(7)
.xx "" "stab: symbol table" "types." "" stab(5)
.xx "" "types: primitive system data" "types." "" types(5)
.xx "" "ttytype: data base of terminal" "types by port." "" ttytype(5)
.xx "" "" "types: primitive system data types." "" types(5)
.xx "" "script: make" "typescript of terminal session." "" script(1)
.xx "" "man: macros to" "typeset manual." "" man(7)
.xx "" "eqn, neqn, checkeq:" "typeset mathematics." "" eqn(1)
.xx "" "troff, nroff: text formatting and" "typesetting." "" troff(1)
.xx "" "" ".UC 4 iostat: report I/O statistics." "" iostat(1)
.xx "" "getpw: get name from" "uid." "" getpw(3)
.xx "" "" "ul: do underlining." "" ul(1)
.xx "" "" "umask: change or display file creation mask." "" csh(1)
.xx "" "" "umask: set file creation mode mask." "" umask(2)
.xx "" "newgrp, read, readonly, set, shift, times, trap," "umask, wait: command language." "/export, login," sh(1)
.xx "" "mount," "umount: mount and dismount file system." "" mount(8)
.xx "" "mount," "umount: mount or remove file system." "" mount(2)
.xx "" "" "unalias: remove aliases." "" csh(1)
.xx "cat them." "compact," "uncompact, ccat: compress and uncompress files, and" "" compact(1)
.xx "" "compact, uncompact, ccat: compress and" "uncompress files, and cat them." "" compact(1)
.xx "" "ul: do" "underlining." "" ul(1)
.xx "" "expand," "unexpand: expand tabs to spaces, and vice versa." "" expand(1)
.xx "" "" "ungetc: push character back into input stream." "" ungetc(3S)
.xx "" "" "unhash: discard command hash table." "" csh(1)
.xx "" "up: emulex sc21/ampex 9300" "UNIBUS moving head disk." "" up(4)
.xx "" "" "uniq: report repeated lines in a file." "" uniq(1)
.xx "" "mktemp: make a" "unique file name." "" mktemp(3)
.xx "" "" "units: conversion program." "" units(1)
.xx "" "cu: call" "UNIX." "" cu(1C)
.xx "" "learn: computer aided instruction about" "UNIX." "" learn(1)
.xx "" "reboot:" "UNIX bootstrapping procedures." "" reboot(8)
.xx "" "uux: unix to" "unix command execution." "" uux(1C)
.xx "" "uucp, uulog: unix to" "unix copy." "" uucp(1C)
.xx "" "vfontinfo: inspect and print out information about" "unix fonts." "" vfontinfo(1)
.xx "" "analyze: Virtual" "UNIX postmortem crash analyzer." "" analyze(8)
.xx "" "uux:" "unix to unix command execution." "" uux(1C)
.xx "" "uucp, uulog:" "unix to unix copy." "" uucp(1C)
.xx "" "" "unlimit: remove resource limitiations." "" csh(1)
.xx "" "rm, rmdir: remove" "(unlink) files." "" rm(1)
.xx "" "" "unlink: remove directory entry." "" unlink(2)
.xx "" "" "unset: discard shell variables." "" csh(1)
.xx "" "" "unsetenv: remove environment variables." "" csh(1)
.xx "" "uptime: show how long system has been" "up." "" uptime(1)
.xx "" "" "up: emulex sc21/ampex 9300 UNIBUS moving head disk." "" up(4)
.xx "" "touch:" "update date last modified of a file." "" touch(1)
.xx "" "" "update: periodically update the super block." "" update(8)
.xx "" "sync:" "update super-block." "" sync(2)
.xx "" "sync:" "update the super block." "" sync(8)
.xx "" "update: periodically" "update the super block." "" update(8)
.xx "" "" "uptime: show how long system has been up." "" uptime(1)
.xx "" "du: summarize disk" "usage." "" du(1)
.xx "" "netlpr:" "use a remote lineprinter through the net." "" netlpr(1)
.xx "" "what: show what versions of object modules were" "used to construct a file." "" what(1)
.xx "" "chfn: change full name of" "user." "" chfn(1)
.xx "" "login: login new" "user." "" csh(1)
.xx "" "write: write to another" "user." "" write(1)
.xx "" "setuid, setgid: set" "user and group ID." "" setuid(2)
.xx "" "getuid, getgid, geteuid, getegid: get" "user and group identity." "" getuid(2)
.xx "" "environ:" "user environment." "" environ(5)
.xx "" "whoami: print effective current" "user id." "" whoami(1)
.xx "" "su: substitute" "user id temporarily." "" su(1)
.xx "" "finger:" "user information lookup program." "" finger(1)
.xx "" "wtmp:" "user login history." "" wtmp(5)
.xx "" "adduser: procedure for adding new" "users." "" adduser(8)
.xx "" "mail: send or receive mail among" "users." "" binmail(1)
.xx "" "wall: write to all" "users." "" wall(1)
.xx "" "last: indicate last logins of" "users and teletypes." "" last(1)
.xx "" "" "users: compact list of users who are on the system." "" users(1)
.xx "" "users: compact list of" "users who are on the system." "" users(1)
.xx "" "vtimes: get information about resource" "utilization." "" vtimes(2v)
.xx "" "" "utime: set file times." "" utime(2)
.xx "" "" "utmp, wtmp: login records." "" utmp(5)
.xx "" "" "uuclean: uucp spool directory clean-up." "" uuclean(1C)
.xx "" "uuclean:" "uucp spool directory clean-up." "" uuclean(1C)
.xx "" "" "uucp, uulog: unix to unix copy." "" uucp(1C)
.xx "" "" "uudiff: directory comparison between machines." "" uudiff(1C)
.xx "" "uuencode: format of an encoded" "uuencode file." "" uuencode(5)
.xx "" "" "uuencode: format of an encoded uuencode file." "" uuencode(5)
.xx "tranmission via mail." "" "uuencode,uudecode: encode/decode a binary file for" "" uuencode(1C)
.xx "" "uucp," "uulog: unix to unix copy." "" uucp(1C)
.xx "" "" "uusend: send a file to a remote host." "" uusend(1C)
.xx "" "" "uux: unix to unix command execution." "" uux(1C)
.xx "" "" "va: Benson-Varian interface." "" va(4)
.xx "" "" "vadvise: give advice to paging system." "" vadvise(2v)
.xx "" "" "valloc: aligned memory allocator." "" valloc(3)
.xx "" "abs: integer absolute" "value." "" abs(3)
.xx "" "fabs, floor, ceil: absolute" "value, floor, ceiling functions." "" floor(3M)
.xx "" "getenv:" "value for environment name." "" getenv(3)
.xx "" "set: change" "value of shell variable." "" csh(1)
.xx "" "true, false: provide truth" "values." "" true(1)
.xx "" "" "varargs: variable argument list." "" varargs(3)
.xx "" "set: change value of shell" "variable." "" csh(1)
.xx "" "varargs:" "variable argument list." "" varargs(3)
.xx "" "setenv: set" "variable in environment." "" csh(1)
.xx "" "@: arithmetic on shell" "variables." "" csh(1)
.xx "" "unset: discard shell" "variables." "" csh(1)
.xx "" "unsetenv: remove environment" "variables." "" csh(1)
.xx "" "cons:" "VAX-11 console interface." "" cons(4)
.xx "" "assert: program" "verification." "" assert(3x)
.xx "" "lint: a C program" "verifier." "" lint(1)
.xx "" "expand, unexpand: expand tabs to spaces, and vice" "versa." "" expand(1)
.xx "" "vfont: font formats for the Benson-Varian or" "Versatec." "" vfont(5)
.xx "" "vp:" "Versatec interface." "" vp(4)
.xx "" "trman: translate" "version 6 manual macros to version 7 macros." "" trman(1)
.xx "" "trman: translate version 6 manual macros to" "version 7 macros." "" trman(1)
.xx "file." "what: show what" "versions of object modules were used to construct a" "" what(1)
.xx "Versatec." "" "vfont: font formats for the Benson-Varian or" "" vfont(5)
.xx "unix fonts." "" "vfontinfo: inspect and print out information about" "" vfontinfo(1)
.xx "efficient way." "" "vfork: spawn new process in a virtual memory" "" vfork(2v)
.xx "" "" "vgrind: grind nice listings of C programs." "" vgrind(1)
.xx "terminal." "" "vhangup: virtually ``hangup'' the current control" "" vhangup(2v)
.xx "" "vipw: edit the password file with" "vi." "" vipw(8)
.xx "on ex." "" "vi: screen oriented (visual) display editor based" "" vi(1)
.xx "" "encode/decode a binary file for tranmission" "via mail." "uuencode,uudecode:" uuencode(1C)
.xx "" "expand, unexpand: expand tabs to spaces, and" "vice versa." "" expand(1)
.xx "" "more, page: file perusal filter for crt" "viewing." "" more(1)
.xx "" "" "vipw: edit the password file with vi." "" vipw(8)
.xx "" "vfork: spawn new process in a" "virtual memory efficient way." "" vfork(2v)
.xx "" "vmstat: report" "virtual memory statistics." "" vmstat(1)
.xx "" "analyze:" "Virtual UNIX postmortem crash analyzer." "" analyze(8)
.xx "" "vread: read" "virtually." "" vread(2v)
.xx "" "vhangup:" "virtually ``hangup'' the current control terminal." "" vhangup(2v)
.xx "" "vwrite: write" "(virtually) to file." "" vwrite(2v)
.xx "" "vi: screen oriented" "(visual) display editor based on ex." "" vi(1)
.xx "consumption." "" "vlimit: control maximum system resource" "" vlimit(2v)
.xx "" "" "vmstat: report virtual memory statistics." "" vmstat(1)
.xx "" "filsys, flblk, ino: format of file system" "volume." "" filsys(5)
.xx "" "" "vp: Versatec interface." "" vp(4)
.xx "information." "" "vpac: print raster printer/ploter accounting" "" vpac(8)
.xx "" "vpr, vprm," "vpq, vprint: raster printer/plotter spooler." "" vpr(1)
.xx "spooler." "" "vpr, vprm, vpq, vprint: raster printer/plotter" "" vpr(1)
.xx "" "vpr, vprm, vpq," "vprint: raster printer/plotter spooler." "" vpr(1)
.xx "" "vpr," "vprm, vpq, vprint: raster printer/plotter spooler." "" vpr(1)
.xx "" "" "vread: read virtually." "" vread(2v)
.xx "paging/swapping." "" "vswapon: add a swap device for interleaved" "" vswapon(2v)
.xx "" "" "vtimes: get information about resource utilization." "" vtimes(2v)
.xx "" "" "vtroff: troff to a raster plotter." "" vtroff(1)
.xx "" "" "vwrite: write (virtually) to file." "" vwrite(2v)
.xx "" "" "w: who is on and what they are doing." "" w(1)
.xx "" "" "wait: await completion of process." "" wait(1)
.xx "" "read, readonly, set, shift, times, trap, umask," "wait: command language." "/export, login, newgrp," sh(1)
.xx "" "wait:" "wait for background processes to complete." "" csh(1)
.xx "" "wait:" "wait for process to terminate." "" wait(2)
.xx "" "wait3:" "wait for process to terminate." "" wait3(2j)
.xx "" "" "wait: wait for background processes to complete." "" csh(1)
.xx "" "" "wait: wait for process to terminate." "" wait(2)
.xx "" "" "wait3: wait for process to terminate." "" wait3(2j)
.xx "" "" "wall: write to all users." "" wall(1)
.xx "" "spawn new process in a virtual memory efficient" "way." "vfork:" vfork(2v)
.xx "" "" "wc: word count." "" wc(1)
.xx "" "what: show what versions of object modules" "were used to construct a file." "" what(1)
.xx "" "whatis: describe" "what a command is." "" whatis(1)
.xx "" "see: see" "what a file has in it." "" see(1)
.xx "" "crash:" "what happens when the system crashes." "" crash(8)
.xx "used to construct a file." "" "what: show what versions of object modules were" "" what(1)
.xx "" "w: who is on and" "what they are doing." "" w(1)
.xx "construct a file." "what: show" "what versions of object modules were used to" "" what(1)
.xx "" "" "whatis: describe what a command is." "" whatis(1)
.xx "" "crash: what happens" "when the system crashes." "" crash(8)
.xx "" "leave: remind you" "when you have to leave." "" leave(1)
.xx "program." "" "whereis: locate source, binary, and or manual for" "" whereis(1)
.xx "paths (\fIcsh\fR only)." "" "which: locate a program file including aliases and" "" which(1)
.xx "exec, exit, export, login,/" "sh, for, case, if," "while, \fB:\fP, \fB.\fP, break, continue, cd, eval," "" sh(1)
.xx "" "" "while: repeat commands conditionally." "" csh(1)
.xx "" "break: exit" "while/foreach loop." "" csh(1)
.xx "" "users: compact list of users" "who are on the system." "" users(1)
.xx "" "from:" "who is my mail from?." "" from(1)
.xx "" "w:" "who is on and what they are doing." "" w(1)
.xx "" "who:" "who is on the system." "" who(1)
.xx "" "biff: be notified if mail arrives and" "who it is from." "" biff(1)
.xx "" "" "who: who is on the system." "" who(1)
.xx "" "" "whoami: print effective current user id." "" whoami(1)
.xx "" "fold: fold long lines for finite" "width output device." "" fold(1)
.xx "" "hangman: guess the" "word." "" hangman(6)
.xx "" "wc:" "word count." "" wc(1)
.xx "" "getc, getchar, fgetc, getw: get character or" "word from stream." "" getc(3S)
.xx "" "putc, putchar, fputc, putw: put character or" "word on a stream." "" putc(3S)
.xx "" "diction,explain: print" "wordy sentences; thesaurus for diction." "" diction(1)
.xx "" "diction,explain: print" "wordy sentences; thesaurus for diction." "" explain(1)
.xx "" "cd: change" "working directory." "" cd(1)
.xx "" "chdir: change current" "working directory." "" chdir(2)
.xx "" "pwd:" "working directory name." "" pwd(1)
.xx "" "write:" "write on a file." "" write(2)
.xx "" "wall:" "write to all users." "" wall(1)
.xx "" "write:" "write to another user." "" write(1)
.xx "" "vwrite:" "write (virtually) to file." "" vwrite(2v)
.xx "" "" "write: write on a file." "" write(2)
.xx "" "" "write: write to another user." "" write(1)
.xx "" "open: open for reading or" "writing." "" open(2)
.xx "" "utmp," "wtmp: login records." "" utmp(5)
.xx "" "" "wtmp: user login history." "" wtmp(5)
.xx "" "" "wump: the game of hunt-the-wumpus." "" wump(6)
.xx "" "xsend," "xget, enroll: secret mail." "" xsend(1)
.xx "" "" "xsend, xget, enroll: secret mail." "" xsend(1)
.xx "shared strings." "" "xstr: extract strings from C programs to implement" "" xstr(1)
.xx "" "j0, j1, jn," "y0, y1, yn: bessel functions." "" j0(3M)
.xx "" "j0, j1, jn, y0," "y1, yn: bessel functions." "" j0(3M)
.xx "" "eyacc: modified" "yacc allowing much improved error recovery." "" eyacc(1)
.xx "" "" "yacc: yet another compiler-compiler." "" yacc(1)
.xx "" "" "yes: be repetitively affirmative." "" yes(1)
.xx "" "j0, j1, jn, y0, y1," "yn: bessel functions." "" j0(3M)
.xx "" "leave: remind you when" "you have to leave." "" leave(1)
.xx "" "leave: remind" "you when you have to leave." "" leave(1)
.xx "" "" "zork: the game of dungeon." "" zork(6)
