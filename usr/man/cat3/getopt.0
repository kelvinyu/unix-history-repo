


GETOPT(3)	    UNIX Programmer's Manual		GETOPT(3)



NNAAMMEE
     getopt - get option letter from argv

SSYYNNOOPPSSIISS
     iinntt ggeettoopptt((aarrggcc,, aarrggvv,, ooppttssttrriinngg))
     iinntt aarrggcc;;
     cchhaarr ****aarrggvv;;
     cchhaarr **ooppttssttrriinngg;;

     eexxtteerrnn cchhaarr **ooppttaarrgg;;
     eexxtteerrnn iinntt ooppttiinndd;;
     eexxtteerrnn iinntt oopptteerrrr;;

DDEESSCCRRIIPPTTIIOONN
     _G_e_t_o_p_t returns the next option letter in _a_r_g_v that matches a
     letter in _o_p_t_s_t_r_i_n_g.  _O_p_t_s_t_r_i_n_g is a string of recognized
     option letters; if a letter is followed by a colon, the
     option is expected to have an argument that may or may not
     be separated from it by white space.  _O_p_t_a_r_g is set to point
     to the start of the option argument on return from _g_e_t_o_p_t.

     _G_e_t_o_p_t places in _o_p_t_i_n_d the _a_r_g_v index of the next argument
     to be processed.  Because _o_p_t_i_n_d is external, it is normally
     initialized to zero automatically before the first call to
     _g_e_t_o_p_t.

     When all options have been processed (i.e., up to the first
     non-option argument), _g_e_t_o_p_t returns EEOOFF.	The special
     option ---- may be used to delimit the end of the options; EEOOFF
     will be returned, and ---- will be skipped.

DDIIAAGGNNOOSSTTIICCSS
     _G_e_t_o_p_t prints an error message on _s_t_d_e_r_r and returns a ques-
     tion mark (??) when it encounters an option letter not
     included in _o_p_t_s_t_r_i_n_g.  Setting _o_p_t_e_r_r to a zero will dis-
     able this error message.

EEXXAAMMPPLLEE
     The following code fragment shows how one might process the
     arguments for a command that can take the mutually exclusive
     options aa and bb, and the options ff and oo, both of which
     require arguments:

	  main(argc, argv)
	  int argc;
	  char **argv;
	  {
	       int c;
	       extern int optind;
	       extern char *optarg;
	       .
	       .



Printed 7/9/88		  July 9, 1988				1






GETOPT(3)	    UNIX Programmer's Manual		GETOPT(3)



	       .
	       while ((c = getopt(argc, argv, "abf:o:")) != EOF)
		    switch (c) {
		    case `a':
			 if (bflg)
			      errflg++;
			 else
			      aflg++;
			 break;
		    case `b':
			 if (aflg)
			      errflg++;
			 else
			      bproc();
			 break;
		    case `f':
			 ifile = optarg;
			 break;
		    case `o':
			 ofile = optarg;
			 break;
		    case `?':
		    default:
			 errflg++;
			 break;
		    }
	       if (errflg) {
		    fprintf(stderr, "Usage: ...");
		    exit(2);
	       }
	       for (; optind < argc; optind++) {
		    .
		    .
		    .
	       }
	       .
	       .
	       .
	  }

HHIISSTTOORRYY
     Written by Henry Spencer, working from a Bell Labs manual
     page.  Modified by Keith Bostic to behave more like the Sys-
     tem V version.

BBUUGGSS
     ``-'' may be specified as an option letter, however it
     should never have an argument associated with it.	This
     allows getopt to be used with programs that think that ``-''
     means standard input.





Printed 7/9/88		  July 9, 1988				2






GETOPT(3)	    UNIX Programmer's Manual		GETOPT(3)



     Option arguments are allowed to begin with ``-''; this is
     reasonable but reduces the amount of error checking possi-
     ble.

     _G_e_t_o_p_t is quite flexible but the obvious price must be paid:
     there is much it could do that it doesn't, like checking
     mutually exclusive options, checking type of option argu-
     ments, etc.















































Printed 7/9/88		  July 9, 1988				3



