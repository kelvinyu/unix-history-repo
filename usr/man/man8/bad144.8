.TH BAD144 8
.UC 4
.SH NAME
bad144 \- read/write dec standard 144 bad sector information
.SH SYNOPSIS
.B bad144
disktype disk
[ sno [
bad ...
] ]
.SH DESCRIPTION
.I Bad144
can be used to inspect the information stored on a disk that is used by
the disk drivers to implement bad sector forwarding.  The format of
the information is specified by DEC standard 144, as follows.
.PP
The bad sector information is located in the first 5 even numbered sectors
of the last track of the disk pack.  There are five identical copies of
the information, described by the dkbad structure.
.PP
Replacement sectors are allocated starting with the first sector before
the bad sector information and working backwards towards the beginning
of the disk.  A maximum of 126 bad sectors are supported.  The position
of the bad sector in the bad sector table determines which replacement
sector it corresponds to.
.PP
The bad sector information and replacement sectors are conventionally
only accessable through the ``c'' file system partition of the disk.  If
that partition is used for a file system, the user is responsible for
making sure that it does not overlap the bad sector information or any
replacement sectors.
.PP
The bad sector structure is as follows:
.PP
.ta .75i 1.5i 3.5i
.nf
struct dkbad {
	long	bt_csn;	/* cartridge serial number */
	u_short	bt_mbz;	/* unused; should be 0 */
	u_short	bt_flag;	/* -1 => alignment cartridge */
	struct bt_bad {
		u_short bt_cyl;	/* cylinder number of bad sector */
		u_short bt_trksec;	/* track and sector number */
	} bt_bad[126];
};
.fi
.PP
Unused slots in the bt_bad array are filled with all bits set, a putatively
illegal value.
.PP
.I Bad144
is invoked by giving a device type (e.g. rk07, rm03, rm05, etc.), and a device
name (e.g. hk0, hp1, etc.).  It reads the first sector of the last track
of the corresponding disk and prints out the bad sector information.
It may also be invoked giving a serial number for the pack and a list
of bad sectors, and will then write the supplied information onto the
same location.  Note, however, that 
.I bad144
does not arrange for the specified sectors to be marked bad in this case.
This option should only be used to restore known bad sector information which
was destroyed.
.PP
New bad sectors can be added by running the standard DEC formatter in
section ``bad''.
.SH SEE ALSO
badsect (8), format (8)
.SH BUGS
It should be possible to both format disks on-line under UNIX and to change
the bad sector information, marking new bad sectors, without running
a standalone program.
.PP
The bootstrap drivers used to boot the system do not understand bad sectors,
handle ECC errors, or the special SSE (skip sector) errors of RM80 type disks.
This means that none of these errors can occur when reading the file
/vmunix to boot.  When a disk drive is used to load the bootstrap code
(the alternative would be that the bootstrap would be loaded from the console
media), sector 0 of the disk drive and the file /boot in the root file
system of that drive must also not have any of these errors in it.
.PP
The drivers which write a system core image on disk after a crash do not
handle errors; thus the crash dump area must be free of errors and bad
sectors.
