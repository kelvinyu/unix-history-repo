.TH CRASH 8 9/1/81
.UC 4
.SH NAME
crash \- what happens when the system crashes
.SH DESCRIPTION
This section explains what happens when the system crashes and how
you can analyze crash dumps.
.PP
When the system crashes voluntarily it prints a message of the form
.IP
panic: why i gave up the ghost
.LP
on the console, takes a dump on a mass storage peripheral,
and then invokes an automatic reboot procedure as
described in
.IR reboot (8).
(If auto-reboot is disabled on the front panel of the machine the system
will simply halt at this point.)
Unless some unexpected inconsistency is encountered in the state
of the file systems due to hardware or software failure the system
will then resume multi-user operations.
.PP
The system has a large number of internal consistency checks; if one
of these fails, then it will panic with a very short message indicating
which one failed.
.PP
The most common cause of system failures is hardware failure, which
can reflect itself in different ways.  Here are the messages which
you are likely to encounter, with some hints as to causes.
Left unstated in all cases is the possibility that hardware or software
error produced the message in some unexpected way.
.TP
IO err in push
.ns
.TP
hard IO err in swap
The system encountered an error trying to write to the paging device
or an error in reading critical information from a disk drive.
You should fix your disk if it is broken or unreliable.
.TP
timeout table overflow
.ns
This really shouldn't be a panic, but until we fix up the data structure
involved, running out of entries causes a crash.  If this happens,
you should make the timeout table bigger.
.TP
KSP not valid
.ns
.TP
SBI fault
.ns
.TP
CHM? in kernel
These indicate either a serious bug in the system or, more often,
a glitch or failing hardware.
If SBI faults recur, check out the hardware or call
field service.  If the other faults recur, there is likely a bug somewhere
in the system, although these can be caused by a flakey processor.
Run processor microdiagnostics.
.TP
machine check %x: \fIdescription\fR
.ns
.TP
\0\0\0\fImachine dependent machine-check information\fR
.ns
We should describe machine checks, and will someday.
For now, ask someone who knows (like your friendly field service people).
.TP
trap type %d, code=%d, pc=%x
A unexpected trap has occurred within the system; the trap types are:
.PP
.nf
0	reserved addressing fault
1	privileged instruction fault
2	reserved operand fault
3	bpt instruction fault
4	xfc instruction fault
5	system call trap
6	arithmetic trap
7	ast delivery trap
8	segmentation fault
9	protection fault
10	trace trap
11	compatibility mode fault
12	page fault
13	page table fault
.fi
.PP
The favorite trap type in system crashes is trap type 9, indicating
a wild reference.  The code is the referenced address, and the pc at the
time of the fault is printed.  These problems tend to be easy to track
down if they are kernel bugs since the processor stops cold, but random
flakiness seems to cause this sometimes, e.g. we have trapped with
code 80000800 three times in six months as an instruction fetch went across
this page boundary in the kernel but have been unable to find any reason
for this to have happened.
.TP
init died
The system initialization process has exited.  This is bad news, as no new
users will then be able to log in.  Rebooting is the only fix, so the
system just does it right away.
.PP
That completes the list of panic types you are likely to see.
.PP
When the system crashes it write (or at least attempts to write)
a image of the current memory into the back end of the primary swap
area.  After the system is rebooted, the program
.IR savecore (8)
runs and preserves a copy of this core image and the current
system in a specified directory for later perusal.  See
.IR savecore (8)
for details.
.PP
To analyze a dump you should begin by running
.I "ps \-alxk"
to print the process table at the time of the crash.
Use
.IR adb (1)
to examine
.IR /vmcore .
The location
.I _rpb+0t508
is the bottom of a stack onto which were pushed the stack pointer
.BR sp ,
.B PCBB
(containing the physical address of a
.IR u_area ),
.BR MAPEN ,
.BR IPL ,
and registers
.BR r13 \- r0
(in that order).
.BR r13 (fp)
is the system frame pointer and the stack is used in standard
.B calls
format.  Use
.IR  adb (1)
to get a reverse calling order.
In most cases this procedure will give
an idea of what is wrong.
A more complete discussion
of system debugging is impossible here.
See, however,
.IR analyze (8)
for some more hints.
.SH "SEE ALSO"
analyze(8), reboot(8)
.br
.I "VAX 11/780 System Maintenance Guide"
for more information about machine checks.
.SH BUGS
There should be a better program than
.IR analyze (8)
available which prints out more of the system
state symbolically after a crash to lessen the tedious
tasks involved in crash analysis.
