


WAIT(2)             UNIX Programmer's Manual		  WAIT(2)



NNAAMMEE
     wait, wait3 - wait for process to terminate

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//wwaaiitt..hh>>

     ppiidd == wwaaiitt((ssttaattuuss))
     iinntt ppiidd;;
     uunniioonn wwaaiitt **ssttaattuuss;;

     ppiidd == wwaaiitt((00))
     iinntt ppiidd;;

     ##iinncclluuddee <<ssyyss//ttiimmee..hh>>
     ##iinncclluuddee <<ssyyss//rreessoouurrccee..hh>>

     ppiidd == wwaaiitt33((ssttaattuuss,, ooppttiioonnss,, rruussaaggee))
     iinntt ppiidd;;
     uunniioonn wwaaiitt **ssttaattuuss;;
     iinntt ooppttiioonnss;;
     ssttrruucctt rruussaaggee **rruussaaggee;;

DDEESSCCRRIIPPTTIIOONN
     _W_a_i_t causes its caller to delay until a signal is received
     or one of its child processes terminates.	If any child has
     died since the last _w_a_i_t, return is immediate, returning the
     process id and exit status of one of the terminated chil-
     dren.  If there are no children, return is immediate with
     the value -1 returned.

     On return from a successful _w_a_i_t call, _s_t_a_t_u_s is nonzero,
     and the high byte of _s_t_a_t_u_s contains the low byte of the
     argument to _e_x_i_t supplied by the child process; the low byte
     of _s_t_a_t_u_s contains the termination status of the process.	A
     more precise definition of the _s_t_a_t_u_s word is given in
     <_s_y_s/_w_a_i_t._h>.

     _W_a_i_t_3 provides an alternate interface for programs that must
     not block when collecting the status of child processes.
     The _s_t_a_t_u_s parameter is defined as above.	The _o_p_t_i_o_n_s
     parameter is used to indicate the call should not block if
     there are no processes that wish to report status (WNOHANG),
     and/or that children of the current process that are stopped
     due to a SIGTTIN, SIGTTOU, SIGTSTP, or SIGSTOP signal should
     also have their status reported (WUNTRACED).  If _r_u_s_a_g_e is
     non-zero, a summary of the resources used by the terminated
     process and all its children is returned (this information
     is currently not available for stopped processes).

     When the WNOHANG option is specified and no processes wish
     to report status, _w_a_i_t_3 returns a _p_i_d of 0.  The WNOHANG and
     WUNTRACED options may be combined by _o_r'ing the two values.



Printed 7/9/88		  June 30, 1985                         1






WAIT(2)             UNIX Programmer's Manual		  WAIT(2)



NNOOTTEESS
     See _s_i_g_v_e_c(2) for a list of termination statuses (signals);
     0 status indicates normal termination.  A special status
     (0177) is returned for a stopped process that has not ter-
     minated and can be restarted; see _p_t_r_a_c_e(2).  If the 0200
     bit of the termination status is set, a core image of the
     process was produced by the system.

     If the parent process terminates without waiting on its
     children, the initialization process (process ID = 1) inher-
     its the children.

     _W_a_i_t and _w_a_i_t_3 are automatically restarted when a process
     receives a signal while awaiting termination of a child pro-
     cess.

RREETTUURRNN VVAALLUUEE
     If _w_a_i_t returns due to a stopped or terminated child pro-
     cess, the process ID of the child is returned to the calling
     process.  Otherwise, a value of -1 is returned and _e_r_r_n_o is
     set to indicate the error.

     _W_a_i_t_3 returns -1 if there are no children not previously
     waited for;  0 is returned if WNOHANG is specified and there
     are no stopped or exited children.

EERRRROORRSS
     _W_a_i_t will fail and return immediately if one or more of the
     following are true:

     [ECHILD]	    The calling process has no existing
		    unwaited-for child processes.

     [EFAULT]	    The _s_t_a_t_u_s or _r_u_s_a_g_e arguments point to an
		    illegal address.

SSEEEE AALLSSOO
     exit(2)

















Printed 7/9/88		  June 30, 1985                         2



