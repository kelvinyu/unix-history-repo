.TH CTAGS 1
.UC 4
.SH NAME
ctags \- create a tags file
.SH SYNOPSIS
.B ctags
[ 
.B \-w
] [
.B \-x
] [
.B \-u
]
name ...
.SH DESCRIPTION
.I Ctags
makes a tags file for
.IR ex (1)
from the specified C, Pascal and Fortran sources.
A tags file gives the locations of specified objects (in this case
functions) in a group of files.
Each line of the tags file contains the function name,
the file in which it is defined, and a scanning pattern used to find
the function definition.  These are given in separate fields on the line,
separated by blanks or tabs.
Using the
.I tags
file,
.I ex
can quickly find these function definitions.
.PP
If the
.B \-x
flag is given, 
.I ctags
produces a list of function names, the line number and file
name on which each is defined, as well as the text of that line
and prints this on the standard output.  This is a simple index
which can be printed out as an off-line readable function index.
.PP
Files whose name ends in 
.B \.c
or
.B \.h
are assumed to be C source files and are searched for C routine and
macro definitions.
Others are first examined to see if they contain any Pascal or
Fortran routine definitions; if not, they are processed again
looking for C definitions.
.PP
Options other than
.B \-x
are:
.TP 5
.B \-w
suppressing warning diagnostics.
.TP 5
.B \-u
causing the specified files to be
.I updated
in tags, that is, all references to them are deleted,
and the new values are appended to the file.
(Beware: this option is implemented in a way which is rather slow;
it is usually faster to simply rebuild the
.I tags
file.)
.PP
The tag
.I main
is treated specially in C programs.
The tag formed is created by prepending
.I M
to the name of the file, with a trailing .c removed, if
any, and leading pathname components also removed.
This makes use of
.I ctags
practical in directories with more than one program.
.SH FILES
.DT
tags		output tags file
.SH SEE ALSO
ex(1), vi(1)
.SH AUTHOR
Ken Arnold; FORTRAN added by Jim Kleckner; Bill Joy
added Pascal and
.B \-x,
replacing
.I cxref.
.SH BUGS
Recognition of \fBfunctions\fR, \fBsubroutines\fR and \fBprocedures\fR
for FORTRAN and Pascal is done is a very simpleminded way.
No attempt is made to deal with block structure; if you have two
Pascal procedures in different blocks with the same name you lose.
.PP
The method of deciding whether to look for C or Pascal and FORTRAN
functions is a hack.
