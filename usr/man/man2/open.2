.TH OPEN 2 2/13/83
.SH NAME
open \- open a file for reading or writing, or create a new file
.SH SYNOPSIS
.nf
.ft B
#include <sys/file.h>
.PP
.ft B
open(path, flags, mode)
char *path;
int flags, mode;
.fi
.SH DESCRIPTION
.I Open
opens the file
.I name
for reading and/or writing, as specified by the
.I flags
argument and returns a descriptor for that file.
The
.I flags
argument may indicate the file is to be
created if it does not already exist (by specifying the
FCREATE flag), in which case the file is created with mode
.I mode
as described in
.IR chmod (2)
and modified by the process' umask value (see
.IR umask (2)).
.PP
.I Name
is the address of a string of ascii characters representing
a path name, terminated by a null character.
The flags specified are formed by
.IR or 'ing
the following values
.PP
.RS
 FRDONLY	open for reading only
 FWRONLY	open for writing only
 FRDWR	open for reading and writing
 FAPPEND	append on each write
 FCREATE	create file if it does not exist
 FTRUNCATE	truncate size to 0
 FEXLOCK	apply advisory exclusive lock
 FSHLOCK	apply advisory shared lock
 FNBLOCK	do not block on open
.RE
.PP
Opening a file with FAPPEND set causes each write on the file
to be appended to the end.  If FTRUNCATE is specified and the
file exists, the file is truncated to zero length.
The FEXLOCK and FSHLOCK flags allow an advisory lock to be
applied, see
.IR flock (2).
If the FNBLOCK flag is specified and the open call would result
in the process being blocked for some reason (e.g. on an advisory
lock), the open returns immediately with the error EWOULDBLOCK.
.PP
Upon successful completion, a non-negative integer, the
file descriptor, is returned.
The file pointer used to mark the current position within the
file is set to the beginning of the file.
.PP
The new descriptor is set to remain open across
.IR execve
system calls; see
.IR close (2).
.PP
No process may have more than {OPEN_MAX} file descriptors open
simultaneously.
.SH "ERRORS
The named file is opened unless on or more of the
following are true:
.TP 15
[EPERM]
The pathname contains a non-ASCII byte.
.TP 15
[ENOTDIR]
A component of the path prefix is not a directory.
.TP 15
[EINVAL]
The FTRUNCATE flag was specified, but FWRONLY or FRDWR
was not specified.
.TP 15
[ENOENT]
FCREATE is not set and the named file does not exist.
.TP 15
[EACCES]
A component of the path previx denies search permission.
.TP 15
[EACCES]
The required permissions (for reading and/or writing)
are denied for the named flag.
.TP 15
[EISDIR]
The named file is a directory, and the arguments specify
it is to be opened for writting.
.TP 15
[EROFS]
The named file resides on a read-only file system,
and the file is to be modified.
.TP 15
[EMFILE]
{OPEN_MAX} file descriptors are currently open.
.TP 15
[ENXIO]
The named file is a character special or block
special file, and the device associated with this special file
does not exist.
.TP 15
[ETXTBSY]
The file is a pure procedure (shared text) file that is being
executed and the \fIopen\fP call requests write access.
.TP 15
[EFAULT]
.I Path
points outside the process's allocated address space.
.TP 15
[ELOOP]
Too many symbolic links were encountered in translating the pathname.
.TP 15
[EEXIST]
The file is to be created for exclusive use and it already exists.
.TP 15
[ENXIO]
The FNBLOCK flag is given, and the file is a communications device
on which their is no carrier present.
.SH "SEE ALSO"
chmod(2), close(2), dup(2), lseek(2), read(2), write(2), umask(2)
.SH BUGS
The implementation of this call needs to be carefully checked.
The flag names and locking facilities are incompatible with
the /usr/group standard.
