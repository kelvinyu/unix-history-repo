(File ucifnc.l)
(boundp lambda dddd* arrayp cond)
(unbound macro quote)
(tconc lambda cdr rplacd rplaca car last cons return list setq prog null cond)
(litatom macro cdr append cons quote list)
(ge macro cdr append cons quote list)
(le macro cdr append cons quote list)
(neq macro cdr append cons quote list)
(unsave lambda quote get putd)
(save lambda quote cxr getd putprop)
(sprint lambda $prpr)
(union lexpr cons member cond car setq liszt-internal-do mapc bigp not null and zerop sub1 cdr arg do)
(append1 lambda list append)
(prog1 macro append quote cons list gensym cddr cadr)
(line-feed macro cons quote eq cond cadr)
(msg-space macro cons quote eq cond cadr)
(msg macro nreverse cadr atom minus list greaterp numberp eq cond car setq null liszt-internal-do mapcar append quote cons cdr)
(setq-steps lambda cddr setq-steps cadr car quote list cons and)
(var-list lambda cddr var-list car cons and)
(get-keyword lambda assoc cdr)
(do-clause lambda patom terpri setq-steps cdr cadr quote list eq car memq cond)
(loop macro list nreverse do-clause mapcar apply rplacd cdr ncons Internal-bcdcall getdisc eq bcdp cxr getd symbolp and function funcall car setq cond null setq-steps liszt-internal-do mapcan subset append get-keyword var-list quote cons)
(suflist lambda sub1 cdr suflist eq null cond)
(prelist lambda sub1 cdr prelist car cons eq null cond)
(push macro caddr cadr quote list)
(subset macro cons quote list caddr cadr)
(enter lambda cons member cond)
(addprop lambda get enter putprop)
(timer nlambda terpri cons print cadr difference times quotient go return null cond cdr car eval ptime setq prog)
(every macro cadr caddr list quote cons)
(length lambda cdr length add1 atom null cond)
(pop macro cadr list quote cons)
(make-lambda lambda list quote cons eq car cdr equal cond)
(add-test lambda cdr cons car eq quote list null cond)
(make-body lambda subset-test null not or list quote equal cond)
(subset-test lambda car length equal and)
(make-mapfn lambda subset-test null not quote equal cond)
(item:for lambda go cdr Internal-bcdcall getdisc eq bcdp setq cxr getd symbolp and car funcall return null cond prog quote some let)
(body:for lambda cons cadr cdr length eq error not cond quote item:for let)
(test:for lambda cadr cond quote item:for let)
(args:var-form lambda caddr)
(var:var-form lambda car)
(is-var-form lambda cadr length eq and)
(args:for lambda rplacd cdr args:var-form list is-var-form car setq cond null liszt-internal-do mapcan)
(vars:for lambda rplacd cdr var:var-form list is-var-form car setq cond null liszt-internal-do mapcan)
(error lambda quote *break break drain patom terpri cond)
(type:for lambda error car cond quote item:for let)
(for macro make-body add-test make-lambda quote list make-mapfn cons vars:for args:for test:for type:for body:for let)
(some macro caddr cadr quote list)
(struc-cons-form lambda cdr car struc-cons-form quote list atom null cond)
(slot-funs-extract lambda cdr car slot-funs-extract nconc append readlist cons concat quote list eval atom null cond)
(record-type macro concat setq dtpr append struc-cons-form null cond and slot-funs-extract quote list cadr caddr last car let)
(rplacaddd lambda cdddr rplaca)
(rplacadd lambda cddr rplaca)
(rplacdd lambda cdr rplacd)
(rplacad lambda cdr rplaca)
(get-set-program lambda putprop)
(:= macro cdr append cons car get subst quote list atom cond cadr macroexpand caddr let)
(drm macro caddr cadr quote list)
(dsm macro caddr cadr quote list)
(selectq macro cadr reverse cdar caar atom car cdr cond setq null cddr liszt-internal-do maplist append cons list quote gensym)
(nconc1 macro caddr cadr quote list)
(let macro cddr cadr let1)
(let1 lambda cadr car cddr let1 quote cons null cond)
(dm macro cddr append cadr quote cons)
(df macro cddr append cadr quote cons)
(de macro cdr append quote cons)
