(File prof.l)
(Pcontinue-evaluation lambda funcallhook quote evalhook eq cond)
(Pevalhook* lambda quote Pfuncall-evalhook*)
(Pfuncallhook* lexpr quote Pfuncall-evalhook* cons |1-| + cdr <& do minusp eq cond sub1 listify arg let)
(Pfuncall-evalhook* lambda Pcontinue-evaluation ncons cons putprop |1+| rplacd cdr return caar eq null do assq get car setq symbolp dtpr and cond If let)
(cutatblank lambda |1+| substring return substringn eq =& = cond If >& > do)
(pctprint lambda * quotient msg-print progn msg)
(lesscdr lambda cdr greaterp >)
(totcallsort lambda alphalessp equal = lessp < cond If get let)
(prof-report lambda close cdar quote sort cadr cutatblank If pctprint caddddar cadddar caddar cadar caar null cdr do outfile car let prof-end terpr msg-print progn msg cond if setq)
(prof-end lambda list sort cons caar cdar cdr + putprop get car null do terpr length msg-print progn msg *rset setq quote sstatus)
(prof-start lambda terpr msg-print progn msg *rset sstatus quote list gensym setq)
