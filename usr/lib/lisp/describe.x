(File describe.l)
(within-string lambda |1+| setq return substring eqstr equal = cond go greaterp and prog getcharn loop flatc)
(apropos-1 lambda princ boundp cxr getd symbolp fboundp and format cons setq setf push get_pname within-string cond)
(apropos lambda cdr car apropos-1 null oblist setq liszt-internal-do mapc mapatoms)
(mapatoms macro quote cons cadr)
(describe-array lambda ferror null do >& > length arraydims cdr setq getaux car format arrayp cond)
(describe-bignum lambda terpri format haulong let)
(describe-flonum lambda format)
(describe-fclosure lambda cadr cdr car setq go null and prog fclosure-alist loop fclosure-function format)
(describe-defstruct lambda cdr cdar defstruct-slot-description-ref-macro-name list eval caar concat null defstruct-description-slot-alist do defstruct-description-name format named-structure-symbol or get setq fixp quote boundp and cond)
(describe-list lambda format)
(describe-symbol lambda cddr cadr car null plist do quote cxr getd symbolp and fboundp describe-1 cdr symeval format let boundp cond)
(describe-1 lambda terpri describe-2 cdr + let stringp symbolp numberp null or cond)
(describe-2 lambda terpri not evenp if format fixp describe-bignum bigp describe-flonum floatp describe-list listp describe-symbol symbolp describe-array arrayp describe-flavor :typep send-internal send get-handler-for quote function fclosure-function eq fclosurep instancep and describe-defstruct named-structure-p cond)
(describe lambda describe-2)
