(File cmuedit.l)
(editmakefn lambda ncons edit2f edup boundp and let mark!changed cons putprop editdsubst null or cdr setq liszt-internal-do mapc quote editbelow edloc car editbi)
(editrepack lambda explode edite readlist cons ncons quote edit: edit1f setq car dtpr cond)
(edit!0 lambda go cadr car tailp setq prog err cdr null cond)
(editran lambda nreverse eval eq selectq atom cons liszt-internal-do mapcar return ldiff cadr apply cdr memq go car err null cond prog or setq)
(editbelow lambda add1 difference Cnth + lessp < editcom quote length prog err eval setq minusp cond)
(editto lambda editcom editri cdaar eq car add1 difference greaterp > numberp and editbi edup edloc cond setq)
(editmv lambda return editcoms not list append cons editcoml caar copy edup cdr car quote null eq cond edloc and setq prog)
(editsw lambda cdr editsmash car editnth setq prog)
(editcont lambda return edit4e car caar eq cdr go edlocl errset atom err quote edit4f null cond editfpat prog setq)
(editelt lambda car return go cdr cond setq edloc prog)
(editxtr lambda cdr dtpr null and append edit2f edup setq caar cadr car tailp cons ncons edloc cond prog)
(editmbd lambda null return cadr tailp quote lsubst append cdr car atom or edit2f cons ncons caar setq edup edloc cond prog)
(edit: lambda err return ncons cadr or quote editcoml cdar edit2f memq selectq edup edloc nreverse cdr editcoms copy eq dtpr and cond car cons null liszt-internal-do mapcar setq prog)
(edlocl lambda cdr edloc cons ncons nconc setq car)
(edloc lambda err equal errcom dtpr return go car cdr null and editcom atom cond setq prog)
(edrpt lambda print null go add1 errcom dtpr quote princ terpri greaterp > cond setq prog)
(errcom lambda editcoms errset)
(edor lambda go cdr return editcoms editcom car atom setq errset dtpr err null cond prog)
(edit* lambda difference edit1f edit!0 err greaterp > not cond edit*l setq car)
(edit*l lambda car length edup)
(edup lambda cons quote princ terpri and eq or memq not return tailp err cdr null cond car setq prog)
(editdefault lambda cons setq memq err null list editcom editqf eq return cond prog)
(editbo lambda cdr cdar editnconc caar editsmash err car atom cond editnth setq)
(editbi lambda err cons car editsmash length greaterp > not and cond editnth cdr setq prog)
(editlo lambda cdar caar editsmash err car atom null or cond editnth setq)
(editli lambda cdr car cons editsmash err null cond editnth setq)
(editro lambda cdr last editsmash err car atom null or cond editnth setq)
(editri lambda cdr editnconc editsmash err null or cond car editnth setq prog)
(bpnt lambda printlev return quote minusp err numberp not cdr null editnth cadr tailp setq car eq cond prog)
(bpnt0 lambda $prpr *** terpri printlev quote cadr car tailp setq eq not neq cond)
(editnth lambda Cnth length plus cdr >& > minusp null eq tailp cons ncons editelt setq memq or numberp not err atom cond)
(editbf1 lambda cadr neq sub1 editbf1 go atom or null setq tconc cdr car dtpr and edit4e eq return quote princ terpri >& > not cond prog)
(editbf lambda tailp memq or err cadr eq nconc return car editbf1 go cdr null and cond editfpat cons ncons setq prog)
(editfindp lambda edit4f1 edit4e or return editfpat null and setq prog)
(edit4f1 lambda tconc cadr go edit4f1 neq sub1 setq null or cdr edit4e car eq dtpr and atom return quote princ terpri >& > not cond prog)
(editfpat lambda explodec quote nthchar nreverse cdr editfpat cons setq null liszt-internal-do mapcar car eq or dtpr cond)
(edit4f lambda memq err cadr nconc edit4f1 return sub1 null or cdr dtpr edit4e numberp not caar and go car atom eq cond editfpat cons ncons setq prog)
(editqf lambda quote edit4f cons memq cdar setq car dtpr and cond prog)
(edit4e lambda not neq prin1 quote print *** explodec go edit4e return cdr setq null prog car eqstr stringp and equal or atom eq cond)
(edit2f lambda sub1 cddr cadr dtpr return nconc cdr cons editsmash Cnth not neq minus eq or go null length greaterp >& > append copy err atom cond car setq prog)
(edit1f lambda add1 + minus Cnth setq cons length greaterp >& > car atom err cdr null eq cond)
(editdsubst lambda go setq editdsubst cdr copy editsmash equal eqstr stringp and car eq or symbolp return atom cond prog)
(editnconc lambda car last setq editsmash err atom null cond return prog)
(editsmash lambda rplacd rplaca cdr car cons setq err atom cond)
(undoeditcom lambda return print numberp and cons go cddr editsmash caddr list editcom cadddr cdr setq quote princ terpri cadr last car eq not neq err atom cond prog)
(edit!undo lambda princ terpri quote print and cdr return undoeditcom not neq eq memq caar selectq go car null or cond setq prog)
(edith lambda cdr setq princ list numberp caar go quote prin1 car return null cond terpri prog)
(editcoms lambda go cdr setq editcom car return atom cond prog)
(editmac lambda go cdr setq car eq return null cond prog)
(editcoml lambda subst subpair editdefault edit4e editfpat editxtr edit!undo editsw set editro editri editrepack editdsubst caar bpnt edor editnth not neq append copy editnconc editmbd cddddr editmakefn or boundp let mark!changed ncons nconc rplaca rplacd editmac edrpt editlo editli edlocl edloc err cadddr cdddr edval nreverse liszt-internal-do mapcar atom *** editqf cons edit4f print editmv go eval editcom editran editbo minus edit* editcoms editbi editbf editbelow edit: editcont eq edit2f numberp return car editto quote null memq selectq and caddr cddr cadr setq cdr dtpr cond prog)
(editcoma lambda copy editcoms editdefault editmac top-level neq edup princ terpri ncons editsmash editl editrepack *throw throw last putprop remprop let mark!changed dtpr and editbf editqf editread boundp not editbelow edit: edith bpnt0 edit!undo return edit* go cadr car memq err cdr null or edit!0 *** quote cons eval setq eq cond selectq prog)
(editcom lambda car editcoml null editcoma atom edit1f numberp editqf editbf eq editracefn cond setq)
(editread lambda return cdr car go %lineread lineread errset setq atom *** quote princ terpri null cond prog)
(edval lambda eval errset)
(editl0 lambda princ prin1 terpri err go editcom errset prog1 dtpr atom editread bpnt not cdddr cons caddr cadr and get last print null or return quote editcoms *** list cdr append setq car eq cond prog)
(editl lambda err return eval *catch catch dtpr cond setq quote makunbound prog)
(edite lambda cons ncons editl last car err quote princ print atom cond)
(editp nlambda err princ cdr plist edite symbolp eval car dtpr cons ncons setq prin1 quote print null cond)
(editv nlambda err princ boundp symbolp and return cdr eval edite car dtpr cons ncons setq prin1 quote print null cond prog)
(editf nlambda eval err princ go dtpr boundp and return edite cxr getd cdr *** car symbolp cons ncons setq prin1 quote print null cond prog)
(editfns nlambda go cdr cons quote list print cond car eval setq prog)
(## nlambda editcoms)
