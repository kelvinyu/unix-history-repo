(File lmhacks.l)
(old-printer lambda cxr getd putd quote setq)
(new-printer lambda cxr getd putd quote setq)
(zprint-hunk lambda |1+| cdr cxr zprin1a if return patom lessp < null not and cond quote equal = hunksize do tyo)
(zprint-list lambda |1-| cdr car if return eq =& = quote zprin1a patom null cond dtpr not or do tyo)
(zprin1a lambda =& = zprint-hunk hunkp |1-| zprint-list dtpr xxprint atom send-internal send get-handler-for if function fclosure-function eq fclosurep and instancep maknum :typep progn si:printing-random-object quote named-structure-invoke-carefully or named-structure-p setq patom null cond)
(zprin1 lambda or quote zprin1a setq)
(zprinc lambda or zprin1a setq)
(zprint lambda quote zprin1 setq)
(send-internal lambda flavor-default-handler cxr flavor-method-hash-table gethash or eq cond if lexpr-funcall declare)
(:typep lambda Internal-bcdcall getdisc bcdp cxr getd symbolp funcall hunkp get nthcdr car nth memq null if named-structure-p setq instance-typep quote function fclosure-function eq fclosurep and instancep cond)
(defselect macro return rplacd last go prog loop not and liszt-internal-do mapc setf push caar concat atom setq nreverse null do append ferror cdr car eq cond if list quote cons gensym intern let cddr caddadr cadadr caadr)
(named-structure-invoke-internal (lambda . local) ferror and lexpr-funcall quote get cond if named-structure-symbol setq let)
(named-structure-invoke-carefully lambda named-structure-invoke-internal)
(named-structure-invoke lambda named-structure-invoke-internal)
(named-structure-symbol lambda ferror named-structure-p or)
(named-structure-p lambda quote get if cxr setq atom hunkp and cond)
(si:printing-random-object macro and append list quote cons ferror cdr setq eq cond car caseq selectq null do let cddr cddadr cadadr caadr)
(make-list lambda return |1+| rplacd cdr list greaterp cddr error eq cond caseq selectq car setq go null and prog loop)
(union lambda return cons setf push memq not cond cdr car setq go null and prog loop)
(multiple-value-list-1 lambda ferror cons list* - nthcdr rplacd cdr >& > list eq =& = cond)
(multiple-value-list macro quote list cadr)
(multiple-value-bind macro append list quote cons cdddr caddr cadr)
(multiple-value macro |1+| setq setf push and nreverse reverse return cdr do list car null not cond if append quote cons caddr cadr)
(values-list lambda set car not cond if null cdr do length setq)
(values macro setq setf push reverse return null cond do append car first length list quote cons cdr)
