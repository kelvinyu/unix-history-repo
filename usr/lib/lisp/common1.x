(File common1.l)
(xcons lambda cons)
(vil nlambda quote exvi)
(vi nlambda quote exvi)
(substequal lambda cdr car substequal cons atom equal cond)
(substeq lambda cdr car substeq cons atom eq cond)
(subst lambda substequal substeq symbolp cond)
(sublishelp lambda cons and or not car sublishelp cdr list assoc setq atom cond let)
(sublis lambda car sublishelp cdr assoc setq atom cond let)
(exchange2 (lambda . local) car cdr rplaca cadr setq prog)
(sortcarhelp lambda sortcarhelp exchange2 Internal-bcdcall getdisc quote eq bcdp setq cxr getd symbolp and caar caadr funcall cdr null cond)
(sortcar lambda |1+| sortcarhelp greaterp do length return quote setq null cond if prog)
(mergelists lambda go Internal-bcdcall getdisc quote eq bcdp cxr getd symbolp and car funcall cdr return rplacd null cond cons setq prog)
(splitlist lambda cons return sub1 rplacd setq bigp not and zerop cdr null or do prog)
(sortmerge lambda prog1 rplaca Internal-bcdcall getdisc quote bcdp cxr getd symbolp and cadr funcall not eq null do cdr car sortmerge mergelists return quotient splitlist setq greaterp cond prog)
(sort lambda length sortmerge quote cond setq)
(sload lambda cdr Internal-bcdcall getdisc bcdp symbolp funcall cxr getd sl-print eval nthcdr nth print quote get dtpr close eq read do gensym return patom terpr princ progn and infile cond prog car null setq liszt-internal-do mapc)
(sl-print macro cons quote list cdr)
(shell lambda cons ncons apply setq flatc lessp cond quote getenv)
(reverse lambda cdr car cons do null cond)
(prog1 lexpr arg)
(princ lexpr return not cdr do cadr princ patom cddr null car quote and dtpr arg setq eq cond prog)
(plusp lambda greaterp)
(oddp lambda bigp cdr null and fixnum-BitAndNot boole zerop not cond)
(min lexpr |1-| setq cond lessp arg do)
(member lambda cdr return car equal cond null do)
(makhunk lambda quote apply |1+| cdr *rplacx do *makhunk return minusp haulong |1-| eq =& = error greaterp numberp cond setq prog)
(macroexpand lambda cddr cadr go apply eq nreverse macroexpand cdr liszt-internal-do mapcar cons memq get null and dtpr quote arrayp getdisc bcdp cxr getd setq let car return atom cond prog)
(list-to-bignum lambda cdr list-to-bignum car scons cond)
(includef lambda load)
(include nlambda car load)
(load-a-file (lambda . local) sstatus and eval setq error null close car eq read errset do list infile prog1 quote status let terpr patom cond)
(fasl-a-file lambda sstatus eq setq and cond fasl prog1 quote status let)
(tilde-expand lambda cons concat error username-to-dir quote getenv nreverse implode setq equal car null cdr do exploden let getcharn eq stringp symbolp or cond)
(load lambda fasl-a-file load-a-file filestat:mtime lessp filestat probef concat memq getchar and quote status <& < cadr >& > |1+| cdr return car eq null exploden nreverse do tilde-expand setq let error stringp symbolp or not cond)
(last lambda cdr null do)
(hunk lexpr |1+| arg cdr *rplacx do *makhunk haulong |1-| return eq error >& > cond setq prog)
(locatefunction (lambda . local) cons ncons apply caddr cadr car putprop cddr terpr close read makereadtable do concat infile setq drain patom quote get null cond let)
(help nlambda cdr locatefunction cons ncons quote apply memq greaterp lessp numberp or eq concat stringp and print car setq atom not do terpr patom null cond)
(getl lambda cddr return car memq null cdr plist atom cond do)
(getcharn lambda substringn)
(getchar lambda substring concat)
(floatp lambda type quote equal)
(flatsize lexpr arg explode length)
(fixp lambda quote type equal or)
(filepos lexpr equal arg fseek onep bigp not cdr null and zerop cond)
(ffasl lambda concat cfasl quote setq)
(expt lambda go / |1-| oddp return setq prog error log exp floatp times expt quotient lessp bigp not cdr null and zerop equal cond)
(exploden lambda append quote ncons last rplacd null car exploden cons setq cdr do vsize-byte vectorip vsize concat vectorp aexploden atom cond)
(explodec lambda append ncons last rplacd null car explodec quote cons setq cdr do vsize-byte vectorip vsize concat vectorp aexplodec atom cond)
(explode lambda append ncons last rplacd null car explode quote cons setq cdr do vsize-byte vectorip vsize concat vectorp aexplode atom cond)
(exl nlambda quote exvi)
(exec nlambda car concat cdr *process null do)
(exvi lambda load eval quote close infile errset concat car list setq null cond prog)
(ex nlambda quote exvi)
(evenp lambda bigp cdr null and fixnum-BitAndNot boole zerop not cond)
(delq lexpr go rplacd car return bigp zerop or null not atom and |1-| + cdr <& do minusp let listify quote cons error arg setq eq =& = cond prog)
(delete lexpr go rplacd car equal return bigp zerop or null not atom and |1-| + cdr <& do minusp let listify quote cons error arg setq eq =& = cond prog)
(defprop nlambda caddr cadr car putprop)
(cvttofranzlisp lambda sstatus quote setsyntax)
(cvttoucilisp lambda get setsyntax quote sstatus)
(cvttomaclisp lambda sstatus quote setsyntax)
(cvttointlisp lambda sstatus quote setsyntax)
(copysymbol lambda plist setplist cxr getd putd eval set boundp cond uconcat)
(copy lambda vrefi-byte vseti-byte new-vectori-byte vsize-byte vectorip |1+| vref vset vprop vsetprop <& not new-vector do vsize let quote vget if vectorp cdr car copy cons dtpr cond)
(comment nlambda quote)
(bigp lambda quote type equal)
(gcafter nlambda comment prtpagesused allocate errset atom and lessp fix error terpr patom greaterp caddr times quotient cadr difference max ptime car opval |1+| setq quote boundp return null cond prog)
(prtpagesused lambda caddr cdr * fix eq opval cadr greaterp car setq terpr difference times quotient max print null cons quote memq cond do patom)
(sys:int-serv lambda *break break drain quote patom)
(sys:fpeint-serv lambda error)
(unwind-protect macro append list cons quote gensym cddr cadr)
(signp macro subst list atom error quote eq cond setq caddr cadr)
(sassq macro list car quote eq not atom or cond cadddr caddr cadr)
(sassoc macro list car quote eq not atom or cond cadddr caddr cadr)
(desetq macro cddr liszt-internal-do mapcar append de-compose gensym list atom cadr setq nreverse quote cons car cond null do cdr)
(throw macro cadr caddr quote list)
(catch macro cadr caddr quote list)
(max lexpr |1-| setq greaterp cond <& < arg do)
(make-equivalent macro cons quote list caddr cadr)
