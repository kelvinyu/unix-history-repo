(File macros.l)
(listify macro cadr list quote cons)
(let* macro cdr append quote cons list setq car null reverse do cddr cadr)
(caseq macro nreverse dtpr eq cadr cdr cond car setq null cddr liszt-internal-do mapcar append cons list quote gensym)
(de-compose lambda cdr car de-compose nconc quote apply cons ncons atom null cond)
(let macro rplacd list mapcar mapcan nreverse cdar do cdr quote de-compose append gensym cons atom cond car null setq liszt-internal-do mapc cddr cadr)
(lambdacvt lambda rplacd ncons mapcan nconc return append let cadddr cdddr caddr liszt-internal-do mapcar gensym or nreverse |1+| cdr cadr atom error list cons eq |1-| quote memq cond setq null car do prog)
(defmcrooption lambda cdr defmcrooption caddar append quote concatl cadar list cons caar setq atom cadr defmcrosrch car memq null cond)
(defmcrosrch lambda nreverse list liszt-internal-do mapcar ncons setq cdr defmcrooption eq cddr cadr defmcrosrch car memq append quote concatl cons atom null cond)
(defmacro macro caar dtpr ncons cdddr eval cadddr cond append nreverse car cdr null liszt-internal-do mapcar cons cadr list quote caddr defmcrosrch setq)
