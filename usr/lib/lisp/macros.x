(File macros.l)
(>=& macro quote list caddr cadr)
(>= macro nreverse cond car quote list setf push cdr null do cons list* setq cdddr caddr cadr)
(<=& macro quote list caddr cadr)
(<= macro nreverse cond car quote list setf push cdr null do cons list* setq cdddr caddr cadr)
(construct-list* lambda cdr null car cadr quote list cddr do reverse setq)
(list* macro construct-list* car null cond cdr)
(defvar macro quote list if car cddr setq cond caddr cadddr cadr)
(if macro setf push setq reverse cddr append cons return null do car quote list cadr memq not eq =& and error <& cond length let cdr)
(includef-if macro quote list eval cond caddr cadr)
(include-if macro quote list eval cond caddr cadr)
(listify macro cadr list quote cons)
(let* macro cdr append quote cons list setq car null reverse do cddr cadr)
(selectq macro quote nreverse cdr eq cond if car cons null liszt-internal-do mapcar setq cddr cadr)
(caseq macro nreverse cdr list dtpr eq let car null liszt-internal-do mapcar cons quote gensym symbolp cond setq cddr cadr)
(de-compose lambda cdr car de-compose nconc quote apply cons ncons atom null cond)
(let macro rplacd list mapcar mapcan nreverse cdar do cdr quote de-compose append gensym cons atom cond car null setq liszt-internal-do mapc cddr cadr)
(pop macro quote list car cddr setq cond caddr cadr)
(push macro quote list caddr cadr)
(g00439::args lambda cadr quote list)
(g00433::arg lambda cadr quote list)
(g00427::symeval lambda cadr quote list)
(g00421::plist lambda cadr quote list)
(g00415::get lambda caddr cadr quote list)
(g00409::arraycall lambda quote list)
(g00403::nthcdr lambda caddr cadr quote list)
(g00397::nthelem lambda caddr cadr quote list)
(g00391::nth lambda caddr cadr quote list)
(g00385::vrefi-long lambda caddr cadr quote list)
(g00379::vrefi-word lambda caddr cadr quote list)
(g00373::vrefi-byte lambda caddr cadr quote list)
(g00367::vref lambda caddr cadr quote list)
(g00361::cxr lambda caddr cadr quote list)
(g00355::cddr lambda cadr quote list)
(g00349::cdar lambda cadr quote list)
(g00343::cdr lambda cadr quote list)
(g00337::cadr lambda cadr quote list)
(g00331::caar lambda cadr quote list)
(g00325::car lambda cadr quote list)
(defsetf macro cons quote list cdddr caddr cadr)
(setf-record-package-access-check lambda list cdaddaddar rplaca caddr setq copy cadr quote eq car dtpr and cond)
(setf-check-cad+r lambda return memq not append implode ascii concat cons quote list eval setq null do car exploden cdr nreverse let getcharn eq cond if)
(setf macro getdisc bcdp eq cxr getd setf-check-cad+r append cons apply get return setf-record-package-access-check setq car dtpr and do list quote error symbolp or atom cond cdddr caddr cadr)
(defcmacro macro cddr append cons quote list gensym cadr concat let)
(lambdacvt lambda rplacd ncons mapcan nconc return append let cadddr cdddr caddr liszt-internal-do mapcar gensym or + length nreverse |1+| cdr cadr atom error list cons eq |1-| quote memq cond setq null car do prog)
(defmcrooption lambda cdr defmcrooption caddar append quote concatl cadar list cons caar setq atom cadr defmcrosrch car memq null cond)
(defmcrosrch lambda nreverse list liszt-internal-do mapcar ncons setq cdr defmcrooption eq cddr cadr defmcrosrch car memq append quote concatl cons atom null cond)
(defmacro macro caar dtpr ncons cdddr eval cadddr cond append nreverse car cdr null liszt-internal-do mapcar cons cadr list quote caddr defmcrosrch setq)
