(File macros.l)
(defvar macro quote list if car cddr setq cond caddr cadddr cadr)
(if macro setf push setq reverse cddr append cons return null do car quote list cadr memq not eq =& and error <& cond length let cdr)
(includef-if macro quote list eval cond caddr cadr)
(include-if macro quote list eval cond caddr cadr)
(listify macro cadr list quote cons)
(let* macro cdr append quote cons list setq car null reverse do cddr cadr)
(caseq macro nreverse cdr list dtpr eq let car null liszt-internal-do mapcar cons quote gensym symbolp cond setq cddr cadr)
(de-compose lambda cdr car de-compose nconc quote apply cons ncons atom null cond)
(let macro rplacd list mapcar mapcan nreverse cdar do cdr quote de-compose append gensym cons atom cond car null setq liszt-internal-do mapc cddr cadr)
(defcmacro macro cddr append cons quote list gensym cadr concat let)
(lambdacvt lambda rplacd ncons mapcan nconc return append let cadddr cdddr caddr liszt-internal-do mapcar gensym or + length nreverse |1+| cdr cadr atom error list cons eq |1-| quote memq cond setq null car do prog)
(defmcrooption lambda cdr defmcrooption caddar append quote concatl cadar list cons caar setq atom cadr defmcrosrch car memq null cond)
(defmcrosrch lambda nreverse list liszt-internal-do mapcar ncons setq cdr defmcrooption eq cddr cadr defmcrosrch car memq append quote concatl cons atom null cond)
(defmacro macro caar dtpr ncons cdddr eval cadddr cond append nreverse car cdr null liszt-internal-do mapcar cons cadr list quote caddr defmcrosrch setq)
