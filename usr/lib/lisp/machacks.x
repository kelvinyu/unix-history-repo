(File |/usr/lib/lisp/machacks.l|)
(selectq macro quote nreverse cdr eq cond if car cons null do mapcar setq cddr cadr)
(dolist macro list quote cons cddr cadadr caadr)
(dotimes macro list quote cons symbolp fixp or cond if cddr cadadr caadr)
(psetq macro cons quote list cond cdddr caddr cadr)
(defvar macro quote list if car cddr setq cond caddr cadddr cadr)
(logxor macro quote cons cdr)
(logior macro quote cons cdr)
(logand macro quote cons cdr)
(if-for-maclisp-else-lispm macro car cdr)
(psetq macro error cons cadr car quote list cddr cond cdr)
(dotimes macro cdadr rplaca fixp null desetq gensym cdr setf prog1 pop cdar prog2 caar eq car atom not and cond nconc list quote cons setq let cddr cadr)
(dolist macro append nconc cons push quote list ncons cdr setf prog1 pop cdar prog2 caar eq car atom not and cond setq gensym cddr caddadr cadadr caadr)
(unless macro cons quote list cddr cadr)
(when macro cons quote list cddr cadr)
(evenp macro quote list cadr)
(for macro append list quote cons cddddr cadddr caddr cadr)
(pop macro quote list car cddr setq cond caddr cadr)
(push macro quote list caddr cadr)
(if macro cons quote list null cond cdddr caddr cadr)
(lexpr-funcall macro append cons quote list cddr cadr)
(construct-list* lambda cdr null car cadr quote list cddr do reverse setq)
(ttf macro quote cons cdr)
(list* macro construct-list* car null cond cdr)
(defsetf macro quote cons cdddr caddr cadr)
(setf macro funcall return get setq and car do list quote error symbolp or atom cond caddr cadr)
(caseq macro nreverse cdr cadr eq cond car setq null cddr do mapcar append cons list quote gensym)
(displace lambda car list rplacd rplaca quote error atom cond)
(coutput lambda terpr print)
(macsyma-env macro quote)
(feature-present lambda error return null cdr do cadr feature-present not car eq quote status memq atom cond)
(sharp-sign-macro lambda ascii error assq cdr eval boole feature-present list read quote status not = or cond tyi setq)
