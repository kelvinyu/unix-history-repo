/*
 * This is the style guide for BSD's KNF or Kernel Normal Form.
 *
 * Multi-line comments look like this.  Make them real sentences.  Fill them
 * so they look like real paragraphs.
 *
 * 	@(#)style	1.2	(Berkeley)	%G%
 */

/*
 * Important single-line comments look like this.
 */

/* Minor single-line comments look like this. */

/* Include files go at top of source module. */
#include <stdio.h>		/* Non-local includes in brackets. */

/*
 * Global pathnames are defined in /usr/include/paths.h.
 * Pathnames local to the program go in pathnames.h in local directory.
 */
#include <paths.h>		/* Non-local includes in quotes */
#include "pathnames.h"		/* Local includes in quotes */		

/*
 * All ANSI function decls go at the top of the source module.  Use the
 * __P macro from include file <sys/cdefs.h>.  Only the kernel has a name
 * associated with the types.
 */
void f1 __P((int, const char *));

/*
 * Macros are capitalized, parenthesized, and should avoid side-effects.
 * If they are an inline expansion of a function, the function is defined
 * all in lowercase, the macro has the same name all in uppercase. If the
 * macro needs more than a single line, use braces.
 */
#define	MACRO(x, y) { \
	variable = (x) + (y); \
	line two; \
}

/* Enum types are capitalized. */
enum enumtype { ONE, TWO } et;

/*
 * When declaring variables in structures, declare them sorted by use, then
 * by size, and then by alphabetical order.  The first category normally
 * doesn't apply, but there are exceptions.  Each one gets its own line.
 * Put a tab after the first word, i.e. use "int^Ix;" and "struct^Ifoo *x;".
 *
 * Major structures should be declared at the top of the file they are
 * used in, or in separate header files, if they are used in multiple
 * source files. Use of the structures should be by separate declarations
 * and should be "extern" if they are declared in a header file.
 */
struct foo {
	struct	foo *next;	/* List of active foo */
	struct	mumble amumble;	/* Comment for mumble */
	int	bar;
};
struct foo *foohead;		/* Head of global foo list */
	
/*
 * All major routines should have a comment briefly describing what
 * they do. The comment before the "main" routine should describe
 * what the program does.
 */
main(argc, argv)
	int argc;
	char *argv[];
{
	extern char *optarg;
	extern int optind;
	int ch;

	/*
	 * For consistency, getopt should be used to parse options.
	 */
	while ((ch = getopt(argc, argv, "")) != EOF)
		switch (ch) {		/* Indent the switch. */
		case '':		/* Don't indent the case. */
			break;
		case '?':
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	/*
	 * Space after keywords (while, for, return, switch)
	 * No parenthesis for single statement block.
	 *
	 * Forever loop.
	 */
	for (;;)
		stmt;
	
	/*
	 * Parts of a for loop may be left empty.
	 * Avoid declarations in blocks.
	 */
	for (; cnt < 15; cnt++) {
		stmt1;
		stmt2;
	}

	while (cnt < 20) {
		stmt1;
		stmt2;
	}

	/* Try to put shorter part first. */
	if (test) {
		stmt;
	} else if (bar) {
		stmt;
	} else
		stmt;
		
	/* No space on function call. */
	if (error = f1(a1, a2))
		exit(error);
	doit(a1);
	exit(0);    /* Avoid obvious comments such as "Exit 0 on success." */
}

/*
 * If a function type is declared, it should be on a line
 * by itself preceeding the function.
 */
char *
f2(a1, a2, f1)
	int a1, a2;	/* Declare ints too. */
	float f1;	/* List in order declared. */
{
	/*
	 * When declaring variables in functions declare them sorted by size,
	 * then in alphabetical order; multiple ones per line are okay.  Old
	 * style function declarations can go on the same line.  ANSI style
	 * function declarations should be in the include file "externs.h".
	 * If a line overflows, just reuse the type keyword.
	 */
	extern u_char one;
	extern char two;
	struct foo three, four;
	double five;
	int six, seven;
	char eight, nine();
	char *overflow();

	return (bad ? (char *)0 : overflow());
}

f3()
{
					/* Empty line if no variables. */
	return (1);
}

usage()
{					/* use printf(3), not puts/putchar */
	(void)fprintf(stderr, "usage: X:\n");
	exit(1);
}
