.TH KTRACE 1
.SH NAME
.I ktrace
\- enable kernel process tracing
.SH SYNOPSIS
.ll +1i \" XXX - don't want it to wrap
.B ktrace
[
.B -Cica
]
[
.B -p
pid ]
[
.B -g
pgrp ]
[
.B -f 
trfile ]
[
.B -t 
trstr ]
.ll -1i
.br
.B ktrace
[
.B -ida
] [
.B -f
trfile ] [ command ]
.SH DESCRIPTION
.I Ktrace
enables kernel trace logging for the specified processes.  
Kernel trace data is logged to the file "ktrace.out" in the
current directory, or to the file named with the
.B -f
flag.
The current set of kernel operations that can be traced
include: system calls, namei translations, signal processing, and i/o.
By default, all operations
are traced.  To restrict logging to specific operations, use the
.B -t
flag as described below.  Once tracing is enabled on a process,
trace data will be logged until either the process exits or the
trace point is cleared with the
.B -c
flag.
A traced process can generate enormous amounts of log
data quickly; compounded
with the action of the inherit flag, \fB\-i\fP, tracing can become unwieldly.
It is strongly suggested that the user memorize
how to globally disable all tracing before attempting
to trace a process.  The following command is sufficient to
disable tracing on all user owned processes (if root, all processes in the system):
.nf

	$ trace -C

.fi
The trace file is binary format: use kdump(1) to decode
it.
Following is a description of the options:
.br
.TP
.B \-C
Disable tracing on all user owned processes (if root, all processes in the
system).
.TP
.B \-f trfile
Log trace records to \fBtrfile\fP instead of "trace.out".
.TP
.B \-t trstr
The string argument represents the kernel trace points, one
per letter.  The following table equates the letters with the tracepoints:
.nf

	c - trace system calls
	n - trace namei translations
	i - trace I/O
	s - trace processing of signals

.fi
.TP
.B \-p pid
Enable (disable) tracing on the indicated process id (only one -p
flag allowed);
.TP
.B \-g pgid
Enable (disable) tracing on all processes in the indicated
process group.
.TP
.B \-a
Append to the tracefile instead of truncating it.
.TP
.B \-c
Clear the indicated trace points.
.TP
.B \-i
Pass the trace flag to all future children of the
designated processes.
.TP
.B \-I
Pass the trace flag to all current and future children of the
designated processes.
.TP
.B command
Run \fBcommand\fP with the specified trace flags.
.LP
The -p, -g, and \fBcommand\fP options are mutually exclusive.
.SH EXAMPLES
.nf
# trace all kernel operations of process id 34

	$ ktrace -p34

# trace all kernel operations of processes in process group 15 and
# pass the trace flags to all current and future children

	$ ktrace -Ig15

# disable all tracing of process 65

	$ ktrace -cp65

# disable tracing signals on process 70 and all current children

	$ ktrace -ts -cip70

# enable tracing of i/o on process 67

	$ ktrace -ti -p67

# run the command "w", tracing only system calls

	$ ktrace -tc w

# disable all tracing to the file "tracedata"

	$ ktrace -c -f tracedata

# disable tracing of all processes owned by the user

	$ ktrace -C

.fi
.SH SEE ALSO
.IR kdump(1)
\- display kernel trace data.
