.\" Copyright (c) 1980, 1989 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.\"
.\"	@(#)fstab.5	6.2 (Berkeley) %G%
.\"
.TH FSTAB 5  ""
.UC 4
.SH NAME
fstab \- static information about the file systems
.SH SYNOPSIS
.B #include <fstab.h>
.SH DESCRIPTION
The file
.I /etc/fstab
contains descriptive information about the various file
systems.
.I /etc/fstab
is only read by programs, and not written;
it is the duty of the system administrator to properly create 
and maintain this file.
Each file system is described on a separate line;
fields on each line are separated by tabs or spaces.
The order of records in
.I /etc/fstab
is important because
.I fsck,
.I mount,
and
.I umount
sequentially iterate through
.I /etc/fstab
doing their thing.
.PP
The first field, (\c
.IR \|fs_spec ),
describes the block special device or
remote file system to be mounted.
For file systems of type
.BR ufs ,
the special file name is the block special file name, 
and not the character special file name.
If a program needs the character special file name,
the program must create it by appending a ``r'' after the
last ``/'' in the special file name.
.PP
The second field, (\c
.IR \|fs_file ),
describes the mount point for the file system.
For swap partitions, this field should be specified as ``none''.
.PP
The third field, (\c
.IR \|fs_vfstype ),
describes the type of the file system.
The system currently supports three types of file systems:
.IP \fBufs\fR 8
the local UNIX file system
.IP \fBnfs\fR 8
a Sun Microsystems ``Network File System''
.IP \fBswap\fR 8
a disk partition to be used for swapping
.PP
The fourth field, (\c
.IR \|fs_mntops ),
describes the mount options associated with the file system.
It is formatted as a comma separated list of options.
It contains at least the type of mount (see
.I fs_type
below) plus any additional options
appropriate to the file system type.
.PP
The type of the mount is extracted from the
.I fs_mntops
field and stored separately in the
.I fs_type
field (it is not deleted from the
.I fs_mntops
field).
If
.I fs_type
is ``rw'' or ``ro'' then the file system whose name is given in the
.I fs_file
field is normally mounted read-write or read-only on the
specified special file.  If
.I fs_type
is ``rq'', then the file system is normally mounted read-write,
the file system is automatically processed by the
.IR quotacheck (8)
command, and disk quotas are enabled with
.IR quotaon (8).
File system quotas are maintained in a file ``quotas'', which is
located at the root of the associated file system.
If
.I fs_type
is ``sw'' then the special file is made available as a piece of swap
space by the
.IR swapon (8)
command at the end of the system reboot procedure.
The fields other than
.I fs_spec
and
.I fs_type
are unused.
If
.I fs_type
is specified as ``xx'' the entry is ignored.
This is useful to show disk partitions which are currently unused.
.PP
The fifth field, (\c
.IR \|fs_freq ),
is used for these file systems by the
.IR dump (8)
command to determine which file systems need to be dumped.
If the fifth field is not present, a value of zero is returned and
.I dump
will assume that the file system does not need to be dumped.
.PP
The sixth field, (\c
.IR \|fs_passno ),
is used by the
.IR fsck (8)
program to determine the order in which file system checks are done
at reboot time.
The root file system should be specified with a
.I fs_passno
of 1, and other file systems should have larger numbers.
File systems within a drive should have distinct numbers,
but file systems on different drives can be checked on the
same pass to utilize parallelism available in the hardware.
If the sixth field is not present, a value of zero is returned and
.I fsck
will assume that the file system does not need to be checked.
.sp 1
.nf
.DT
#define	FSTAB_RW	"rw"	/* read-write device */
#define	FSTAB_RO	"ro"	/* read-only device */
#define	FSTAB_RQ	"rq"	/* read-write with quotas */
#define	FSTAB_SW	"sw"	/* swap device */
#define	FSTAB_XX	"xx"	/* ignore totally */
.PP
.ta \w'#define 'u +\w'char\ \ 'u +\w'*fs_vfstype;\ \ 'u
struct fstab {
	char	*fs_spec;	/* block special device name */
	char	*fs_file;	/* file system path prefix */
	char	*fs_vfstype;	/* type of file system */
	char	*fs_mntops;	/* comma separated mount options */
	char	*fs_type;	/* rw, ro, sw, or xx */
	int	fs_freq;	/* dump frequency, in days */
	int	fs_passno;	/* pass number on parallel dump */
};
.fi
.PP
The proper way to read records from
.I /etc/fstab
is to use the routines getfsent(), getfsspec(), getfstype(),
and getfsfile().
.SH FILES
/etc/fstab
.SH SEE ALSO
getfsent(3)
