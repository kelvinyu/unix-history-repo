.\" Copyright (c) 1989 The Regents of the University of California.
.\" All rights reserved.
.\" 
.\" This code is derived from software contributed to Berkeley by
.\" Ken Arnold.
.\"
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.\"
.\"	@(#)strfile.8	5.5 (Berkeley) %G%
.\"
.TH STRFILE 8 ""
.UC 4
.SH NAME
strfile, unstr \- create a random access file for storing strings
.SH SYNOPSIS
.B strfile
[
.B \-iorsx
] [
.B \-c char
]
sourcefile
[ datafile ]
.sp
.B unstr
sourcfile
.SH DESCRIPTION
.I Strfile
takes a file which contains a set of strings and creates a data file
which contains those strings, along with a seek pointer table to the
beginning of each.
This allows random access of the strings.
.PP
The source file contains strings separated by lines containing
a single percent (``%'') sign.
.PP
The data file, if not specified on the command line, is named
.IB sourcefile .out ,
and contains a header, which describes the contents of the data file,
the seek pointers to the beginning of each string, and the strings
themselves, terminated by null bytes.
.PP
The options are as follows:
.TP
.BI \-c \ char
Change the delimiting character from the percent sign to
.IR char .
.TP
.B \-i
Ignore case when ordering the strings.
.TP
.B \-o
Order the strings in alphabetical order.
The strings will be stored in the same order in the data file
as they were in the source, but the seek pointer table will be
sorted in alphabetical order of the strings pointed to.
Any
.I initial
non-alphanumeric characters are ignored.
This option sets the STR_ORDERED bit in the
.B str_flags
field of the header.
.TP
.B \-r
Randomize the order of the seek pointers in the table.
The strings will be stored in the same order in the data file
as they were in the source, but the seek pointer table will
be randomized.
This option sets the STR_RANDOM bit in the
.B str_flags
field of the header.
.TP
.B \-s
Run silently; don't give a summary of data at the end.
.TP
.B \-x
Set the rotated bit in the header to indicate the the fortunes
are rotated 13 positions in a simply caesar cypher.
.PP
The format of the header is:
.sp
.nf
#define	STR_RANDOM	0x1
#define	STR_ORDERED	0x2
#define	STR_ROTATED	0x4

unsigned long	str_numstr;	/* # of strings in the file */
unsigned long	str_longlen;	/* length of longest string */
unsigned long	str_shortlen;	/* length of shortest string */
unsigned char	str_flags;	/* bit field for flags */
char str_delim;			/* delimiting character */
.fi
.PP
The field
.B str_flags
will have the bit STR_RANDOM set if the
.B \-r
flag was specified, or STR_ORDERED if the
.B \-o
flag was specified, or STR_ROTATED if the
.B \-x
flag was specified.
.PP
The purpose of
.I unstr
is to undo the work of
.IR strfile .
It prints out the strings contained in the file
.I sourcefile
in the order that they are listed in
the header file
.IB sourcefile .dat
to standard output.
It is possible to create sorted versions of input files by using
.B \-o
when
.I strfile
is run and then using
.I unstr
to dump them out in the table order.
.SH "SEE ALSO"
fortune(6)
