

		NEW SENDMAIL CONFIGURATION FILES

		Eric Allman <eric@CS.Berkeley.EDU>

		@(#)README	6.1 (Berkeley) %G%


This document describes the sendmail configuration files being used
at Berkeley.  These use features in the new (R6) sendmail, and although
there is an ``OLDSENDMAIL'' mode, they haven't really been tested on
old versions of sendmail and cannot be expected to work well.

These configuration files are probably not as general as previous
versions, and don't handle as many of the wierd cases automagically.
I was able to simplify by them for two reasons.  First, the network
has become more consistent -- for example, at this point, everyone
on the internet is supposed to be running a name server, so hacks to
handle NIC-registered hosts can go away.  Second, I assumed that a
subdomain would be running SMTP internally -- UUCP is presumed to be
a long-haul protocol.  I realize that this is not universal, but it
does describe the vast majority of sites with which I am familiar,
including those outside the US.

Of course, the downside of this is that if you do live in a wierd
world, things are going to get wierder for you.  I'm sorry about that,
but at the time we at Berkeley had a problem, and it seemed like the
right thing to do.

This package requires a post-V7 version of m4; if you are running the
4.2bsd, SysV.2, or 7th Edition version, I suggest finding a friend with
a newer version.  You can m4-expand on their system, then run locally.
SunOS's /usr/5bin/m4 or BSD-Net/2's m4 both work.  GNU m4 (which is a
language unto itself) also works, but I don't intend to work so hard
to keep this up in the future.  [Note to GNU folks:  the construct
"define(`FOO')" should work without my having to add a null value.]

I'm not pretending that this README describes everything that these
configuration files can do; clever people can probably tweak them
to great effect.  But it should get you started.

+--------------------------+
| INTRODUCTION AND EXAMPLE |
+--------------------------+

Configuration files are contained in the subdirectory "cf", with a
suffix ".mc".  They must be run through "m4" to produce a ".cf" file.

Let's examine a typical .mc file (cf/cs-exposed.mc):

	divert(-1)
	#
	# Copyright (c) 1983 Eric P. Allman
	# Copyright (c) 1988 The Regents of the University of California.
	# All rights reserved.
	#
	# Redistribution and use in source and binary forms are permitted
	# provided that the above copyright notice and this paragraph are
	# duplicated in all such forms and that any documentation,
	# advertising materials, and other materials related to such
	# distribution and use acknowledge that the software was developed
	# by the University of California, Berkeley.  The name of the
	# University may not be used to endorse or promote products derived
	# from this software without specific prior written permission.
	# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
	# IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
	# WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
	#

The divert(-1) will delete the crud in the resulting output file.
The copyright notice is what your lawyers require.  Our lawyers require
the one that I've included in my files. A copyleft is a copyright by
another name.

The next line MUST be

	include(`../m4/cf.m4')

This will pull in the M4 macros you will need to make sense of
everything else.  As the saying goes, don't think about it, just
do it.  If you don't do it, don't bother reading the rest of this
file.

	VERSIONID(`<SCCS or RCS version id>')

VERSIONID is a macro that stuffs the version information into the
resulting file.  We use SCCS; you could use RCS, something else, or
omit it completely.  This is not the same as the version id included
in SMTP greeting messages -- this is defined in m4/version.m4.

	DOMAIN(cs.exposed)

This example exposes the host inside of the CS subdomain -- that is,
it doesn't try to hide the name of the workstation to the outside
world.  Changing this to DOMAIN(cs.hidden) would have made outgoing
messages refer to "<username>@CS.Berkeley.EDU" instead of using the
local hostname.  Internaly this is effected by using
"MASQUERADE_AS(CS.Berkeley.EDU)".

	MAILER(smtp)

These describe the mailers used at the default CS site site.  The
local mailer is always included automatically.

+--------+
| OSTYPE |
+--------+

Note that cf/cs-exposed.mc omits an OSTYPE macro -- this assumes
default Computer Science Division environment.  There are several
explicit environments available: bsd4.3, bsd4.4, hpux, irix, osf1,
riscos4.5, sunos3.5, sunos4.1, and ultrix4.1.  These change things
like the location of the alias file and queue directory.  Some of
these files are identical to one another.

Operating system definitions are easy to write.  They may define
the following variables (everything defaults, so an ostype file
may be empty).

ALIAS_FILE		[/etc/aliases] The location of the text version
			of the alias file.
HELP_FILE		[/usr/lib/sendmail.hf] The name of the file
			containing information printed in response to
			the SMTP HELP command.
LOCAL_MAILER		[/bin/mail] The program used to deliver local mail.
LOCAL_SHELL		[/bin/sh] The shell used to deliver piped email.
QUEUE_DIR		[/var/spool/mqueue] The directory containing
			queue files.
STATUS_FILE		[/etc/sendmail.st] The file containing status
			information.
LOCAL_MAILER_FLAGS	[rn] The flags used by the local mailer.  The
			flags lsDFMm are always included.
HOSTMAP_SPEC		[dbm -o /etc/hostmap] The value for the builtin
			hostmap key definition.  You can redefine this
			to change the class, flags, and filename of
			the hostmap.  The default flag (-o) makes this
			map optional.

In addition, the following boolean flags may be defined -- the value
is ignored.

NEED_DOMAIN		If set, the $j macro is defined as $w.$D.
			If not set, $j is defined as $w.  If this is
			set, the domain must be defined using the line
			DD<domainname> (probably in the domain file,
			but possibly in the .mc file).  You will only
			need this if you define your system hostname
			without a domain (type "hostname" -- if it
			has no dots in the output, you qualify) or if
			you are running Ultrix or OSF/1 sendmail.
			Either of these is probably a mistake.

+---------+
| DOMAINS |
+---------+

You will probably want to collect domain-dependent defines into one
file, referenced by the DOMAIN macro.  For example, our Berkeley
domain file includes definitions for several internal distinguished
hosts:

UUCP_RELAY	The host that will forward UUCP-addressed email.
		If not defined, all UUCP sites must be directly
		connected.
BITNET_RELAY	The host that will forward BITNET-addressed email.
		If not defined, the .BITNET pseudo-domain won't work.
CSNET_RELAY	The host that will forward CSNET-addressed email.
		If not defined, the .CSNET pseudo-domain won't work.
LOCAL_RELAY	The site that will handle unqualified names -- that
		is, names with out an @domain extension.  If not set,
		they are assumed to belong on this machine.  This
		allows you to have a central site to store a
		company- or department-wide alias database.  This
		only works at small sites, and there are better
		methods.

The domain file can also be used to define a domain name, if needed
(using "DD<domain>") and set certain site-wide features, such as
no_wildcard_MX.  If all hosts at your site masquerade behind one
email name, you could also use MASQUERADE_AS here.

+---------+
| MAILERS |
+---------+

There are fewer mailers supported in this version than the previous
version, owing mostly to a simpler world.

local		The local and prog mailers.  You will almost always
		need these; the only exception is if you relay ALL
		your mail to another site.  This mailer is included
		automatically.

smtp		The Simple Mail Transport Protocol mailer.  This does
		not hide hosts behind a gateway or another other
		such hack; it assumes a world where everyone is
		running the name server.

uucp		The Unix-to-Unix Copy Program mailer.  Actually, this
		defines two mailers, "uucp" and "suucp".  The latter
		is for when you know that the UUCP mailer at the other
		end can handle multiple recipients in one transfer.
		When you invoke this, sendmail looks for all names in
		the $=U class and sends them to the uucp mailer; all
		names in the $=Y class are sent to suucp.  Note that
		this is a function of what version of rmail runs on
		the receiving end, and hence may be out of your control.

+----------+
| FEATURES |
+----------+

Special features can be requested using the "FEATURE" macro.  For
example, the .mc line:

	FEATURE(use_cw_file)

tells sendmail that you want to have it read an /etc/sendmail.cw
file to get values for class $=w.  Available features are:

use_cw_file	Read the file /etc/sendmail.cw file to get alternate
		names for this host.  This might be used if you were
		on a host that MXed for a dynamic set of other
		hosts.  If the set is static, just including the line
		"Cw<name1> <name2> ..." is probably superior.

no_wildcard_MX	This domain does not have a wildcard MX record that
		matches it.  For example, I am in domain
		CS.Berkeley.EDU, and there is no MX record that
		matches *.CS.Berkeley.EDU or *.Berkeley.EDU, so I
		can safely use this feature.  If you set this, you
		get better name server performance.

Other FEATUREs should be defined, but I was trying to keep these
config files fairly lean and mean.

+-------+
| HACKS |
+-------+

Some things just can't be called features.  To make this clear,
they go in the hack subdirectory and are referenced using the HACK
macro.  These will tend to be site-dependent.  The release
includes the Berkeley-dependent "cssubdomain" hack (that makes
sendmail accept local names in either Berkeley.EDU or CS.Berkeley.EDU;
this is intended as a short-term aid while we move hosts into
subdomains.

+--------------------+
| SITE CONFIGURATION |
+--------------------+

Complex sites will need more local configuration information, such as
lists of UUCP hosts they speak with directly.  This can get a bit more
tricky.  For an example of a "complex" site, see cf/ucbvax.mc.

The SITECONFIG macro allows you to indirectly reference site-dependent
configuration information stored in the siteconfig subdirectory.  For
example, the line

	SITECONFIG(uucp.ucbvax, ucbvax, U)

reads the file uucp.ucbvax for local connection information.  The
second parameter is the local name (in this case just "ucbvax" since
it is locally connected, and hence a UUCP hostname) and the name of
the class in which to store the host information.  Another SITECONFIG
line reads

	SITECONFIG(uucp.ucbarpa, ucbarpa.Berkeley.EDU, W)

This says that the file uucp.ucbarpa contains the list of UUCP sites
connected to ucbarpa.Berkeley.EDU.  The $=W class will be used to
store this list.  [The machine ucbarpa is gone now, but I've left
this out-of-date configuration file around to demonstrate how you
might do this.]

The siteconfig file (e.g., siteconfig/uucp.ucbvax.m4) contains nothing
more than a sequence of SITE macros describing connectivity.  For
example:

	SITE(cnmat)
	SITE(sgi olympus)

The second example demonstrates that you can use two names on the
same line; these are usually aliases for the same host (or are at
least in the same company).

+-------------------+
| TWEAKING RULESETS |
+-------------------+

For more complex configurations, you can define special rules.
The macro LOCAL_RULE_3 introduces rules that are used in canonicalizing
the names.  Any modifications made here are reflected in the header.

A common use is to convert old UUCP addreses to SMTP addresses using
the UUCPSMTP macro.  For example:

	LOCAL_RULE_3
	UUCPSMTP(decvax,	decvax.dec.com)
	UUCPSMTP(research,	research.att.com)

will cause addresses of the form "decvax!user" and "research!user"
to be converted to "user@decvax.dec.com" and "user@research.att.com"
respectively.

This could also be used to look hosts in a database map:

	LOCAL_RULE_3
	R$* < @ $+ > $*		$: $1 < @ $(hostmap $2 $) > $3

This map would be defined in the LOCAL_CONFIG portion, as shown below.

Similarly, LOCAL_RULE_0 can be used to introduce new parsing rules.
For example, new rules are needed to parse hostnames that you accept
via MX records.  For example, you might have:

	LOCAL_RULE_0
	R$+ < @ cnmat.Berkeley.EDU >	$#uucp $@ cnmat $: $1

You would use this if you had installed an MX record for cnmat.Berkeley.EDU
pointing at this host; this rule catches the message and forwards it on
using UUCP.

A similar macro is LOCAL_CONFIG.  This introduces lines added after the
boilerplate option setting but before rulesets, and can be used to
override default options, declare local database maps, or whatever.
For example:

	LOCAL_CONFIG
	Khostmap hash /etc/hostmap.db
	Kyplocal nis -m hosts.byname
	OJ/var/forward/$u:$z/.forward
	OL3

+---------------------------+
| MASQUERADING AND RELAYING |
+---------------------------+

You can have your host masquerade as another using

	MASQUERADE_AS(host.domain)

This causes outgoing SMTP mail to be labelled as coming from the
indicated domain, rather than $j.  One normally masquerades as one
of your own subdomains (for example, it's unlikely that I would
choose to masquerade as an MIT site).

there are always users that need to be "exposed" -- that is, their
internal site name should be displayed instead of the masquerade name.
Root is an example.  You can add users to this list using

	EXPOSED_USER(usernames)

This adds users to class E; you could also use something like

	FE/etc/sendmail.cE

You can also arrange to relay all unqualified names (that is, names
without @host) to a relay host.  For example, if you have a central
email server, you might relay to that host so that users don't have
to have .forward files or aliases.  You can do this using

	define(`LOCAL_RELAY', hostname)

There are some user names that you don't want relayed, perhaps because
of local aliases.  A common example is root, which may be locally
aliased.  You can add entries to this list using

	LOCAL_USER(usernames)

This adds users to class L; you could also use something like

	FL/etc/sendmail.cL

+-----------+
| HIERARCHY |
+-----------+

Within this directory are several subdirectories, to wit:

m4		General support routines.  These are typically
		very important and should not be changed without
		very careful consideration.

cf		The configuration files themselves.  They have
		".mc" suffixes, and must be run through m4 to
		become complete.  The resulting output should
		have a ".cf" suffix.

ostype		Definitions describing a particular operating
		system type.  These should always be referenced
		using the OSTYPE macro in the .mc file.  Examples
		include "bsd4.3", "bsd4.4", "sunos3.5", and
		"sunos4.1".

domain		Definitions describing a particular domain, referenced
		using the DOMAIN macro in the .mc file.  These are
		site dependent; for example, we contribute "cs.exposed.m4"
		and "cs.hidden.m4" which both describe hosts in the
		CS.Berkeley.EDU subdomain; the former displays the local
		hostname (e.g., mammoth.CS.Berkeley.EDU), whereas the
		latter does its best to hide the identity of the local
		workstation inside the CS subdomain.

mailer		Descriptions of mailers.   These are referenced using
		the MAILER macro in the .mc file.

sh		Shell files used when building the .cf file from the
		.mc file in the cf subdirectory.

feature		These hold special orthogonal features that you might
		want to include.  They should be referenced using
		the FEATURE macro.

hack		Local hacks.  These can be referenced using the HACK
		macro.  They shouldn't be of more than voyeuristic
		interest outside the .Berkeley.EDU domain, but who knows?
		We've all got our own peccadilloes.

siteconfig	Site configuration -- e.g., tables of locally connected
		UUCP sites.


+------------------------+
| ADMINISTRATIVE DETAILS |
+------------------------+

The following sections detail usage of certain internal parts of the
sendmail.cf file.  Read them carefully if you are trying to modify
the current model.  If you find the above descriptions adequate, these
should be {boring, confusing, tedious, ridiculous} (pick one or more).

RULESETS (* means built in to sendmail)

   0 *	Parsing
   1 *	Sender rewriting
   2 *	Recipient rewriting
   3 *	Canonicalization
   4 *	Post cleanup
   5 *	Local address rewrite (after aliasing)
   6	Bottom half of Ruleset 3
   7	Hook for recursive ruleset 0 call
   8
   9


MAILERS

   0	local, prog	local and program mailers
   1	smtp		SMTP channel
   2	uucp


MACROS

   A
   B	Bitnet Relay
   C	CSNET Relay
   D	The local domain -- usually not needed
   E
   F
   G
   H
   I
   J
   K
   L
   M	Masquerade (who I claim to be)
   N
   O
   P
   Q
   R	Relay (for unqualified names)
   S
   T
   U	my UUCP name (if I have a UUCP connection)
   V	UUCP Relay (class V hosts)
   W	UUCP Relay (class W hosts)
   X	UUCP Relay (class X hosts)
   Y	UUCP Relay (all other hosts)
   Z	Version number


CLASSES

   A
   B
   C
   D
   E	addresses that should not seem to come from $M
   F	hosts we forward for
   G
   H
   I
   J
   K
   L	addresses that should not be forwarded to $R
   M
   N
   O	operators that indicate network operations (cannot be in local names)
   P
   Q
   R
   S
   T
   U	locally connected UUCP hosts
   V	UUCP hosts connected to relay $V
   W	UUCP hosts connected to relay $W
   X	UUCP hosts connected to relay $X
   Y	locally connected smart UUCP hosts
   Z
   .	the class containing only a dot


M4 DIVERSIONS

   1
   2	Local Ruleset 0 additions
   3	Local Ruleset 3 additions
   4	UUCP Ruleset 0 additions
   5	locally interpreted names (overrides $R)
   6	local configuration (at top of file)
   7	mailer definitions
   8	special local name recognition (late in ruleset 3)
   9
