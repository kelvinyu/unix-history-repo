.\" Copyright (c) 1992 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %sccs.include.redist.man%
.\"
.\"     @(#)kvm_open.3	5.1 (Berkeley) %G%
.\"
.Dd 
.Dt KVM_OPEN 3
.Os
.Sh NAME
.Nm kvm_open ,
.Nm kvm_close
.Nd initialize kernel virtual memory access
.Sh SYNOPSIS
.Fd #include <kvm.h>
.\" .Fa kvm_t *kd
.br
.Ft kvm_t *
.Fn kvm_open "const char *execfile" "const char *corefile" "char *swapfile" "int flags" "const char *errstr"
.Ft kvm_t *
.Fn kvm_openfiles "const char *execfile" "const char *corefile" "char *swapfile" "int flags" "const char *errbuf"
.Ft int
.Fn kvm_close "kvm_t *kd"
.Sh DESCRIPTION
.Fn kvm_open
and 
.Fn kvm_openfiles
return a descriptor used to access kernel virtual memory
via the 
.Xr kvm 3
library routines.  Both active kernels and crash dumps are accessible
through this interface.
.Pp
.Fa execfile
is the executable image of the kernel being examined.
This file must contain a symbol table.
If this argument is NULL, the currently running system is assumed,
which is indicated by _PATH_UNIX in <paths.h>.
.Pp
.Fa corefile 
is the kernel memory device file.  It can be either /dev/mem
or a crash dump core generated by 
.Xr savecore 8 .
If
.Fa corefile
is null, the default indicated by _PATH_MEM is used.
.Pp
.Fa swapfile
should indicate the swap device.  If NULL, _PATH_DRUM from <paths.h>
is used.
.Pp
The
.Fa flags 
argument indicates the read/write access as in
.Xr open 2
and applies to only the core file.
Only O_RDONLY, O_WRONLY, and O_RDWR are permitted.
.Pp
There are two open routines which differ only with respect to 
the error mechanism.
One provides backward compatibility with the SunOS kvm library, while the
other provides an improved error reporting framework.
.Pp
The
.Fn kvm_open
function is the Sun kvm compatible open call.  Here, the
.Fa errstr
argument indicates how errors should be handled.  If it is NULL,
then no errors are reporting and the application cannot know the 
specific nature of the failed kvm call.
If it is not NULL, then errors are printed to stderr with 
.Fa errstr
prepended to the message, as in
.Xr perror 3 .
Normally, the name of the program is used here.
The string is assumed to be persistent.
.Pp
The
.Fn kvm_openfiles
function provides BSD style error reporting.
Here, error messages are not printed out by the library.
Instead, the application obtains the error message
corresponding to the most recent kvm library call using
.Fn kvm_geterr
(see
.Xr kvm_geterr 3 ).
The results are undefined if the most recent kvm call did not produce
an error.
Since
.Fn kvm_geterr
requires a kvm descriptor, but the open routines return NULL on failure,
.Fn kvm_geterr
cannot be used to get the error message if open fails.
Thus,
.Fn kvm_openfiles ,
will place any error message in the
.Fa errbuf
argument.  This buffer should be _POSIX2_LINE_MAX characters large (from
<limits.h>)
.Sh RETURN VALUES
.Fn kvm_open
and 
.Fn kvm_openfiles
both return a descriptor to be used in all subsequent kvm library calls.
The library is fully re-entrant.
On failure, NULL is returned, in which case
.Fn kvm_openfiles
writes the error message into 
.Fa errbuf .
.Pp
.Fn kvm_close
returns 0 on sucess and -1 on failure.
.Sh BUGS
There should not be two open calls.  The ill-defined error semantics
of the Sun library and the desire to have a backward-compatible library
for BSD left little choice.
.Sh SEE ALSO
.Xr kvm 3
