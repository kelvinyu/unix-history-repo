.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %sccs.include.redist.man%
.\"
.\"     @(#)getsockopt.2	6.7 (Berkeley) %G%
.\"
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %sccs.include.redist.man%
.\"
.\"     @(#)getsockopt.2	6.7 (Berkeley) %G%
.\"
.Dd 
.Dt GETSOCKOPT 2
.Os BSD 4.2
.Sh NAME
.Nm getsockopt ,
.Nm setsockopt
.Nd get and set options on sockets
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/socket.h>
.Ft int
.Fn getsockopt "int s" "int level" "int optname" "char *optval" "int *optlen"
.Ft int
.Fn setsockopt "int s" "int level" "int optname" "char *optval" "int optlen"
.Sh DESCRIPTION
.Fn Getsockopt
and
.Fn setsockopt
manipulate the
.Em options
associated with a socket.  Options may exist at multiple
protocol levels; they are always present at the uppermost
.Dq socket
level.
.Pp
When manipulating socket options the level at which the
option resides and the name of the option must be specified.
To manipulate options at the socket level,
.Fa level
is specified as
.Dv SOL_SOCKET .
To manipulate options at any
other level the protocol number of the appropriate protocol
controlling the option is supplied.  For example,
to indicate that an option is to be interpreted by the
.Tn TCP
protocol,
.Fa level
should be set to the protocol number of
.Tn TCP ;
see
.Xr getprotoent 3 .
.Pp
The parameters
.Fa optval
and
.Fa optlen
are used to access option values for
.Fn setsockopt .
For
.Fn getsockopt
they identify a buffer in which the value for the
requested option(s) are to be returned.  For
.Fn getsockopt ,
.Fa optlen
is a value-result parameter, initially containing the
size of the buffer pointed to by
.Fa optval ,
and modified on return to indicate the actual size of
the value returned.  If no option value is
to be supplied or returned,
.Fa optval
may be NULL.
.Pp
.Fa Optname
and any specified options are passed uninterpreted to the appropriate
protocol module for interpretation.
The include file
.Ao Pa sys/socket.h Ac
contains definitions for
socket level options, described below.
Options at other protocol levels vary in format and
name; consult the appropriate entries in
section
4 of the manual.
.Pp
Most socket-level options take an
.Fa int
parameter for
.Fa optval .
For
.Fn setsockopt ,
the parameter should be non-zero to enable a boolean option,
or zero if the option is to be disabled.
.Dv SO_LINGER
uses a
.Fa struct linger
parameter, defined in
.Ao Pa sys/socket.h Ac ,
which specifies the desired state of the option and the
linger interval (see below).
.Pp
The following options are recognized at the socket level.
Except as noted, each may be examined with
.Fn getsockopt
and set with
.Fn setsockopt .
.Bl -column SO_OOBINLINE -offset indent
.It Dv SO_DEBUG  Ta enables recording of debugging information
.It Dv SO_REUSEADDR Ta enables local address reuse
.It Dv SO_KEEPALIVE Ta enables keep connections alive
.It Dv SO_DONTROUTE Ta enables routing bypass for outgoing messages
.It Dv SO_LINGER  Ta linger on close if data present
.It Dv SO_BROADCAST Ta enables permission to transmit broadcast messages
.It Dv SO_OOBINLINE Ta enables reception of out-of-band data in band
.It Dv SO_SNDBUF Ta set buffer size for output
.It Dv SO_RCVBUF Ta set buffer size for input
.It Dv SO_TYPE Ta get the type of the socket (get only)
.It Dv SO_ERROR Ta get and clear error on the socket (get only)
.El
.Pp
.Dv SO_DEBUG
enables debugging in the underlying protocol modules.
.Dv SO_REUSEADDR
indicates that the rules used in validating addresses supplied
in a
.Xr bind 2
call should allow reuse of local addresses.
.Dv SO_KEEPALIVE
enables the
periodic transmission of messages on a connected socket.  Should the
connected party fail to respond to these messages, the connection is
considered broken and processes using the socket are notified via a
.Dv SIGPIPE
signal.
.Dv SO_DONTROUTE
indicates that outgoing messages should
bypass the standard routing facilities.  Instead, messages are directed
to the appropriate network interface according to the network portion
of the destination address.
.Pp
.Dv SO_LINGER
controls the action taken when unsent messags
are queued on socket and a 
.Xr close 2
is performed.
If the socket promises reliable delivery of data and
.Dv SO_LINGER is set,
the system will block the process on the 
.Xr close
attempt until it is able to transmit the data or until it decides it
is unable to deliver the information (a timeout period, termed the
linger interval, is specified in the
.Fn setsockopt
call when
.Dv SO_LINGER
is requested). 
If
.Dv SO_LINGER
is disabled and a 
.Xr close
is issued, the system will process the close in a manner that allows
the process to continue as quickly as possible.
.Pp
The option
.Dv SO_BROADCAST
requests permission to send broadcast datagrams
on the socket.
Broadcast was a privileged operation in earlier versions of the system.
With protocols that support out-of-band data, the
.Dv SO_OOBINLINE
option
requests that out-of-band data be placed in the normal data input queue
as received; it will then be accessible with
.Xr recv
or
.Xr read
calls without the
.Dv MSG_OOB
flag.
.Dv SO_SNDBUF
and
.Dv SO_RCVBUF
are options to adjust the normal
buffer sizes allocated for output and input buffers, respectively.
The buffer size may be increased for high-volume connections,
or may be decreased to limit the possible backlog of incoming data.
The system places an absolute limit on these values.
Finally,
.Dv SO_TYPE
and
.Dv SO_ERROR
are options used only with
.Fn setsockopt .
.Dv SO_TYPE
returns the type of the socket, such as
.Dv SOCK_STREAM ;
it is useful for servers that inherit sockets on startup.
.Dv SO_ERROR
returns any pending error on the socket and clears
the error status.
It may be used to check for asynchronous errors on connected
datagram sockets or for other asynchronous errors.
.Sh RETURN VALUES
A 0 is returned if the call succeeds, -1 if it fails.
.Sh ERRORS
The call succeeds unless:
.Bl -tag -width ENOPROTOOPTAA
.It Bq Er EBADF
The argument
.Fa s
is not a valid descriptor.
.It Bq Er ENOTSOCK
The argument
.Fa s
is a file, not a socket.
.It Bq Er ENOPROTOOPT
The option is unknown at the level indicated.
.It Bq Er EFAULT
The address pointed to by 
.Fa optval
is not in a valid part of the process address space.
For
.Fn getsockopt ,
this error may also be returned if
.Fa optlen
is not in a valid part of the process address space.
.El
.Sh SEE ALSO
.Xr ioctl 2 ,
.Xr socket 2 ,
.Xr getprotoent 3
.Xr protocols 5
.Sh BUGS
Several of the socket options should be handled at lower levels of the system.
.Sh HISTORY
The
.Nm
system call appeared in
.Bx 4.2 .
