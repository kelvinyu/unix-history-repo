.\" Copyright (c) 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %sccs.include.redist.man%
.\"
.\"	@(#)exec.3	6.3 (Berkeley) %G%
.\"
.TH EXEC 3 ""
.UC 5
.SH NAME
execl, execlp, execle, exect, execv, execvp \- execute a file
.SH SYNOPSIS
.nf
.ft B
extern char **environ;
.sp
execl(const char *path, const char *arg, ...);
execlp(const char *file, const char *arg, ...);
execle(const char *path, const char *arg, ...,
.ti +5
char *const envp[]);
exect(const char *path, char *const argv[],
.ti +5
char *const envp[]);
execv(const char *path, char *const argv[]);
execvp(const char *file, char *const argv[]);
.ft R
.fi
.SH DESCRIPTION
The exec family of functions replaces the current process image with a
new process image.
The functions described in this manual page are front-ends for the function
.IR execve (2).
(See the manual page for
.I execve
for detailed information about the replacement of the current process.)
.PP
The initial argument for these functions is the pathname of a file which
is to be executed.
.PP
The ``const char *arg'' and subsequent ellipses in the
.IR execl ,
.IR execlp ,
and
.I execle
functions can be thought of as
.IR arg0 ,
.IR arg1 ,
\&...,
.IR argn .
Together they describe a list of one or more pointers to null-terminated
strings that represent the argument list available to the executed program.
The first argument, by convention, should point to the file name associated
with the file being executed.
The list of arguments
.B must
be terminated by a NULL pointer.
.PP
The
.IR exect ,
.IR execv ,
and
.I execvp
functions provide an array of pointers to null-terminated strings that
represent the argument list available to the new program.
The first argument, by convention, should point to the file name associated
with the file begin executed.
The array of pointers
.B must
be terminated by a NULL pointer.
.PP
The
.I execle
and
.I exect
functions also specify the environment of the executed process by following
the NULL pointer that terminates the list of arguments in the parameter list
or the pointer to the argv array with an additional parameter.
This additional parameter is an array of pointers to null-terminated strings
and
.B must
be terminated by a NULL pointer.
The other functions take the environment for the new process image from the
external variable
.I environ
in the current process.
.PP
Some of these functions have special semantics.
.PP
The functions
.I execlp
and
.I execvp
will duplicate the actions of the shell in searching for an executable file
if the specified file name does not contain a slash (``/'') character.
The search path is the path specified in the environment by ``PATH'' variable.
If this variable isn't specified, the default path ``/bin:/usr/bin:'' is
used.
In addtion, certain errors are treated specially.
.PP
If permission is denied for a file (the attempted
.I execve
returned EACCES), these functions will continue searching the rest of
the search path.
If no other file is found, however, they will return with
.I errno
set to EACCES.
.PP
If the header of a file isn't recognized (the attempted
.I execve
returned ENOEXEC), these functions will execute the shell with the path of
the file as its first argument.
(If this attempt fails, no further searching is done.)
.PP
If the file is currently busy (the attempted
.I execve
returned ETXTBUSY), these functions will sleep for several seconds,
periodically re-attempting to execute the file.
.PP
The function
.I exect
executes a file with the program tracing facilities enabled (see
.IR ptrace (2)).
.SH "RETURN VALUE"
If any of the
.I exec
functions returns, an error will have occurred.
The return value is -1, and
.I errno
will be set to indicate the error.
.SH ERRORS
.IR Execl ,
.IR execle ,
.I execlp
and
.I execvp
may fail and set
.I errno
for any of the errors specified for the library functions
.IR execve (2)
and
.IR malloc (3).
.PP
.I Exect
and
.I execv
may fail and set
.I errno
for any of the errors specified for the library function
.IR execve (2).
.SH FILES
/bin/sh		The shell.
.SH "SEE ALSO"
sh(1), execve(2), fork(2),  ptrace(2), environ(7),
.SH COMPATIBILITY
Historically, the default path for the
.I execlp
and
.I execvp
functions was ``:/bin:/usr/bin''.
This was changed to place the current directory last to enhance system
security.
.PP
The behavior of
.I execlp
and
.I execvp
when errors occur while attempting to execute the file is historic
practice, but has not traditionally been documented and is not specified
by the POSIX standard.
.PP
Traditionally, the functions
.I execlp
and
.I execvp
ignored all errors except for the ones described above and ENOMEM and
E2BIG, upon which they returned.
They now return if any error other than the ones described above occurs.
.SH STANDARDS
.IR Execl ,
.IR execv ,
.IR execle ,
.IR execlp
and
.I execvp
conform to IEEE Std 1003.1-1988 (``POSIX'').
