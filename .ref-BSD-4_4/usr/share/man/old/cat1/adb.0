ADB(1)                       BSD Reference Manual                       ADB(1)

NNAAMMEE
     aaddbb - debugger

SSYYNNOOPPSSIISS
     aaddbb [--ww] [--kk] [--II_d_i_r] [_o_b_j_f_i_l [_c_o_r_f_i_l]]

DDEESSCCRRIIPPTTIIOONN
     AAddbb is a general purpose debugging program.  It may be used to examine
     files and to provide a controlled environment for the execution of UNIX
     programs.

     _O_b_j_f_i_l is normally an executable program file, preferably containing a
     symbol table; if not then the symbolic features of aaddbb cannot be used al-
     though the file can still be examined.  The default for _o_b_j_f_i_l is _a_._o_u_t.
     _C_o_r_f_i_l is assumed to be a core image file produced after executing
     _o_b_j_f_i_l; the default for _c_o_r_f_i_l is _c_o_r_e

     Requests to aaddbb are read from the standard input and responses are to the
     standard output.  If the --ww flag is present then both _o_b_j_f_i_l and _c_o_r_f_i_l
     are created if necessary and opened for reading and writing so that files
     can be modified using aaddbb.

     The --kk option makes aaddbb do UNIX kernel memory mapping; it should be used
     when _c_o_r_e is a UNIX crash dump or _/_d_e_v_/_m_e_m.

     The --II option specifies a directory where files to be read with $$<< or $$<<<<
     (see below) will be sought; the default is _/_u_s_r_/_l_i_b_/_a_d_b.

     AAddbb ignores QUIT; INTERRUPT causes return to the next aaddbb command.

     In general requests to aaddbb are of the form

           [_a_d_d_r_e_s_s] [, _c_o_u_n_t] [ccoommmmaanndd] [;]

     If _a_d_d_r_e_s_s is present then _d_o_t is set to _a_d_d_r_e_s_s. Initially _d_o_t is set to
     0.  For most commands _c_o_u_n_t specifies how many times the command will be
     executed.  The default _c_o_u_n_t is 1.  _A_d_d_r_e_s_s and _c_o_u_n_t are expressions.

     The interpretation of an address depends on the context it is used in.
     If a subprocess is being debugged then addresses are interpreted in the
     usual way in the address space of the subprocess.  If the operating sys-
     tem is being debugged, either post-mortem or using the special file
     _/_d_e_v_/_m_e_m to interactively examine and/or modify memory, the maps are set
     to map the kernel virtual addresses which start at 0x80000000 (on the
     VAX); see ADDRESSES below.

EEXXPPRREESSSSIIOONNSS
     ..        The value of _d_o_t.

     ++        The value of _d_o_t incremented by the current increment.

     ^^        The value of _d_o_t decremented by the current increment.

     ""        The last _a_d_d_r_e_s_s typed.

     _i_n_t_e_g_e_r  A number.  The prefixes 0o and 0O (zero oh) force interpretation
              in octal radix; the prefixes 0t and 0T force interpretation in
              decimal radix; the prefixes 0x and 0X force interpretation in
              hexadecimal radix.  Thus 0o20 = 0t16 = 0x10 = sixteen.  If no
              prefix appears, then the _d_e_f_a_u_l_t _r_a_d_i_x is used; see the $$dd com-
              mand.  The default radix is initially hexadecimal.  The hexadec-
              imal digits are 0123456789abcdefABCDEF with the obvious values.
              Note that a hexadecimal number whose most significant digit
              would otherwise be an alphabetic character must have a 0x (or
              0X) prefix (or a leading zero if the default radix is hexadeci-
              mal).

     _i_n_t_e_g_e_r_._f_r_a_c_t_i_o_n
              A 32 bit floating point number.

     'cccc'   The ASCII value of up to 4 characters.  \ may be used to escape
              a '.

     _< _n_a_m_e   The value of _n_a_m_e, which is either a variable name or a register
              name.  AAddbb maintains a number of variables (see _V_A_R_I_A_B_L_E_S below)
              named by single letters or digits.  If _n_a_m_e is a register name
              then the value of the register is obtained from the system head-
              er in _c_o_r_f_i_l. The register names are those printed by the $$rr
              command.

     _s_y_m_b_o_l   A _s_y_m_b_o_l is a sequence of upper or lower case letters, under-
              scores or digits, not starting with a digit.  The backslash
              character \ may be used to escape other characters.  The value
              of the _s_y_m_b_o_l is taken from the symbol table in _o_b_j_f_i_l. An ini-
              tial _ will be prepended to _s_y_m_b_o_l if needed.

     ___s_y_m_b_o_l  In C, the `true name' of an external symbol begins with _. It
              may be necessary to utter this name to distinguish it from in-
              ternal or hidden variables of a program.

     _r_o_u_t_i_n_e_._n_a_m_e
              The address of the variable _n_a_m_e in the specified C routine.
              Both _r_o_u_t_i_n_e and _n_a_m_e are _s_y_m_b_o_l_s. If _r_o_u_t_i_n_e is omitted, the
              currently active frame is used.  (This form is currently broken;
              local variables can be examined only with dbx(1)).  If _n_a_m_e is
              omitted the value is the address of the most recently activated
              C stack frame corresponding to _r_o_u_t_i_n_e (this much works).

     (_e_x_p)    The value of the expression _e_x_p.

   MMoonnaaddiicc OOppeerraattoorrss
     *_e_x_p  The contents of the location addressed by _e_x_p in _c_o_r_f_i_l.
     @_e_x_p  The contents of the location addressed by _e_x_p in _o_b_j_f_i_l.
     -_e_x_p  Integer negation.
     ~_e_x_p  Bitwise complement.
     #_e_x_p  Logical negation.

   DDyyaaddiicc ooppeerraattoorrss
     Are left associative and are less binding than monadic operators.

     _e_1+_e_2  Integer addition.
     _e_1-_e_2  Integer subtraction.
     _e_1*_e_2  Integer multiplication.
     _e_1%_e_2  Integer division.
     _e_1&_e_2  Bitwise conjunction.
     _e_1|_e_2  Bitwise disjunction.
     _e_1#_e_2  _e_1 rounded up to the next multiple of _e_2.

CCOOMMMMAANNDDSS
     Most commands consist of a verb followed by a modifier or list of modi-
     fiers.  The following verbs are available.  (The commands ?? and / may be
     followed by *; see the _A_D_D_R_E_S_S_E_S section for further details.)

     ??_f    Locations starting at _a_d_d_r_e_s_s in _o_b_j_f_i_l are printed according to
           the format _f. _d_o_t is incremented by the sum of the increments for
           each format letter (q.v.).

     //_f    Locations starting at _a_d_d_r_e_s_s in _c_o_r_f_i_l are printed according to

           the format _f and _d_o_t is incremented as for ??.

     ==_f    The value of _a_d_d_r_e_s_s itself is printed in the styles indicated by
           the format _f. (For _i format, zero values are assumed for the parts
           of the instruction that reference subsequent words.)

     A _f_o_r_m_a_t consists of one or more characters that specify a style of
     printing.  Each format character may be preceded by a decimal integer
     that is a repeat count for the format character.  While stepping through
     a format, _d_o_t is incremented by the amount given for each format letter.
     If no format is given then the last format is used.  The format charac-
     ters available are as follows.  Note that a backslash (\) must be used to
     quote the three numeric formats.

     11 _1      Print 1 byte in the current radix (which may be either signed or
              unsigned; see the $$dd command).
     22 _2      Print 2 bytes in the current radix.
     44 _4      Print 4 bytes in the current radix.
     vv _2      Print 2 bytes in the signed variant of the current radix.
     VV _4      Print 4 bytes in the signed variant of the current radix.
     oo _2      Print 2 bytes in unsigned octal.  All octal numbers output by
              aaddbb are preceded by 0.
     OO _4      Print 4 bytes in unsigned octal.
     qq _2      Print 2 bytes in signed octal.
     QQ _4      Print 4 bytes in signed octal.
     uu _2      Print 2 bytes in unsigned decimal.
     UU _4      Print 4 bytes in long unsigned decimal.
     dd _2      Print 2 bytes in signed decimal.
     DD _4      Print 4 bytes in long signed decimal.
     xx _2      Print 2 bytes in unsigned hexadecimal.
     XX _4      Print 4 bytes in unsigned hexadecimal.
     zz _2      Print 2 bytes in signed hexadecimal.
     ZZ _4      Print 4 bytes in signed hexadecimal.
     ff _4      Print 4 bytes as a floating point number.
     FF _8      Print 8 bytes as a double precision floating point number.
     bb _1      Print 1 byte in unsigned octal.
     cc _1      Print 1 byte as a character.
     CC _1      Print 1 byte as a character, using the standard escape conven-
              tion where control characters are printed as `^X' and the delete
              character is printed as `^?'.
     ss _n      Print the addressed characters until a zero character is
              reached.  _n is the length of the string including its zero ter-
              minator.
     SS _n      Print a string using the `^X' escape convention (see _C above).
              _n is the length of the string including its zero terminator.
     YY _4      Print 4 bytes in date format (see ctime(3)).
     ii _n      Print as machine instructions.  _n is the number of bytes occu-
              pied by the instruction.  This style of printing causes the nu-
              meric variables 1, 2, ... to be set according to the offset
              parts of the arguments, if any, of the instruction (up to 6 on
              the VAX).
     aa _0      Print the value of _d_o_t in symbolic form.  Symbols are checked to
              ensure that they have an appropriate type as indicated below.
              _/     local or global data symbol
              _?     local or global text symbol
              _=     local or global absolute symbol
     pp _4      Print the addressed value in symbolic form using the same rules
              for symbol lookup as aa.
     tt _0      When preceded by an integer, tabs to the next appropriate tab
              stop.  For example, 8t moves to the next 8-space tab stop.
     rr _0      Print a space.
     nn _0      Print a newline.
     ````......'''' _0
              Print the enclosed string.
     ^^        _D_o_t is decremented by the current increment.  Nothing is print-

              ed.
     ++        _D_o_t is incremented by 1.  Nothing is printed.
     --        _D_o_t is decremented by 1.  Nothing is printed.
     newline  Repeat the previous command with a _c_o_u_n_t of 1.

     [??//]ll _v_a_l_u_e _m_a_s_k
                Words starting at _d_o_t are masked with _m_a_s_k and compared with
                _v_a_l_u_e until a match is found.  If LL is used then the match is
                for 4 bytes at a time instead of 2.  If no match is found then
                _d_o_t is unchanged; otherwise _d_o_t is set to the matched loca-
                tion.  If _m_a_s_k is omitted then all bits are compared.

     [??//]ww _v_a_l_u_e _._._.
                Write the 2-byte _v_a_l_u_e into the addressed location.  If the
                command is WW, write 4 bytes.  Odd addresses _a_r_e allowed when
                writing to the subprocess address space.

     [??//]mm _b_1 _e_1 _f_1[??//]
                New values for (_b_1, _e_1, _f_1) are recorded.  If less than three
                expressions are given then the remaining map parameters are
                left unchanged.  If the ?? or // is followed by * then the sec-
                ond segment (_b_2, _e_2, _f_2) of the mapping is changed.  If the
                list is terminated by ?? or // then the file (_o_b_j_f_i_l or _c_o_r_f_i_l
                respectively) is used for subsequent requests.  For example,
                `/m?' will cause // to refer to _o_b_j_f_i_l.

     >>_n_a_m_e      _D_o_t is assigned to the variable or register named.

     !!          A shell (_/_b_i_n_/_s_h) is called to read the rest of the line fol-
                lowing !!.

     $$_m_o_d_i_f_i_e_r  Miscellaneous commands.  The available _m_o_d_i_f_i_e_r_s are:

                <<_f_i_l_e   Read commands from _f_i_l_e. If this command is executed
                        in a file, further commands in the file are not seen.
                        If _f_i_l_e is omitted, the current input stream is termi-
                        nated.  If a _c_o_u_n_t is given, and is zero, the command
                        will be ignored.  The value of the count will be
                        placed in variable _9 before the first command in _f_i_l_e
                        is executed.

                <<<<_f_i_l_e  Similar to << except it can be used in a file of com-
                        mands without causing the file to be closed.  Variable
                        _9 is saved during the execution of this command, and
                        restored when it completes.  There is a (small) finite
                        limit to the number of <<<< files that can be open at
                        once.

                >>_f_i_l_e   Append output to the file _f_i_l_e, which is created if it
                        does not exist.  If _f_i_l_e is omitted, output is re-
                        turned to the terminal.

                ??_f_i_l_e   Print process id, the signal which caused stoppage or
                        termination, as well as the registers as $$rr. This is
                        the default if _m_o_d_i_f_i_e_r is omitted.

                rr       Print the general registers and the instruction ad-
                        dressed by ppcc. _D_o_t is set to ppcc.

                bb       Print all breakpoints and their associated counts and
                        commands.

                cc       C stack backtrace.  If _a_d_d_r_e_s_s is given then it is
                        taken as the address of the current frame instead of
                        the contents of the frame-pointer register.  If CC is
                        used then the names and (32 bit) values of all auto-
                        matic and static variables are printed for each active
                        function (this is partially broken; the names are not
                        now available).  If _c_o_u_n_t is given then only the first
                        _c_o_u_n_t frames are printed.

                dd       Set the default radix to _a_d_d_r_e_s_s and report the new
                        value.  If no _a_d_d_r_e_s_s is given, the default radix is
                        not changed.  The new radix must be between -16 (deci-
                        mal) and 16 (decimal) and must not be 0, 1, or -1.  A
                        negative radix implies that numbers printed in that
                        radix will be treated as signed; otherwise they are
                        treated as unsigned.  Note that _a_d_d_r_e_s_s is interpreted
                        in the (old) current radix.  Thus ``10$d'' simply
                        changes the default radix to unsigned.  To make signed
                        decimal the default radix, use ``-0t10$d''

                ee       The names and values of external variables are print-
                        ed.

                ww       Set the page width for output to _a_d_d_r_e_s_s (default 80).

                ss       Set the limit for symbol matches to _a_d_d_r_e_s_s (default
                        1024).

                qq       Exit from aaddbb.

                vv       Print all non zero variables in octal.

                mm       Print the address map.

                pp       (_K_e_r_n_e_l _d_e_b_u_g_g_i_n_g) Change the current kernel memory
                        mapping to map the designated uusseerr ssttrruuccttuurree to the
                        address given by the symbol __uu. The _a_d_d_r_e_s_s argument
                        is the address of the user's user page table entries.

     :_m_o_d_i_f_i_e_r  Manage a subprocess.  Available modifiers are:

                bb_c      Set breakpoint at _a_d_d_r_e_s_s. The breakpoint is executed
                        _c_o_u_n_t_-_1 times before causing a stop, after which it
                        stops unconditionally.  Each time the breakpoint is
                        encountered the command _c is executed.  If this com-
                        mand is omitted or sets _d_o_t to zero, the breakpoint
                        causes a stop immediately, regardless of any remaining
                        count.

                dd       Delete breakpoint at _a_d_d_r_e_s_s.

                DD       Delete all breakpoints.

                rr       Run _o_b_j_f_i_l as a subprocess.  If _a_d_d_r_e_s_s is given ex-
                        plicitly then the program is entered at this point;
                        otherwise the program is entered at its standard entry
                        point.  _c_o_u_n_t specifies how many breakpoints are to be
                        ignored before stopping.  Arguments to the subprocess
                        may be supplied on the same line as the command.  An
                        argument starting with < or > causes the standard in-
                        put or output to be established for the command.

                cc_s      The subprocess is continued with signal _s; see
                        sigvec(2).  If _a_d_d_r_e_s_s is given then the subprocess is
                        continued at this address.  If no signal is specified
                        then the signal that caused the subprocess to stop is
                        sent.  Breakpoint skipping is the same as for rr.

                ss_s      As for cc except that the subprocess is single stepped
                        _c_o_u_n_t times.  If there is no current subprocess then
                        _o_b_j_f_i_l is run as a subprocess as for rr. In this case
                        no signal can be sent; the remainder of the line is
                        treated as arguments to the subprocess.

                kk       The current subprocess, if any, is terminated.

VVAARRIIAABBLLEESS
     AAddbb provides a number of variables.  Named variables are set initially by
     aaddbb but are not used subsequently.  Numbered variables are reserved for
     communication as follows.

     0       The last value printed.
     1       The last offset part of an instruction source.  This continues up
             through at most 6 on the VAX. For a three-operand instruction,
             variable 2 is the second source offset and variable 3 the desti-
             nation offset part.
     9       The count on the last $< or $<< command.

     On entry the following are set from the system header in the _c_o_r_f_i_l. If
     _c_o_r_f_i_l does not appear to be a _c_o_r_e file then these values are set from
     _o_b_j_f_i_l.

     b       The base address of the data segment.
     d       The data segment size.
     e       The entry point.
     m       The `magic' number (0407, 0410 or 0413).
     s       The stack segment size.
     t       The text segment size.

AADDDDRREESSSSEESS
     The address in a file associated with a written address is determined by
     a mapping associated with that file.  Each mapping is represented by two
     triples (_b_1, _e_1, _f_1) and (_b_2, _e_2, _f_2) and the _f_i_l_e _a_d_d_r_e_s_s corresponding
     to a written _a_d_d_r_e_s_s is calculated as follows.

           _b_1<<==_a_d_d_r_e_s_s_<_=_e_1 -->> _f_i_l_e _a_d_d_r_e_s_s=_a_d_d_r_e_s_s++_f_1--_b_1_, _o_t_h_e_r_w_i_s_e

           _b_2<<==_a_d_d_r_e_s_s_<_=_e_2 -->> _f_i_l_e _a_d_d_r_e_s_s=_a_d_d_r_e_s_s++_f_2--_b_2

     otherwise, the requested _a_d_d_r_e_s_s is not legal.  In some cases (e.g. for
     programs with separated I and D space) the two segments for a file may
     overlap.  If a ?? or // is followed by an ** then only the second triple is
     used.

     The initial setting of both mappings is suitable for normal _a_._o_u_t and
     _c_o_r_e files.  If either file is not of the kind expected then, for that
     file, _b_1 is set to 0, _e_1 is set to the maximum file size and _f_1 is set to
     0; in this way the whole file can be examined with no address transla-
     tion.

FFIILLEESS
     a.out
     core

SSEEEE AALLSSOO
     cc(1),  dbx(1),  ptrace(2),  a.out(5),  core(5)

HHIISSTTOORRYY
     AAddbb was first released with Version 7 AT&T UNIX.  The version of aaddbb this
     man page describes is descended from the orignial.

DDIIAAGGNNOOSSTTIICCSS
     `adb' when there is no current command or format.  Comments about inac-
     cessible files, syntax errors, abnormal termination of commands, etc.
     Exit status is 0, unless last command failed or returned nonzero status.

BBUUGGSS
     Since no shell is invoked to interpret the arguments of the ::rr command,
     the customary wild-card and variable expansions cannot occur.

4th Berkeley Distribution        June 29, 1993                               7
