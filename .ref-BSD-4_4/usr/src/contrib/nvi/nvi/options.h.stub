/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)options.h.stub	8.1 (Berkeley) 6/9/93
 */

typedef struct _option {
	union {
		u_long	 val;		/* Value, boolean. */
		char	*str;		/* String. */
	} o_u;

#define	OPT_ALLOCATED	0x01		/* Allocated space. */
#define	OPT_SET		0x02		/* Set (display for the user). */
	u_int	flags;
} OPTION;

typedef struct _optlist {
	char	*name;			/* Name. */
					/* Change function. */
	int	(*func) __P((struct _scr *, struct _option *, char *, u_long));
					/* Type of object. */	
	enum { OPT_0BOOL, OPT_1BOOL, OPT_NUM, OPT_STR } type;

#define	OPT_NOSAVE	0x01		/* Option not saved by mkexrc. */
	u_int	 flags;
} OPTLIST;

/* Clear, set, test boolean options. */
#define	O_SET(sp, o)		(sp)->opts[(o)].o_u.val = 1
#define	O_CLR(sp, o)		(sp)->opts[(o)].o_u.val = 0
#define	O_ISSET(sp, o)		((sp)->opts[(o)].o_u.val)

/* Get option values. */
#define	O_VAL(sp, o)		(sp)->opts[(o)].o_u.val
#define	O_STR(sp, o)		(sp)->opts[(o)].o_u.str

/* Option routines. */
void	opts_dump __P((struct _scr *, int));
int	opts_init __P((struct _scr *));
int	opts_save __P((struct _scr *, FILE *));
int	opts_set __P((struct _scr *, char **));

/* Per-option change routines. */
int	f_columns __P((struct _scr *, struct _option *, char *, u_long));
int	f_flash __P((struct _scr *, struct _option *, char *, u_long));
int	f_keytime __P((struct _scr *, struct _option *, char *, u_long));
int	f_leftright __P((struct _scr *, struct _option *, char *, u_long));
int	f_lines __P((struct _scr *, struct _option *, char *, u_long));
int	f_list __P((struct _scr *, struct _option *, char *, u_long));
int	f_mesg __P((struct _scr *, struct _option *, char *, u_long));
int	f_modelines __P((struct _scr *, struct _option *, char *, u_long));
int	f_number __P((struct _scr *, struct _option *, char *, u_long));
int	f_paragraph __P((struct _scr *, struct _option *, char *, u_long));
int	f_readonly __P((struct _scr *, struct _option *, char *, u_long));
int	f_ruler __P((struct _scr *, struct _option *, char *, u_long));
int	f_section __P((struct _scr *, struct _option *, char *, u_long));
int	f_shiftwidth __P((struct _scr *, struct _option *, char *, u_long));
int	f_sidescroll __P((struct _scr *, struct _option *, char *, u_long));
int	f_tabstop __P((struct _scr *, struct _option *, char *, u_long));
int	f_tags __P((struct _scr *, struct _option *, char *, u_long));
int	f_term __P((struct _scr *, struct _option *, char *, u_long));
int	f_wrapmargin __P((struct _scr *, struct _option *, char *, u_long));
